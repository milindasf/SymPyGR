

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt3[pp]*gt5[pp];
            double x1 = pow(gt4[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt2[pp]*gt4[pp];
            double x6 = 2*x5;
            double x7 = -gt0[pp]*x0 + gt0[pp]*x1 - gt1[pp]*x6 + gt3[pp]*x4 + gt5[pp]*x3;
            double x8 = 1.0/x7;
            double x9 = 1.0*x8;
            double x10 = gt1[pp]*gt5[pp];
            double x11 = gt0[pp]*gt5[pp] - x4;
            double x12 = 0.33333333333333331;
            double x13 = gt0[pp]*gt4[pp];
            double x14 = gt1[pp]*gt2[pp];
            double x15 = x13 - x14;
            double x16 = gt1[pp]*gt4[pp];
            double x17 = gt2[pp]*gt3[pp];
            double x18 = x16 - x17;
            double x19 = x18*x8;
            double x20 = 0.33333333333333331*x19;
            double x21 = gt0[pp]*gt3[pp] - x3;
            double x22 = x21*x8;
            double x23 = 0.33333333333333331*x22;
            double x24 = pow(x15, 2);
            double x25 = pow(x18, 2);
            double x26 = 2*x15;
            double x27 = At0[pp]*x25 - At1[pp]*x18*x26 + 2*At2[pp]*x18*x21 + At3[pp]*x24 - At4[pp]*x21*x26 + At5[pp]*pow(x21, 2);
            double x28 = pow(x7, -2);
            double x29 = 2*x28;
            double x30 = pow(x7, -3);
            double x31 = 0.5*grad_0_gt5[pp];
            double x32 = 1.0*grad_2_gt2[pp];
            double x33 = x31 - x32;
            double x34 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x35 = -0.5*grad_2_gt5[pp]*x21 - x15*x34 + x18*x33;
            double x36 = 0.5*x13 - 0.5*x14;
            double x37 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x38 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x39 = grad_1_gt3[pp]*x36 + x18*x37 - x21*x38;
            double x40 = x10 - x5;
            double x41 = pow(x40, 2);
            double x42 = 2*At4[pp];
            double x43 = 2*x40;
            double x44 = 0.5*x16 - 0.5*x17;
            double x45 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x46 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x47 = -grad_0_gt0[pp]*x44 + x15*x45 - x21*x46;
            double x48 = At1[pp]*x2;
            double x49 = x18*x40;
            double x50 = x21*x40;
            double x51 = At0[pp]*x18*x2 - At1[pp]*x49 + At2[pp]*x2*x21 + At2[pp]*x25 + At3[pp]*x15*x40 - At4[pp]*x15*x18 - At4[pp]*x50 + At5[pp]*x18*x21 - x15*x48;
            double x52 = At3[pp]*x11;
            double x53 = -At0[pp]*x49 + At1[pp]*x11*x18 + At1[pp]*x15*x40 - At2[pp]*x15*x18 - At2[pp]*x50 + At4[pp]*x11*x21 + At4[pp]*x24 - At5[pp]*x15*x21 - x15*x52;
            double x54 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x55 = -grad_0_gt5[pp]*x21 - grad_2_gt0[pp]*x18 + x15*x54;
            double x56 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x57 = -grad_1_gt5[pp]*x21 + grad_2_gt3[pp]*x15 - x18*x56;
            double x58 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x59 = grad_0_gt3[pp]*x15 - grad_1_gt0[pp]*x18 - x21*x58;
            double x60 = 0.5*x10 - 0.5*x5;
            _2712[pp] = 2*alpha[pp]*x27*x30*x35 + 2*alpha[pp]*x30*x39*(At0[pp]*x41 - At1[pp]*x11*x43 + 2*At2[pp]*x15*x40 + At3[pp]*pow(x11, 2) + At5[pp]*x24 - x11*x15*x42) + 2*alpha[pp]*x30*x47*(At0[pp]*pow(x2, 2) + 2*At2[pp]*x18*x2 + At3[pp]*x41 + At5[pp]*x25 - x42*x49 - x43*x48) + 2.0*alpha[pp]*x30*x51*x55 + 2.0*alpha[pp]*x30*x53*x57 + 2.0*alpha[pp]*x30*x59*(-At0[pp]*x2*x40 + At1[pp]*x41 - At2[pp]*x15*x2 - At2[pp]*x49 + At4[pp]*x11*x18 + At4[pp]*x15*x40 - At5[pp]*x15*x18 + x11*x48 - x40*x52) - grad2_0_0_beta0[pp]*x20 - grad2_0_0_beta2[pp]*x2*x9 + 1.0*grad2_0_1_beta0[pp]*x12*x15*x8 - grad2_0_1_beta1[pp]*x20 + 1.0*grad2_0_1_beta2[pp]*x8*(2*x10 - x6) - grad2_0_2_beta0[pp]*x23 - 2.333333333333333*grad2_0_2_beta2[pp]*x19 + 1.0*grad2_1_1_beta1[pp]*x12*x15*x8 - grad2_1_1_beta2[pp]*x11*x9 - grad2_1_2_beta1[pp]*x23 + 7.0*grad2_1_2_beta2[pp]*x12*x15*x8 - 1.3333333333333333*grad2_2_2_beta2[pp]*x22 - grad_0_alpha[pp]*x29*x51 - grad_0_beta2[pp]*x28*(-x11*(grad_1_gt3[pp]*x60 - x18*x38 + x2*x37) + x15*(-grad_1_gt5[pp]*x18 + grad_2_gt3[pp]*x40 - x2*x56) - 1.0*x18*(-grad_0_gt5[pp]*x18 - grad_2_gt0[pp]*x2 + x40*x54) - x2*(-0.5*grad_0_gt0[pp]*x2 - x18*x46 + x40*x45) - x21*(-grad_2_gt5[pp]*x44 + x2*x33 - x34*x40) + x40*(grad_0_gt3[pp]*x40 - grad_1_gt0[pp]*x2 - x18*x58)) - grad_1_alpha[pp]*x29*x53 - grad_1_beta2[pp]*x28*(-x11*(-0.5*grad_1_gt3[pp]*x11 + x15*x38 - x37*x40) + x15*(grad_1_gt5[pp]*x15 - grad_2_gt3[pp]*x11 + x40*x56) - 1.0*x18*(grad_0_gt5[pp]*x15 + grad_2_gt0[pp]*x40 - x11*x54) - x2*(grad_0_gt0[pp]*x60 - x11*x45 + x15*x46) - x21*(grad_2_gt5[pp]*x36 + x11*x34 + x40*(-x31 + x32)) + x40*(-grad_0_gt3[pp]*x11 + grad_1_gt0[pp]*x40 + x15*x58)) - grad_2_alpha[pp]*x27*x29 - grad_2_beta2[pp]*x28*(-x11*x39 + x15*x57 - 1.0*x18*x55 - x2*x47 - x21*x35 + x40*x59);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt4[pp];
            double x1 = gt1[pp]*gt2[pp];
            double x2 = x0 - x1;
            double x3 = gt1[pp]*gt4[pp];
            double x4 = gt2[pp]*gt3[pp];
            double x5 = x3 - x4;
            double x6 = -grad_2_gt1[pp];
            double x7 = grad_0_gt4[pp] + grad_1_gt2[pp] + x6;
            double x8 = gt0[pp]*gt3[pp];
            double x9 = pow(gt1[pp], 2);
            double x10 = x8 - x9;
            double x11 = 1.0/chi[pp];
            double x12 = gt1[pp]*x11;
            double x13 = pow(gt4[pp], 2);
            double x14 = pow(gt2[pp], 2);
            double x15 = gt2[pp]*gt4[pp];
            double x16 = 2*x15;
            double x17 = gt0[pp]*x13 - gt1[pp]*x16 + gt3[pp]*x14 - gt5[pp]*x8 + gt5[pp]*x9;
            double x18 = 1.0/x17;
            double x19 = 1.0*x18;
            double x20 = 4.0*x18;
            double x21 = gt1[pp]*gt5[pp];
            double x22 = -x15 + x21;
            double x23 = gt3[pp]*gt5[pp];
            double x24 = -x13 + x23;
            double x25 = gt0[pp]*gt5[pp];
            double x26 = -x14 + x25;
            double x27 = 4*x3 - 4*x4;
            double x28 = 4*x8 - 4*x9;
            double x29 = pow(x17, -2);
            double x30 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x31 = x26*x30;
            double x32 = grad_0_gt5[pp]*x2 + grad_2_gt0[pp]*x22 - x31;
            double x33 = grad_1_gt5[pp]*x2;
            double x34 = grad_2_gt3[pp]*x26;
            double x35 = -grad_0_gt4[pp] + grad_1_gt2[pp];
            double x36 = grad_2_gt1[pp] + x35;
            double x37 = x22*x36 + x33 - x34;
            double x38 = grad_0_gt3[pp]*x22;
            double x39 = grad_1_gt0[pp]*x24 - x38 + x5*x7;
            double x40 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x41 = 0.5*grad_1_gt0[pp];
            double x42 = 1.0*grad_0_gt1[pp] - x41;
            double x43 = 0.5*grad_0_gt0[pp]*x24 - x22*x42 + x40*x5;
            double x44 = 2.0*x29;
            double x45 = x29*(-4*x13 + 4*x23);
            double x46 = grad_0_gt3[pp]*x26;
            double x47 = grad_1_gt0[pp]*x22 + x2*x7 - x46;
            double x48 = -0.5*x15 + 0.5*x21;
            double x49 = grad_0_gt0[pp]*x48 + x2*x40 - x26*x42;
            double x50 = 0.5*grad_1_gt3[pp];
            double x51 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x52 = x26*x50;
            double x53 = 0.5*grad_2_gt3[pp];
            double x54 = 1.0*grad_1_gt4[pp] - x53;
            double x55 = x2*x54;
            double x56 = x22*x51;
            double x57 = -x52 + x55 - x56;
            double x58 = x29*(-4*x14 + 4*x25);
            double x59 = grad_0_gt3[pp]*x2;
            double x60 = grad_1_gt0[pp]*x5 + x10*x7 - x59;
            double x61 = grad_0_gt5[pp]*x10;
            double x62 = grad_2_gt0[pp]*x5 - x2*x30 + x61;
            double x63 = grad_1_gt5[pp]*x10;
            double x64 = grad_2_gt3[pp]*x2;
            double x65 = x36*x5 + x63 - x64;
            double x66 = 1.0*x2*x29;
            double x67 = grad_0_gt5[pp]*x5;
            double x68 = grad_2_gt0[pp]*x24 - x22*x30 + x67;
            double x69 = grad_1_gt5[pp]*x5;
            double x70 = grad_2_gt3[pp]*x22;
            double x71 = x24*x36 + x69 - x70;
            double x72 = 0.25*grad_0_gt3[pp];
            double x73 = -0.5*grad_1_gt1[pp] + x72;
            double x74 = 0.25*grad_0_gt5[pp];
            double x75 = grad_1_gt3[pp]*(0.25*grad_2_gt0[pp]*x22 + x2*x74 - 0.25*x31) + 0.25*grad_2_gt3[pp]*x47;
            double x76 = x29*(4*x0 - 4*x1);
            double x77 = -x27*x29;
            double x78 = 0.25*grad_1_gt0[pp];
            double x79 = 0.25*grad_0_gt3[pp]*x32 + x49*x53;
            double x80 = -grad_2_gt0[pp]*x5 + x2*x30 - x61;
            double x81 = 0.25*grad_1_gt5[pp];
            double x82 = -x36*x5 - x63 + x64;
            double x83 = 0.25*grad_0_gt4[pp] - 0.25*grad_1_gt2[pp] + 0.25*grad_2_gt1[pp];
            double x84 = 0.5*x3 - 0.5*x4;
            double x85 = grad_0_gt0[pp]*x84;
            double x86 = x10*x40;
            double x87 = -x2*x42 + x85 + x86;
            double x88 = 0.5*grad_1_gt5[pp];
            double x89 = 0.5*grad_0_gt4[pp];
            double x90 = 0.5*grad_1_gt2[pp];
            double x91 = 0.5*grad_2_gt1[pp];
            double x92 = x52 - x55 + x56;
            double x93 = (-0.5)*grad_1_gt2[pp] + x89 + x91;
            double x94 = 0.25*grad_0_gt3[pp]*x47 + x49*x50;
            double x95 = x29*(-4*x15 + 4*x21);
            double x96 = grad_1_gt3[pp]*x48 + x24*x51 - x5*x54;
            double x97 = -0.25*grad_0_gt3[pp]*x2 + 0.25*grad_1_gt0[pp]*x5 + 0.25*x10*x7;
            double x98 = 0.5*grad_0_gt1[pp];
            double x99 = (-0.5)*grad_0_gt4[pp] + x90 + x91;
            double x100 = grad_1_gt0[pp]*x5;
            double x101 = x10*x7;
            double x102 = -x100 - x101 + x59;
            double x103 = 0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp];
            double x104 = 0.5*x0 - 0.5*x1;
            double x105 = grad_1_gt3[pp]*x104 - x10*x54 + x5*x51;
            double x106 = -1.0*grad_2_gt4[pp] + x88;
            double x107 = -x100 - x101 + x59;
            double x108 = 0.5*grad_0_gt5[pp];
            double x109 = 1.0*grad_2_gt2[pp];
            double x110 = x108 - x109;
            double x111 = x2*x42 - x85 - x86;
            double x112 = -grad_1_gt0[pp]*x24 + x38 - x5*x7;
            double x113 = grad_2_gt5[pp]*x104 + x106*x26 + x22*(-x108 + x109);
            double x114 = x24*x49;
            double x115 = -0.5*grad_2_gt5[pp]*x10 - x106*x2 + x110*x5;
            double x116 = -grad_2_gt0[pp]*x24 + x22*x30 - x67;
            double x117 = -x24*x36 - x69 + x70;
            double x118 = -grad_2_gt5[pp]*x84 - x106*x22 + x110*x24;
            double x119 = -0.5*grad_0_gt0[pp]*x24 + x22*x42 - x40*x5;
            double x120 = 3.0*x11;
            double x121 = -x120;
            double x122 = grad_0_chi[pp]*x120;
            _3350[pp] = 3*alpha[pp]*(2.0*grad2_0_0_gt1[pp]*x18*x24 - grad2_0_1_gt1[pp]*x20*x22 + 1.0*grad2_0_2_gt1[pp]*x18*x27 + 2.0*grad2_1_1_gt1[pp]*x18*x26 - grad2_1_2_gt1[pp]*x2*x20 + 2.0*grad2_2_2_gt1[pp]*x10*x18 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] - grad_0_gt1[pp]*x44*(x10*x118 - 1.0*x112*x22 + x116*x5 - 1.0*x117*x2 + x119*x24 + x26*x96) + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*(-grad_0_chi[pp]/pow(chi[pp], 2)) - grad_1_gt1[pp]*x44*(x10*x113 + x114 - 1.0*x2*x37 - 1.0*x22*x47 + x26*x57 + x32*x5) - grad_2_gt1[pp]*x44*(x10*x115 + x105*x26 - 1.0*x107*x22 + x111*x24 - 1.0*x2*x82 + x5*x80) + x10*x29*(grad_2_gt0[pp]*x71 + x30*x68 + x36*x68) - 2.0*x11*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x112*x18 + 0.5*grad_1_chi[pp]*x18*x47 + 0.5*grad_2_chi[pp]*x107*x18) - x12*x19*(2.0*grad_0_chi[pp]*x18*(-x10*x118 + x112*x22 - 1.0*x116*x5 + x117*x2 - x119*x24 - x26*x96) + 2.0*grad_1_chi[pp]*x18*(-x10*x113 - x114 + x2*x37 + x22*x47 - x26*x57 - 1.0*x32*x5) + 2.0*grad_2_chi[pp]*x18*(-x10*x115 - x105*x26 + x107*x22 - x111*x24 + x2*x82 - 1.0*x5*x80) + x10*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x120) + x24*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x11) + x26*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x121) - (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x122)*(-x16 + 2*x21) + (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x122)*(2*x3 - 2*x4) - (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x121)*(2*x0 - 2*x1)) - x22*x44*(grad_0_gt3[pp]*x43 + grad_1_gt0[pp]*x39) + x27*x29*(0.25*grad_0_gt0[pp]*x71 + x43*x99 + x68*(-x78 + x98)) + x27*x29*(0.25*grad_2_gt0[pp]*x39 + x43*x93 + x68*x78) + x27*x29*(0.25*grad_2_gt0[pp]*x65 + x62*x83 + x87*x88) + x27*x29*(x106*x111 + 0.5*x107*x110 - 0.25*x7*x80) - x28*x29*(0.5*grad_2_gt3[pp]*x32 + 0.25*x36*x37) + x28*x29*(-x80*x81 + x80*((-0.5)*grad_2_gt4[pp] + x81) + x82*(-0.5*grad_2_gt2[pp] + x74)) - x45*(1.0*grad_0_gt3[pp]*x49 + 0.25*grad_1_gt0[pp]*x47) + x45*(0.25*grad_0_gt0[pp]*x39 + 0.5*grad_1_gt0[pp]*x43 + x42*x43) + x45*(0.25*grad_2_gt0[pp]*x60 + 0.5*x7*x87 + x87*x93) + x58*(-x47*x50 + x51*x57) - x58*(0.5*grad_1_gt0[pp]*x96 - x39*x72 + x39*x73) - x58*(0.25*grad_2_gt3[pp]*x102 + x102*x103 + x105*x99) - x66*(grad_0_gt3[pp]*x68 + grad_1_gt0[pp]*x71 + x36*x39) - x66*(grad_1_gt5[pp]*x60 + grad_2_gt3[pp]*x62 + x36*x65) + x76*(x75 + x92*(x89 - x90 - x91)) + x76*(x73*(-x22*x36 - x33 + x34) + x75) + x76*(0.5*grad_2_gt0[pp]*x96 - x39*x83 + x68*x73) - x76*(-x103*x80 + x105*x110 + 0.5*x106*x107) + x77*(0.25*x36*x47 + x79) + x77*(x37*x78 + x79) + x95*(-x41*x92 + x94) + x95*(x73*(-grad_1_gt0[pp]*x22 - x2*x7 + x46) + x94) + x95*(0.5*grad_0_gt0[pp]*x96 + x39*(x78 - x98) + x43*x51) + x95*(0.5*grad_2_gt0[pp]*x105 - x54*x87 + x97*(x35 + x6)) - x95*(x36*x97 + x53*x87 + x7*x97)) - 12*grad2_0_1_alpha[pp] - grad_2_alpha[pp]*x19*(-6.0*grad_0_gt3[pp]*x2 + 6.0*grad_1_gt0[pp]*x5 + 6.0*x10*x7 - 6.0*x12*(-grad_0_chi[pp]*x5 + grad_1_chi[pp]*x2 - grad_2_chi[pp]*x10));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = pow(gt1[pp], 2);
            double x2 = pow(gt2[pp], 2);
            double x3 = gt0[pp]*gt3[pp];
            double x4 = gt5[pp]*x3;
            double x5 = gt1[pp]*gt2[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x0 + gt3[pp]*x2 - gt4[pp]*x6 + gt5[pp]*x1 - x4;
            double x8 = 1.0/x7;
            double x9 = -x1 + x3;
            double x10 = 1.0/(-gt0[pp]*x0 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x2 - gt5[pp]*x1 + x4);
            double x11 = (-0.5)*gt0[pp]*gt4[pp] + 0.5*x5;
            double x12 = -0.5*grad_0_gt5[pp] + 1.0*grad_2_gt2[pp];
            double x13 = gt2[pp]*gt4[pp];
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x13 - x14;
            double x16 = -0.5*grad_1_gt5[pp] + 1.0*grad_2_gt4[pp];
            double x17 = gt0[pp]*gt5[pp] - x2;
            double x18 = 1.0/chi[pp];
            double x19 = gt0[pp]*gt4[pp];
            double x20 = -x19 + x5;
            double x21 = grad_0_chi[pp]*x15 + grad_1_chi[pp]*x17 + grad_2_chi[pp]*x20;
            double x22 = gt1[pp]*gt4[pp];
            double x23 = gt2[pp]*gt3[pp];
            double x24 = 0.5*x22 - 0.5*x23;
            double x25 = gt3[pp]*gt5[pp] - x0;
            double x26 = x22 - x23;
            double x27 = grad_0_chi[pp]*x25 + grad_1_chi[pp]*x15 + grad_2_chi[pp]*x26;
            double x28 = 1.0*x10;
            double x29 = grad_0_chi[pp]*x26 + grad_1_chi[pp]*x20 + grad_2_chi[pp]*x9;
            double x30 = 0.5*x10;
            double x31 = 1.0*x18;
            double x32 = (-0.5)*gt1[pp]*gt5[pp] + 0.5*x13;
            double x33 = -0.5*grad_0_gt3[pp] + 1.0*grad_1_gt1[pp];
            double x34 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x35 = 1.0*chi[pp]*x8;
            double x36 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x37 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x38 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x39 = x15*x28;
            double x40 = gt4[pp]*x28;
            double x41 = 0.5*grad_1_alpha[pp];
            double x42 = 0.5*grad_2_alpha[pp];
            double x43 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x44 = gt2[pp]*x28;
            double x45 = 0.5*grad_0_alpha[pp];
            double x46 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x47 = gt1[pp]*x28;
            double x48 = pow(x7, -2);
            double x49 = x19 - x5;
            double x50 = pow(x49, 2);
            double x51 = -x13 + x14;
            double x52 = pow(x51, 2);
            double x53 = 2*x51;
            double x54 = pow(x26, 2);
            double x55 = x26*x49;
            double x56 = x49*x9;
            double x57 = 2*At4[pp];
            double x58 = At1[pp]*x25;
            double x59 = x26*x51;
            double x60 = x51*x9;
            double x61 = At3[pp]*x17;
            _4380[pp] = agrad_0_K[pp]*beta0[pp] + agrad_1_K[pp]*beta1[pp] + 0.33333333333333331*alpha[pp]*(3*At0[pp]*x48*(At0[pp]*pow(x25, 2) + 2*At2[pp]*x25*x26 + At3[pp]*x52 + At5[pp]*x54 - x53*x58 - x57*x59) + 6*At1[pp]*x48*(-At0[pp]*x25*x51 + At1[pp]*x52 - At2[pp]*x25*x49 - At2[pp]*x59 + At4[pp]*x17*x26 + At4[pp]*x49*x51 - At5[pp]*x26*x49 + x17*x58 - x51*x61) + 6*At2[pp]*x48*(At0[pp]*x25*x26 - At1[pp]*x59 + At2[pp]*x25*x9 + At2[pp]*x54 + At3[pp]*x49*x51 - At4[pp]*x26*x49 - At4[pp]*x60 + At5[pp]*x26*x9 - x49*x58) + 3*At3[pp]*x48*(At0[pp]*x52 - At1[pp]*x17*x53 + 2*At2[pp]*x49*x51 + At3[pp]*pow(x17, 2) - 2*At4[pp]*x17*x49 + At5[pp]*x50) + 6*At4[pp]*x48*(-At0[pp]*x59 + At1[pp]*x17*x26 + At1[pp]*x49*x51 - At2[pp]*x55 - At2[pp]*x60 + At4[pp]*x17*x9 + At4[pp]*x50 - At5[pp]*x56 - x49*x61) + 3*At5[pp]*x48*(At0[pp]*x54 - 2*At1[pp]*x55 + 2*At2[pp]*x26*x9 + At3[pp]*x50 + At5[pp]*pow(x9, 2) - x56*x57) + pow(K[pp], 2)) - 1.0*chi[pp]*x8*x9*(-grad2_2_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(grad_2_gt5[pp]*x24 + 0.5*gt5[pp]*x18*x27 + x12*x25 + x15*x16) + 1.0*grad_1_alpha[pp]*x10*(grad_2_gt5[pp]*x11 + 0.5*gt5[pp]*x18*x21 + x12*x15 + x16*x17) + grad_2_alpha[pp]*(0.5*grad_2_gt5[pp]*x10*x9 + 1.0*x10*x16*x20 + x12*x26*x28 - x31*(1.0*grad_2_chi[pp] - gt5[pp]*x29*x30))) + 1.0*chi[pp]*x8*(-2*x13 + 2*x14)*(-grad2_0_1_alpha[pp] + 0.5*grad_2_alpha[pp]*x10*(grad_0_gt3[pp]*x20 + grad_1_gt0[pp]*x26 + 1.0*gt1[pp]*x18*x29 + x46*x9) + x41*(1.0*grad_0_gt3[pp]*x10*x17 + 1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x20*x46 - x31*(grad_0_chi[pp] - x21*x47)) + x45*(1.0*grad_0_gt3[pp]*x10*x15 + 1.0*grad_1_gt0[pp]*x10*x25 + 1.0*x10*x26*x46 - x31*(grad_1_chi[pp] - x27*x47))) + 1.0*chi[pp]*x8*(2*x19 - x6)*(-grad2_1_2_alpha[pp] + 0.5*grad_0_alpha[pp]*x10*(grad_1_gt5[pp]*x26 + grad_2_gt3[pp]*x15 + 1.0*gt4[pp]*x18*x27 + x25*x38) + x41*(1.0*grad_1_gt5[pp]*x10*x20 + 1.0*grad_2_gt3[pp]*x10*x17 - x31*(grad_2_chi[pp] - x21*x40) + x38*x39) + x42*(1.0*grad_1_gt5[pp]*x10*x9 + 1.0*grad_2_gt3[pp]*x10*x20 + 1.0*x10*x26*x38 - x31*(grad_1_chi[pp] - x29*x40))) - x17*x35*(-grad2_1_1_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(grad_1_gt3[pp]*x32 + 0.5*gt3[pp]*x18*x27 + x25*x33 + x26*x34) + grad_1_alpha[pp]*(0.5*grad_1_gt3[pp]*x10*x17 + 1.0*x10*x15*x33 + x20*x28*x34 - x31*(1.0*grad_1_chi[pp] - gt3[pp]*x21*x30)) + 1.0*grad_2_alpha[pp]*x10*(grad_1_gt3[pp]*x11 + 0.5*gt3[pp]*x18*x29 + x26*x33 + x34*x9)) - x25*x35*(-grad2_0_0_alpha[pp] + grad_0_alpha[pp]*(0.5*grad_0_gt0[pp]*x10*x25 + 1.0*x10*x15*x36 + 1.0*x10*x26*x37 - x31*(1.0*grad_0_chi[pp] - gt0[pp]*x27*x30)) + 1.0*grad_1_alpha[pp]*x10*(grad_0_gt0[pp]*x32 + 0.5*gt0[pp]*x18*x21 + x17*x36 + x20*x37) + 1.0*grad_2_alpha[pp]*x10*(grad_0_gt0[pp]*x24 + 0.5*gt0[pp]*x18*x29 + x20*x36 + x37*x9)) - x35*(2*x22 - 2*x23)*(-grad2_0_2_alpha[pp] + 0.5*grad_1_alpha[pp]*x10*(grad_0_gt5[pp]*x20 + grad_2_gt0[pp]*x15 + 1.0*gt2[pp]*x18*x21 + x17*x43) + x42*(1.0*grad_0_gt5[pp]*x10*x9 + 1.0*grad_2_gt0[pp]*x10*x26 + 1.0*x10*x20*x43 - x31*(grad_0_chi[pp] - x29*x44)) + x45*(1.0*grad_0_gt5[pp]*x10*x26 + 1.0*grad_2_gt0[pp]*x10*x25 - x31*(grad_2_chi[pp] - x27*x44) + x39*x43));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt5[pp];
            double x1 = pow(gt2[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = gt1[pp]*gt2[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x3 - gt3[pp]*x0 + gt3[pp]*x1 - gt4[pp]*x6 + gt5[pp]*x4;
            double x8 = 1.0/x7;
            double x9 = 1.0*x8;
            double x10 = gt0[pp]*gt4[pp];
            double x11 = gt0[pp]*gt3[pp] - x4;
            double x12 = gt1[pp]*gt4[pp];
            double x13 = gt2[pp]*gt3[pp];
            double x14 = x12 - x13;
            double x15 = x14*x8;
            double x16 = gt3[pp]*gt5[pp] - x3;
            double x17 = gt1[pp]*gt5[pp];
            double x18 = gt2[pp]*gt4[pp];
            double x19 = x17 - x18;
            double x20 = pow(x19, 2);
            double x21 = pow(x14, 2);
            double x22 = At1[pp]*x16;
            double x23 = 2*x19;
            double x24 = x14*x19;
            double x25 = 2*At4[pp];
            double x26 = At0[pp]*pow(x16, 2) + 2*At2[pp]*x14*x16 + At3[pp]*x20 + At5[pp]*x21 - x22*x23 - x24*x25;
            double x27 = pow(x7, -2);
            double x28 = 2*x27;
            double x29 = pow(x7, -3);
            double x30 = 0.5*x12 - 0.5*x13;
            double x31 = 0.5*grad_0_gt5[pp];
            double x32 = 1.0*grad_2_gt2[pp];
            double x33 = x31 - x32;
            double x34 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x35 = -grad_2_gt5[pp]*x30 + x16*x33 - x19*x34;
            double x36 = x10 - x5;
            double x37 = pow(x36, 2);
            double x38 = x14*x36;
            double x39 = At4[pp]*x11;
            double x40 = 0.5*x17 - 0.5*x18;
            double x41 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x42 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x43 = grad_1_gt3[pp]*x40 - x14*x42 + x16*x41;
            double x44 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x45 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x46 = -0.5*grad_0_gt0[pp]*x16 - x14*x45 + x19*x44;
            double x47 = At0[pp]*x14*x16 - At1[pp]*x24 + At2[pp]*x11*x16 + At2[pp]*x21 + At3[pp]*x19*x36 - At4[pp]*x38 + At5[pp]*x11*x14 - x19*x39 - x22*x36;
            double x48 = At3[pp]*x2;
            double x49 = -At0[pp]*x16*x19 + At1[pp]*x20 - At2[pp]*x16*x36 - At2[pp]*x24 + At4[pp]*x14*x2 + At4[pp]*x19*x36 - At5[pp]*x38 - x19*x48 + x2*x22;
            double x50 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x51 = -grad_0_gt5[pp]*x14 - grad_2_gt0[pp]*x16 + x19*x50;
            double x52 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x53 = -grad_1_gt5[pp]*x14 + grad_2_gt3[pp]*x19 - x16*x52;
            double x54 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x55 = grad_0_gt3[pp]*x19 - grad_1_gt0[pp]*x16 - x14*x54;
            double x56 = 0.5*x10 - 0.5*x5;
            _2526[pp] = agrad_0_Gt0[pp]*beta0[pp] + agrad_1_Gt0[pp]*beta1[pp] + agrad_2_Gt0[pp]*beta2[pp] + 2*alpha[pp]*x26*x29*x46 + 2*alpha[pp]*x29*x35*(At0[pp]*x21 - 2*At1[pp]*x38 + 2*At2[pp]*x11*x14 + At3[pp]*x37 + At5[pp]*pow(x11, 2) - 2*x36*x39) + 2*alpha[pp]*x29*x43*(At0[pp]*x20 - At1[pp]*x2*x23 + 2*At2[pp]*x19*x36 + At3[pp]*pow(x2, 2) + At5[pp]*x37 - x2*x25*x36) + 2.0*alpha[pp]*x29*x47*x51 + 2.0*alpha[pp]*x29*x49*x55 + 2.0*alpha[pp]*x29*x53*(-At0[pp]*x24 + At1[pp]*x14*x2 + At1[pp]*x19*x36 - At2[pp]*x11*x19 - At2[pp]*x38 + At4[pp]*x11*x2 + At4[pp]*x37 - At5[pp]*x11*x36 - x36*x48) - 1.3333333333333333*grad2_0_0_beta0[pp]*x16*x8 - 2.333333333333333*grad2_0_2_beta0[pp]*x15 - grad2_1_1_beta0[pp]*x2*x9 + 1.0*grad2_1_2_beta0[pp]*x8*(2*x10 - x6) - 0.33333333333333331*grad2_1_2_beta1[pp]*x15 - grad2_2_2_beta0[pp]*x11*x9 - grad_0_alpha[pp]*x26*x28 - grad_0_beta0[pp]*x27*(-x11*x35 - 1.0*x14*x51 - x16*x46 + x19*x55 - x2*x43 + x36*x53) - grad_1_alpha[pp]*x28*x49 - grad_1_beta0[pp]*x27*(-x11*(grad_2_gt5[pp]*x56 + x19*(-x31 + x32) + x2*x34) - 1.0*x14*(grad_0_gt5[pp]*x36 + grad_2_gt0[pp]*x19 - x2*x50) - x16*(grad_0_gt0[pp]*x40 - x2*x44 + x36*x45) + x19*(-grad_0_gt3[pp]*x2 + grad_1_gt0[pp]*x19 + x36*x54) - x2*(-0.5*grad_1_gt3[pp]*x2 - x19*x41 + x36*x42) + x36*(grad_1_gt5[pp]*x36 - grad_2_gt3[pp]*x2 + x19*x52)) - grad_2_alpha[pp]*x28*x47 - grad_2_beta0[pp]*x27*(-x11*(-0.5*grad_2_gt5[pp]*x11 + x14*x33 - x34*x36) - 1.0*x14*(-grad_0_gt5[pp]*x11 - grad_2_gt0[pp]*x14 + x36*x50) - x16*(-grad_0_gt0[pp]*x30 - x11*x45 + x36*x44) + x19*(grad_0_gt3[pp]*x36 - grad_1_gt0[pp]*x14 - x11*x54) - x2*(grad_1_gt3[pp]*x56 - x11*x42 + x14*x41) + x36*(-grad_1_gt5[pp]*x11 + grad_2_gt3[pp]*x36 - x14*x52));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt1[pp]*gt4[pp];
            double x1 = gt2[pp]*gt3[pp];
            double x2 = x0 - x1;
            double x3 = grad_1_gt5[pp]*x2;
            double x4 = gt1[pp]*gt5[pp];
            double x5 = gt2[pp]*gt4[pp];
            double x6 = x4 - x5;
            double x7 = grad_2_gt3[pp]*x6;
            double x8 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x9 = gt3[pp]*gt5[pp];
            double x10 = pow(gt4[pp], 2);
            double x11 = -x10 + x9;
            double x12 = 1.0/chi[pp];
            double x13 = gt4[pp]*x12;
            double x14 = pow(gt1[pp], 2);
            double x15 = pow(gt2[pp], 2);
            double x16 = 2*x0;
            double x17 = gt0[pp]*x10 - gt0[pp]*x9 - gt2[pp]*x16 + gt3[pp]*x15 + gt5[pp]*x14;
            double x18 = 1.0/x17;
            double x19 = 1.0*x18;
            double x20 = gt0[pp]*gt4[pp];
            double x21 = gt1[pp]*gt2[pp];
            double x22 = x20 - x21;
            double x23 = 4.0*x18;
            double x24 = gt0[pp]*gt5[pp];
            double x25 = -x15 + x24;
            double x26 = gt0[pp]*gt3[pp];
            double x27 = -x14 + x26;
            double x28 = 4*x0 - 4*x1;
            double x29 = grad_0_gt3[pp]*x22;
            double x30 = -grad_2_gt1[pp];
            double x31 = grad_0_gt4[pp] + grad_1_gt2[pp] + x30;
            double x32 = grad_1_gt0[pp]*x2 + x27*x31 - x29;
            double x33 = 0.25*grad_0_gt4[pp];
            double x34 = 0.25*grad_1_gt2[pp];
            double x35 = 0.25*grad_2_gt1[pp];
            double x36 = x33 - x34 + x35;
            double x37 = grad_0_gt5[pp]*x27;
            double x38 = grad_0_gt4[pp] - grad_1_gt2[pp];
            double x39 = grad_2_gt1[pp] + x38;
            double x40 = x22*x39;
            double x41 = grad_2_gt0[pp]*x2 + x37 - x40;
            double x42 = pow(x17, -2);
            double x43 = x42*(-4*x10 + 4*x9);
            double x44 = grad_1_gt5[pp]*x22;
            double x45 = grad_2_gt3[pp]*x25;
            double x46 = x44 - x45 + x6*x8;
            double x47 = 0.5*grad_1_gt3[pp]*x25;
            double x48 = 0.5*grad_0_gt3[pp];
            double x49 = -1.0*grad_1_gt1[pp] + x48;
            double x50 = x49*x6;
            double x51 = 0.5*grad_2_gt3[pp];
            double x52 = 1.0*grad_1_gt4[pp] - x51;
            double x53 = x22*x52;
            double x54 = x47 + x50 - x53;
            double x55 = -0.25*grad_2_gt3[pp];
            double x56 = grad_1_gt5[pp]*x27;
            double x57 = grad_2_gt3[pp]*x22;
            double x58 = x2*x8 + x56 - x57;
            double x59 = 0.5*x20 - 0.5*x21;
            double x60 = grad_1_gt3[pp]*x59 + x2*x49 - x27*x52;
            double x61 = x42*(-4*x15 + 4*x24);
            double x62 = -4*x14 + 4*x26;
            double x63 = -x2*x8 - x56 + x57;
            double x64 = 0.5*grad_2_gt5[pp];
            double x65 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x66 = x27*x64;
            double x67 = 0.5*grad_0_gt5[pp];
            double x68 = 1.0*grad_2_gt2[pp];
            double x69 = x67 - x68;
            double x70 = x2*x69;
            double x71 = x22*x65;
            double x72 = -x66 + x70 - x71;
            double x73 = grad_0_gt3[pp]*x6;
            double x74 = grad_1_gt0[pp]*x11 + x2*x31 - x73;
            double x75 = x11*x8 + x3 - x7;
            double x76 = grad_0_gt5[pp]*x2;
            double x77 = grad_2_gt0[pp]*x11 - x39*x6 + x76;
            double x78 = x2*x42;
            double x79 = -grad_0_gt3[pp]*x25 + grad_1_gt0[pp]*x6 + x22*x31;
            double x80 = x25*x39;
            double x81 = grad_0_gt5[pp]*x22 + grad_2_gt0[pp]*x6 - x80;
            double x82 = 0.25*grad_0_gt5[pp];
            double x83 = x58*x82;
            double x84 = 0.25*grad_1_gt5[pp];
            double x85 = (-0.5)*grad_2_gt4[pp] + x84;
            double x86 = x28*x42;
            double x87 = 0.5*grad_0_gt1[pp];
            double x88 = 0.25*grad_1_gt0[pp];
            double x89 = 0.5*grad_0_gt2[pp];
            double x90 = 0.25*grad_2_gt0[pp];
            double x91 = -grad_2_gt0[pp]*x2;
            double x92 = -x32*x84 + x60*x67;
            double x93 = x42*(4*x4 - 4*x5);
            double x94 = x42*x62;
            double x95 = grad_2_gt5[pp]*x59 + x25*x65 + x6*(-x67 + x68);
            double x96 = 0.5*grad_0_gt4[pp];
            double x97 = 0.5*grad_2_gt1[pp];
            double x98 = (-0.5)*grad_1_gt2[pp] + x96 + x97;
            double x99 = x66 - x70 + x71;
            double x100 = 0.5*grad_2_gt5[pp]*x60 - x58*x84;
            double x101 = x42*(4*x20 - 4*x21);
            double x102 = 0.25*grad_0_gt3[pp];
            double x103 = -x96;
            double x104 = 0.5*grad_1_gt2[pp];
            double x105 = -x102;
            double x106 = 0.25*x74;
            double x107 = 0.5*x4 - 0.5*x5;
            double x108 = grad_1_gt3[pp]*x107 + x11*x49 - x2*x52;
            double x109 = -x51;
            double x110 = 0.5*grad_1_gt4[pp] + x55;
            double x111 = -0.5*grad_2_gt2[pp] + x82;
            double x112 = 0.5*x0 - 0.5*x1;
            double x113 = grad_2_gt5[pp]*x112;
            double x114 = x6*x65;
            double x115 = -x11*x69 + x113 + x114;
            double x116 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x117 = 0.25*x11*x8 + 0.25*x3 - 0.25*x7;
            double x118 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x119 = -x11*x8 - x3 + x7;
            double x120 = -x47 - x50 + x53;
            double x121 = x11*(grad_0_gt0[pp]*x107 + x116*x22 - x118*x25);
            double x122 = 2.0*x42;
            double x123 = x22*x39 - x37 + x91;
            double x124 = -grad_1_gt0[pp]*x2 - x27*x31 + x29;
            double x125 = -grad_0_gt0[pp]*x112 - x116*x27 + x118*x22;
            double x126 = -grad_2_gt0[pp]*x11 + x39*x6 - x76;
            double x127 = -grad_1_gt0[pp]*x11 - x2*x31 + x73;
            double x128 = x11*x69 - x113 - x114;
            double x129 = -0.5*grad_0_gt0[pp]*x11 - x116*x2 + x118*x6;
            double x130 = 3.0*x12;
            double x131 = -x130;
            double x132 = grad_0_chi[pp]*x130;
            _3970[pp] = 3*alpha[pp]*((-1/pow(chi[pp], 2))*grad_1_chi[pp]*grad_2_chi[pp] + 2.0*grad2_0_0_gt4[pp]*x11*x18 - grad2_0_1_gt4[pp]*x23*x6 + 1.0*grad2_0_2_gt4[pp]*x18*x28 + 2.0*grad2_1_1_gt4[pp]*x18*x25 - grad2_1_2_gt4[pp]*x22*x23 + 2.0*grad2_2_2_gt4[pp]*x18*x27 - grad_0_gt4[pp]*x122*(x108*x25 + x11*x129 - 1.0*x119*x22 + x126*x2 - 1.0*x127*x6 + x128*x27) + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_gt4[pp]*x122*(x120*x25 + x121 + x2*x81 - 1.0*x22*x46 + x27*x95 - 1.0*x6*x79) + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] - grad_2_gt4[pp]*x122*(x11*x125 + x123*x2 - 1.0*x124*x6 - 1.0*x22*x63 + x25*x60 + x27*x72) + x101*(x100 + x109*x99) + x101*(x100 + x58*x85) + x101*(0.5*grad_1_gt3[pp]*x95 + x110*x46 + x54*x65) + x101*(x108*x67 + x117*(x30 + x38) - x36*x75) - x101*(x108*x69 + x115*x48 + x117*x31) - 1.0*x11*x42*(grad_0_gt3[pp]*x81 + x31*x79 + x39*x79) - 2.0*x12*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x119*x18 + 0.5*grad_1_chi[pp]*x18*x46 + 0.5*grad_2_chi[pp]*x18*x63) - x13*x19*(2.0*grad_0_chi[pp]*x18*(-x108*x25 - x11*x129 + x119*x22 - 1.0*x126*x2 + x127*x6 - x128*x27) + 2.0*grad_1_chi[pp]*x18*(-x120*x25 - x121 - 1.0*x2*x81 + x22*x46 - x27*x95 + x6*x79) + 2.0*grad_2_chi[pp]*x18*(-x11*x125 - 1.0*x123*x2 + x124*x6 + x22*x63 - x25*x60 - x27*x72) + x11*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x12) + x25*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x131) + x27*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x130) - (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x132)*(2*x4 - 2*x5) + (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x132)*(-2*x1 + x16) - (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x131)*(2*x20 - 2*x21)) + 2.0*x22*x42*(-grad_1_gt5[pp]*x54 + grad_2_gt3[pp]*x46) + x28*x42*(0.25*grad_2_gt5[pp]*x32 + x83 + x98*x99) + x42*x62*(-x63*x64 + x65*x72) + x43*(0.5*grad_0_gt5[pp]*x32 + x36*x41) + x43*(0.25*grad_2_gt0[pp]*x74 + x74*(x89 - x90) + x77*(x87 - x88)) - x61*(1.0*grad_1_gt5[pp]*x60 + x55*x58) - x61*(0.25*grad_1_gt3[pp]*x46 + x109*x54 - x52*x54) - x61*(x105*x75 + 0.5*x108*x8 + x108*((-0.5)*grad_2_gt1[pp] + x104 + x96)) + x78*(grad_0_gt5[pp]*x74 + grad_2_gt0[pp]*x75 + x39*x77) - 1.0*x78*(grad_1_gt5[pp]*x79 + grad_2_gt3[pp]*x81 + x39*x46) - x86*(-0.25*grad_2_gt5[pp]*x32 + x41*x85 - x83) - x86*(x111*x74 - x115*x118 + x75*(-x89 + x90)) - x86*(0.25*x31*x46 + x48*x95 - x79*x85) + x93*(0.25*grad_2_gt3[pp]*(-x37 + x40 + x91) + x92) + x93*(x58*(-x33 + x34 - x35) + x92) + x93*(grad_1_gt3[pp]*(0.25*grad_2_gt0[pp]*x6 + x22*x82 - 0.25*x80) + x110*x79 + x54*(x103 + x104 - x97)) + x93*(0.5*grad_2_gt0[pp]*x108 + x105*x77 - x106*x31) + x93*(0.25*grad_2_gt3[pp]*x79 + x102*x46 + x54*(x103 - x104 + x97)) + x93*(-x106*x8 + x108*x116 + x75*(-x87 + x88)) - x94*(0.25*grad_1_gt5[pp]*x46 + 0.5*grad_2_gt3[pp]*x95 + x85*(-x44 + x45 - x6*x8)) - x94*(x111*x75 - x115*x98 - x75*x82)) - 12*grad2_1_2_alpha[pp] - grad_0_alpha[pp]*x19*(6.0*x11*x8 - 6.0*x13*(-grad_0_chi[pp]*x11 + grad_1_chi[pp]*x6 - grad_2_chi[pp]*x2) + 6.0*x3 - 6.0*x7);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = pow(gt1[pp], 2);
            double x2 = pow(gt2[pp], 2);
            double x3 = gt0[pp]*gt5[pp];
            double x4 = gt2[pp]*gt4[pp];
            double x5 = 2*x4;
            double x6 = gt0[pp]*x0 - gt1[pp]*x5 + gt3[pp]*x2 - gt3[pp]*x3 + gt5[pp]*x1;
            double x7 = 1.0/x6;
            double x8 = 1.0/chi[pp];
            double x9 = gt0[pp]*gt4[pp];
            double x10 = gt1[pp]*gt2[pp];
            double x11 = -x10 + x9;
            double x12 = gt1[pp]*gt5[pp];
            double x13 = x12 - x4;
            double x14 = -x2 + x3;
            double x15 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x16 = x14*x15;
            double x17 = grad_0_gt5[pp]*x11 + grad_2_gt0[pp]*x13 - x16;
            double x18 = 4.0*x7;
            double x19 = gt3[pp]*gt5[pp];
            double x20 = -x0 + x19;
            double x21 = gt0[pp]*gt3[pp];
            double x22 = -x1 + x21;
            double x23 = gt1[pp]*gt4[pp];
            double x24 = gt2[pp]*gt3[pp];
            double x25 = 4*x23 - 4*x24;
            double x26 = grad_0_gt3[pp]*x11;
            double x27 = x23 - x24;
            double x28 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x29 = grad_1_gt0[pp]*x27 + x22*x28 - x26;
            double x30 = grad_1_gt5[pp]*x22;
            double x31 = grad_2_gt3[pp]*x11;
            double x32 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x33 = x27*x32 + x30 - x31;
            double x34 = 0.25*x32;
            double x35 = pow(x6, -2);
            double x36 = x35*(-4*x2 + 4*x3);
            double x37 = grad_0_gt5[pp]*x27;
            double x38 = x13*x15;
            double x39 = grad_2_gt0[pp]*x20 + x37 - x38;
            double x40 = 0.5*grad_2_gt0[pp];
            double x41 = 1.0*grad_0_gt2[pp] - x40;
            double x42 = 0.5*grad_1_gt0[pp];
            double x43 = 1.0*grad_0_gt1[pp] - x42;
            double x44 = 0.5*grad_0_gt0[pp]*x20 - x13*x43 + x27*x41;
            double x45 = grad_0_gt5[pp]*x22;
            double x46 = grad_2_gt0[pp]*x27 - x11*x15 + x45;
            double x47 = 0.25*grad_2_gt0[pp];
            double x48 = 0.5*x23 - 0.5*x24;
            double x49 = grad_0_gt0[pp]*x48;
            double x50 = x22*x41;
            double x51 = -x11*x43 + x49 + x50;
            double x52 = x35*(-4*x0 + 4*x19);
            double x53 = -4*x1 + 4*x21;
            double x54 = -grad_2_gt0[pp]*x27 + x11*x15 - x45;
            double x55 = 0.5*grad_2_gt5[pp];
            double x56 = 0.5*grad_0_gt5[pp];
            double x57 = 1.0*grad_2_gt2[pp];
            double x58 = x56 - x57;
            double x59 = x22*x55;
            double x60 = x27*x58;
            double x61 = 0.5*grad_1_gt5[pp];
            double x62 = 1.0*grad_2_gt4[pp];
            double x63 = x61 - x62;
            double x64 = x11*x63;
            double x65 = -x59 + x60 - x64;
            double x66 = -grad_0_gt3[pp]*x14 + grad_1_gt0[pp]*x13 + x11*x28;
            double x67 = grad_1_gt5[pp]*x11;
            double x68 = grad_2_gt3[pp]*x14;
            double x69 = x13*x32 + x67 - x68;
            double x70 = x11*x35;
            double x71 = grad_0_gt3[pp]*x13;
            double x72 = grad_1_gt0[pp]*x20 + x27*x28 - x71;
            double x73 = grad_1_gt5[pp]*x27;
            double x74 = grad_2_gt3[pp]*x13;
            double x75 = x20*x32 + x73 - x74;
            double x76 = 0.25*grad_1_gt5[pp];
            double x77 = 0.25*grad_0_gt5[pp];
            double x78 = -0.5*grad_2_gt2[pp] + x77;
            double x79 = x35*(-4*x10 + 4*x9);
            double x80 = x29*x77 + x51*x61;
            double x81 = x35*(4*x12 - 4*x4);
            double x82 = 0.5*grad_1_gt2[pp];
            double x83 = 0.5*grad_2_gt1[pp];
            double x84 = (-0.5)*grad_0_gt4[pp] + x82 + x83;
            double x85 = x59 - x60 + x64;
            double x86 = 0.25*x66;
            double x87 = 0.5*x12 - 0.5*x4;
            double x88 = grad_0_gt0[pp]*x87 + x11*x41 - x14*x43;
            double x89 = 0.5*grad_2_gt3[pp];
            double x90 = x46*x77;
            double x91 = x51*x55;
            double x92 = grad_2_gt0[pp]*x20;
            double x93 = -x37 + x38 - x92;
            double x94 = grad_2_gt5[pp]*x48;
            double x95 = x13*x63;
            double x96 = -x20*x58 + x94 + x95;
            double x97 = x35*x53;
            double x98 = 0.25*x39;
            double x99 = 0.5*grad_0_gt4[pp];
            double x100 = (-0.5)*grad_2_gt1[pp] + x82 + x99;
            double x101 = (-0.5)*grad_2_gt4[pp] + x76;
            double x102 = -0.5*x10 + 0.5*x9;
            double x103 = grad_2_gt5[pp]*x102 + x13*(-x56 + x57) + x14*x63;
            double x104 = x25*x35;
            double x105 = 0.5*grad_0_gt2[pp] - x47;
            double x106 = 1.0*grad_1_gt4[pp] - x89;
            double x107 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x108 = -x104;
            double x109 = 0.25*grad_2_gt0[pp]*x13 + x11*x77 - 0.25*x16;
            double x110 = 0.5*grad_0_gt0[pp];
            double x111 = x13*x15 - x37 - x92;
            double x112 = -0.5*grad_1_gt3[pp]*x14 + x106*x11 - x107*x13;
            double x113 = x20*x88;
            double x114 = 2.0*x35;
            double x115 = -x27*x32 - x30 + x31;
            double x116 = -grad_1_gt0[pp]*x27 - x22*x28 + x26;
            double x117 = grad_1_gt3[pp]*x102 - x106*x22 + x107*x27;
            double x118 = x11*x43 - x49 - x50;
            double x119 = -x20*x32 - x73 + x74;
            double x120 = -grad_1_gt0[pp]*x20 - x27*x28 + x71;
            double x121 = x20*x58 - x94 - x95;
            double x122 = grad_1_gt3[pp]*x87 - x106*x27 + x107*x20;
            double x123 = -x110*x20 + x13*x43 - x27*x41;
            double x124 = 3.0*x8;
            double x125 = -x124;
            double x126 = grad_0_chi[pp]*x124;
            _3552[pp] = 3*alpha[pp]*(2.0*grad2_0_0_gt2[pp]*x20*x7 - grad2_0_1_gt2[pp]*x13*x18 + 1.0*grad2_0_2_gt2[pp]*x25*x7 + 2.0*grad2_1_1_gt2[pp]*x14*x7 - grad2_1_2_gt2[pp]*x11*x18 + 2.0*grad2_2_2_gt2[pp]*x22*x7 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] - grad_0_gt2[pp]*x114*(-1.0*x11*x119 + x111*x27 - 1.0*x120*x13 + x121*x22 + x122*x14 + x123*x20) - grad_1_gt2[pp]*x114*(x103*x22 - 1.0*x11*x69 + x112*x14 + x113 - 1.0*x13*x66 + x17*x27) + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*(-grad_0_chi[pp]/pow(chi[pp], 2)) - grad_2_gt2[pp]*x114*(-1.0*x11*x115 - 1.0*x116*x13 + x117*x14 + x118*x20 + x22*x65 + x27*x54) - 1.0*gt2[pp]*x7*x8*(2.0*grad_0_chi[pp]*x7*(x11*x119 - 1.0*x111*x27 + x120*x13 - x121*x22 - x122*x14 - x123*x20) + 2.0*grad_1_chi[pp]*x7*(-x103*x22 + x11*x69 - x112*x14 - x113 + x13*x66 - 1.0*x17*x27) + 2.0*grad_2_chi[pp]*x7*(x11*x115 + x116*x13 - x117*x14 - x118*x20 - x22*x65 - 1.0*x27*x54) + x14*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x125) + x20*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x8) + x22*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x124) - (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x126)*(2*x12 - x5) + (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x126)*(2*x23 - 2*x24) - (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x125)*(-2*x10 + 2*x9)) - x104*(x105*x93 - x110*x96 + x44*x58) - x104*(x46*x78 - x90 - x91) + x108*(0.5*grad_1_gt0[pp]*x103 + x109*x28 + x88*(-x61 + x62)) + x108*(x109*x15 + x109*x32 + x61*x88) + x14*x35*(grad_1_gt0[pp]*x75 + x28*x72 + x32*x72) + x25*x35*(x40*x85 + x90 + x91) + 2.0*x27*x35*(grad_0_gt5[pp]*x44 + grad_2_gt0[pp]*x39) + x35*x53*(-x54*x55 + x58*x65) + x36*(0.5*grad_1_gt5[pp]*x29 + x33*x34) - x36*(0.25*grad_2_gt3[pp]*x66 + x66*(0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp]) + (0.25*grad_0_gt3[pp] - 0.5*grad_1_gt1[pp])*(-x13*x32 - x67 + x68)) + x52*(1.0*grad_0_gt5[pp]*x51 + x46*x47) + x52*(0.25*grad_0_gt0[pp]*x39 + 0.5*grad_2_gt0[pp]*x44 + x41*x44) - x52*(0.25*grad_1_gt0[pp]*x17 + x100*x88 + x88*((-0.5)*grad_1_gt2[pp] + x83 + x99)) - 1.0*x70*(grad_0_gt5[pp]*x72 + grad_2_gt0[pp]*x75 + x32*x39) + x70*(grad_1_gt5[pp]*x66 + grad_2_gt3[pp]*x17 + x32*x69) - x79*(0.25*grad_1_gt5[pp]*x46 + 0.25*grad_2_gt5[pp]*x29 + x84*x85) + x79*(-0.25*grad_2_gt5[pp]*x29 + x33*x78 - x46*x76) - x79*(x101*x66 + x103*x107 - 0.5*x106*x17) + x79*(-x28*x98 - x42*x96 + x72*x78) - 2.0*x8*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x111*x7 + 0.5*grad_1_chi[pp]*x17*x7 + 0.5*grad_2_chi[pp]*x54*x7) - x81*(x33*x47 + x80) - x81*(x34*x46 + x80) - x81*(0.25*grad_0_gt0[pp]*x75 + x105*x72 + x44*x84) + x81*(0.25*grad_1_gt0[pp]*x69 + x28*x86 + x88*x89) - x81*(grad_1_gt0[pp]*x98 + 0.25*grad_2_gt0[pp]*x72 + x100*x44) + x81*(x106*x88 - 0.5*x107*x17 + x15*x86) - x97*(0.25*grad_0_gt5[pp]*x93 + x39*x78 - x40*x96) - x97*(0.25*grad_1_gt5[pp]*x17 - x101*x17 + x103*x84)) - 12*grad2_0_2_alpha[pp] + 6.0*grad_1_alpha[pp]*x7*(1.0*gt2[pp]*x8*(grad_0_chi[pp]*x13 - grad_1_chi[pp]*x14 + grad_2_chi[pp]*x11) + x17);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt5[pp];
            double x1 = pow(gt2[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = gt1[pp]*gt2[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x3 - gt3[pp]*x0 + gt3[pp]*x1 - gt4[pp]*x6 + gt5[pp]*x4;
            double x8 = 1.0/x7;
            double x9 = 1.0*x8;
            double x10 = gt0[pp]*gt4[pp];
            double x11 = gt0[pp]*gt3[pp] - x4;
            double x12 = 0.33333333333333331;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = gt2[pp]*gt4[pp];
            double x15 = x13 - x14;
            double x16 = gt3[pp]*gt5[pp];
            double x17 = x16 - x3;
            double x18 = x17*x8;
            double x19 = 0.33333333333333331*x18;
            double x20 = gt1[pp]*gt4[pp];
            double x21 = gt2[pp]*gt3[pp];
            double x22 = x20 - x21;
            double x23 = x22*x8;
            double x24 = 0.33333333333333331*x23;
            double x25 = pow(x15, 2);
            double x26 = pow(x22, 2);
            double x27 = At1[pp]*x17;
            double x28 = 2*x15;
            double x29 = x15*x22;
            double x30 = 2*At4[pp];
            double x31 = At0[pp]*pow(x17, 2) + 2*At2[pp]*x17*x22 + At3[pp]*x25 + At5[pp]*x26 - x27*x28 - x29*x30;
            double x32 = pow(x7, -2);
            double x33 = 2*x32;
            double x34 = pow(x7, -3);
            double x35 = 0.5*x20 - 0.5*x21;
            double x36 = 0.5*grad_0_gt5[pp];
            double x37 = 1.0*grad_2_gt2[pp];
            double x38 = x36 - x37;
            double x39 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x40 = -grad_2_gt5[pp]*x35 - x15*x39 + x17*x38;
            double x41 = x10 - x5;
            double x42 = pow(x41, 2);
            double x43 = x22*x41;
            double x44 = At4[pp]*x11;
            double x45 = 0.5*x13 - 0.5*x14;
            double x46 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x47 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x48 = grad_1_gt3[pp]*x45 + x17*x46 - x22*x47;
            double x49 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x50 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x51 = -0.5*grad_0_gt0[pp]*x17 + x15*x49 - x22*x50;
            double x52 = 1.0/chi[pp];
            double x53 = 0.33333333333333331*alpha[pp]*x8;
            double x54 = At0[pp]*x17*x22 - At1[pp]*x29 + At2[pp]*x11*x17 + At2[pp]*x26 + At3[pp]*x15*x41 - At4[pp]*x43 + At5[pp]*x11*x22 - x15*x44 - x27*x41;
            double x55 = At3[pp]*x2;
            double x56 = -At0[pp]*x15*x17 + At1[pp]*x25 - At2[pp]*x17*x41 - At2[pp]*x29 + At4[pp]*x15*x41 + At4[pp]*x2*x22 - At5[pp]*x43 - x15*x55 + x2*x27;
            double x57 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x58 = -grad_0_gt5[pp]*x22 - grad_2_gt0[pp]*x17 + x15*x57;
            double x59 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x60 = -grad_1_gt5[pp]*x22 + grad_2_gt3[pp]*x15 - x17*x59;
            double x61 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x62 = grad_0_gt3[pp]*x15 - grad_1_gt0[pp]*x17 - x22*x61;
            double x63 = 0.5*x10 - 0.5*x5;
            double x64 = -x11*x40 + x15*x62 - x17*x51 - x2*x48 - 1.0*x22*x58 + x41*x60;
            DENDRO_972[pp] = agrad_0_Gt0[pp]*beta0[pp] + agrad_1_Gt0[pp]*beta1[pp] + agrad_2_Gt0[pp]*beta2[pp] + 2*alpha[pp]*x31*x34*x51 + 2*alpha[pp]*x34*x40*(At0[pp]*x26 - 2*At1[pp]*x43 + 2*At2[pp]*x11*x22 + At3[pp]*x42 + At5[pp]*pow(x11, 2) - 2*x41*x44) + 2*alpha[pp]*x34*x48*(At0[pp]*x25 - At1[pp]*x2*x28 + 2*At2[pp]*x15*x41 + At3[pp]*pow(x2, 2) + At5[pp]*x42 - x2*x30*x41) + 2.0*alpha[pp]*x34*x54*x58 + 2.0*alpha[pp]*x34*x56*x62 + 2.0*alpha[pp]*x34*x60*(-At0[pp]*x29 + At1[pp]*x15*x41 + At1[pp]*x2*x22 - At2[pp]*x11*x15 - At2[pp]*x43 + At4[pp]*x11*x2 + At4[pp]*x42 - At5[pp]*x11*x41 - x41*x55) - 1.3333333333333333*grad2_0_0_beta0[pp]*x18 + 7.0*grad2_0_1_beta0[pp]*x12*x15*x8 - grad2_0_1_beta1[pp]*x19 - 2.333333333333333*grad2_0_2_beta0[pp]*x23 - grad2_0_2_beta2[pp]*x19 - grad2_1_1_beta0[pp]*x2*x9 + 1.0*grad2_1_1_beta1[pp]*x12*x15*x8 + 1.0*grad2_1_2_beta0[pp]*x8*(2*x10 - x6) - grad2_1_2_beta1[pp]*x24 + 1.0*grad2_1_2_beta2[pp]*x12*x15*x8 - grad2_2_2_beta0[pp]*x11*x9 - grad2_2_2_beta2[pp]*x24 - grad_0_alpha[pp]*x31*x33 - grad_0_beta0[pp]*x32*x64 - grad_1_alpha[pp]*x33*x56 - grad_1_beta0[pp]*x32*(-x11*(grad_2_gt5[pp]*x63 + x15*(-x36 + x37) + x2*x39) + x15*(-grad_0_gt3[pp]*x2 + grad_1_gt0[pp]*x15 + x41*x61) - x17*(grad_0_gt0[pp]*x45 - x2*x49 + x41*x50) - x2*(-0.5*grad_1_gt3[pp]*x2 - x15*x46 + x41*x47) - 1.0*x22*(grad_0_gt5[pp]*x41 + grad_2_gt0[pp]*x15 - x2*x57) + x41*(grad_1_gt5[pp]*x41 - grad_2_gt3[pp]*x2 + x15*x59)) - grad_2_alpha[pp]*x33*x54 - grad_2_beta0[pp]*x32*(-x11*(-0.5*grad_2_gt5[pp]*x11 + x22*x38 - x39*x41) + x15*(grad_0_gt3[pp]*x41 - grad_1_gt0[pp]*x22 - x11*x61) - x17*(-grad_0_gt0[pp]*x35 - x11*x50 + x41*x49) - x2*(grad_1_gt3[pp]*x63 - x11*x47 + x22*x46) - 1.0*x22*(-grad_0_gt5[pp]*x11 - grad_2_gt0[pp]*x22 + x41*x57) + x41*(-grad_1_gt5[pp]*x11 + grad_2_gt3[pp]*x41 - x22*x59)) + x32*x64*(2.0*grad_0_beta0[pp]*x12 + 2.0*grad_1_beta1[pp]*x12 + 2.0*grad_2_beta2[pp]*x12) - x53*(grad_0_K[pp]*(-4*x16 + 4*x3) + 9.0*grad_0_chi[pp]*x31*x52*x8) - x53*(grad_1_K[pp]*(4*x13 - 4*x14) + 9.0*grad_1_chi[pp]*x52*x56*x8) - x53*(grad_2_K[pp]*(-4*x20 + 4*x21) + 9.0*grad_2_chi[pp]*x52*x54*x8);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt3[pp]*gt5[pp];
            double x1 = pow(gt4[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt2[pp]*gt4[pp];
            double x6 = 2*x5;
            double x7 = -gt0[pp]*x0 + gt0[pp]*x1 - gt1[pp]*x6 + gt3[pp]*x4 + gt5[pp]*x3;
            double x8 = 1.0/x7;
            double x9 = 1.0*x8;
            double x10 = gt1[pp]*gt5[pp];
            double x11 = gt0[pp]*gt5[pp] - x4;
            double x12 = 0.33333333333333331;
            double x13 = gt0[pp]*gt4[pp];
            double x14 = gt1[pp]*gt2[pp];
            double x15 = x13 - x14;
            double x16 = gt1[pp]*gt4[pp];
            double x17 = gt2[pp]*gt3[pp];
            double x18 = x16 - x17;
            double x19 = x18*x8;
            double x20 = 0.33333333333333331*x19;
            double x21 = gt0[pp]*gt3[pp];
            double x22 = x21 - x3;
            double x23 = x22*x8;
            double x24 = 0.33333333333333331*x23;
            double x25 = pow(x15, 2);
            double x26 = pow(x18, 2);
            double x27 = 2*x15;
            double x28 = At0[pp]*x26 - At1[pp]*x18*x27 + 2*At2[pp]*x18*x22 + At3[pp]*x25 - At4[pp]*x22*x27 + At5[pp]*pow(x22, 2);
            double x29 = pow(x7, -2);
            double x30 = 2*x29;
            double x31 = pow(x7, -3);
            double x32 = 0.5*grad_0_gt5[pp];
            double x33 = 1.0*grad_2_gt2[pp];
            double x34 = x32 - x33;
            double x35 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x36 = -0.5*grad_2_gt5[pp]*x22 - x15*x35 + x18*x34;
            double x37 = 0.5*x13 - 0.5*x14;
            double x38 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x39 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x40 = grad_1_gt3[pp]*x37 + x18*x38 - x22*x39;
            double x41 = x10 - x5;
            double x42 = pow(x41, 2);
            double x43 = 2*At4[pp];
            double x44 = 2*x41;
            double x45 = 0.5*x16 - 0.5*x17;
            double x46 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x47 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x48 = -grad_0_gt0[pp]*x45 + x15*x46 - x22*x47;
            double x49 = At1[pp]*x2;
            double x50 = x18*x41;
            double x51 = 1.0/chi[pp];
            double x52 = 0.33333333333333331*alpha[pp]*x8;
            double x53 = x22*x41;
            double x54 = At0[pp]*x18*x2 - At1[pp]*x50 + At2[pp]*x2*x22 + At2[pp]*x26 + At3[pp]*x15*x41 - At4[pp]*x15*x18 - At4[pp]*x53 + At5[pp]*x18*x22 - x15*x49;
            double x55 = At3[pp]*x11;
            double x56 = -At0[pp]*x50 + At1[pp]*x11*x18 + At1[pp]*x15*x41 - At2[pp]*x15*x18 - At2[pp]*x53 + At4[pp]*x11*x22 + At4[pp]*x25 - At5[pp]*x15*x22 - x15*x55;
            double x57 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x58 = -grad_0_gt5[pp]*x22 - grad_2_gt0[pp]*x18 + x15*x57;
            double x59 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x60 = -grad_1_gt5[pp]*x22 + grad_2_gt3[pp]*x15 - x18*x59;
            double x61 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x62 = grad_0_gt3[pp]*x15 - grad_1_gt0[pp]*x18 - x22*x61;
            double x63 = 0.5*x10 - 0.5*x5;
            double x64 = -x11*x40 + x15*x60 - 1.0*x18*x58 - x2*x48 - x22*x36 + x41*x62;
            DENDRO_991[pp] = agrad_0_Gt2[pp]*beta0[pp] + agrad_1_Gt2[pp]*beta1[pp] + agrad_2_Gt2[pp]*beta2[pp] + 2*alpha[pp]*x28*x31*x36 + 2*alpha[pp]*x31*x40*(At0[pp]*x42 - At1[pp]*x11*x44 + 2*At2[pp]*x15*x41 + At3[pp]*pow(x11, 2) + At5[pp]*x25 - x11*x15*x43) + 2*alpha[pp]*x31*x48*(At0[pp]*pow(x2, 2) + 2*At2[pp]*x18*x2 + At3[pp]*x42 + At5[pp]*x26 - x43*x50 - x44*x49) + 2.0*alpha[pp]*x31*x54*x58 + 2.0*alpha[pp]*x31*x56*x60 + 2.0*alpha[pp]*x31*x62*(-At0[pp]*x2*x41 + At1[pp]*x42 - At2[pp]*x15*x2 - At2[pp]*x50 + At4[pp]*x11*x18 + At4[pp]*x15*x41 - At5[pp]*x15*x18 + x11*x49 - x41*x55) - grad2_0_0_beta0[pp]*x20 - grad2_0_0_beta2[pp]*x2*x9 + 1.0*grad2_0_1_beta0[pp]*x12*x15*x8 - grad2_0_1_beta1[pp]*x20 + 1.0*grad2_0_1_beta2[pp]*x8*(2*x10 - x6) - grad2_0_2_beta0[pp]*x24 - 2.333333333333333*grad2_0_2_beta2[pp]*x19 + 1.0*grad2_1_1_beta1[pp]*x12*x15*x8 - grad2_1_1_beta2[pp]*x11*x9 - grad2_1_2_beta1[pp]*x24 + 7.0*grad2_1_2_beta2[pp]*x12*x15*x8 - 1.3333333333333333*grad2_2_2_beta2[pp]*x23 - grad_0_alpha[pp]*x30*x54 - grad_0_beta2[pp]*x29*(-x11*(grad_1_gt3[pp]*x63 - x18*x39 + x2*x38) + x15*(-grad_1_gt5[pp]*x18 + grad_2_gt3[pp]*x41 - x2*x59) - 1.0*x18*(-grad_0_gt5[pp]*x18 - grad_2_gt0[pp]*x2 + x41*x57) - x2*(-0.5*grad_0_gt0[pp]*x2 - x18*x47 + x41*x46) - x22*(-grad_2_gt5[pp]*x45 + x2*x34 - x35*x41) + x41*(grad_0_gt3[pp]*x41 - grad_1_gt0[pp]*x2 - x18*x61)) - grad_1_alpha[pp]*x30*x56 - grad_1_beta2[pp]*x29*(-x11*(-0.5*grad_1_gt3[pp]*x11 + x15*x39 - x38*x41) + x15*(grad_1_gt5[pp]*x15 - grad_2_gt3[pp]*x11 + x41*x59) - 1.0*x18*(grad_0_gt5[pp]*x15 + grad_2_gt0[pp]*x41 - x11*x57) - x2*(grad_0_gt0[pp]*x63 - x11*x46 + x15*x47) - x22*(grad_2_gt5[pp]*x37 + x11*x35 + x41*(-x32 + x33)) + x41*(-grad_0_gt3[pp]*x11 + grad_1_gt0[pp]*x41 + x15*x61)) - grad_2_alpha[pp]*x28*x30 - grad_2_beta2[pp]*x29*x64 + x29*x64*(2.0*grad_0_beta0[pp]*x12 + 2.0*grad_1_beta1[pp]*x12 + 2.0*grad_2_beta2[pp]*x12) - x52*(grad_0_K[pp]*(-4*x16 + 4*x17) + 9.0*grad_0_chi[pp]*x51*x54*x8) - x52*(grad_1_K[pp]*(4*x13 - 4*x14) + 9.0*grad_1_chi[pp]*x51*x56*x8) - x52*(grad_2_K[pp]*(-4*x21 + 4*x3) + 9.0*grad_2_chi[pp]*x28*x51*x8);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt3[pp];
            double x1 = pow(gt1[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt5[pp]*x0;
            double x6 = gt2[pp]*gt4[pp];
            double x7 = 2*x6;
            double x8 = gt0[pp]*x3 - gt1[pp]*x7 + gt3[pp]*x4 + gt5[pp]*x1 - x5;
            double x9 = 1.0/x8;
            double x10 = 1.0/chi[pp];
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x14 - x6;
            double x16 = gt0[pp]*gt5[pp];
            double x17 = x16 - x4;
            double x18 = 0.5*x12;
            double x19 = 0.5*x11 - x18;
            double x20 = 0.5*grad_0_gt5[pp];
            double x21 = 1.0*grad_2_gt2[pp];
            double x22 = -x20 + x21;
            double x23 = 0.5*grad_1_gt5[pp];
            double x24 = 1.0*grad_2_gt4[pp];
            double x25 = x23 - x24;
            double x26 = grad_2_gt5[pp]*x19 + x15*x22 + x17*x25;
            double x27 = gt1[pp]*gt4[pp];
            double x28 = gt2[pp]*gt3[pp];
            double x29 = x27 - x28;
            double x30 = gt3[pp]*gt5[pp];
            double x31 = -x3 + x30;
            double x32 = 0.5*x27 - 0.5*x28;
            double x33 = grad_2_gt5[pp]*x32;
            double x34 = x20 - x21;
            double x35 = -x15*x25 + x31*x34 - x33;
            double x36 = 0.5*grad_2_gt5[pp]*x2;
            double x37 = x13*x25;
            double x38 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x1 + x5);
            double x39 = -x11 + x12;
            double x40 = pow(grad_2_chi[pp], 2);
            double x41 = 4*x27 - 4*x28;
            double x42 = 4.0*x9;
            double x43 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x44 = -grad_0_gt5[pp]*x2 - grad_2_gt0[pp]*x29 + x13*x43;
            double x45 = pow(x8, -2);
            double x46 = 3.0*x45;
            double x47 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x48 = -grad_1_gt5[pp]*x2 + grad_2_gt3[pp]*x13 - x29*x47;
            double x49 = grad_1_gt5[pp]*x13;
            double x50 = grad_2_gt3[pp]*x17;
            double x51 = x15*x47 + x49 - x50;
            double x52 = 1.0*grad_1_gt4[pp];
            double x53 = x45*(4*x16 - 4*x4);
            double x54 = x29*x34 - x36 - x37;
            double x55 = x2*x54;
            double x56 = grad_0_gt5[pp]*x29;
            double x57 = grad_2_gt0[pp]*x31;
            double x58 = x15*x43 - x56 - x57;
            double x59 = 1.0*grad_0_gt2[pp];
            double x60 = 0.25*grad_2_gt0[pp];
            double x61 = x45*(-4*x3 + 4*x30);
            double x62 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x15 - x17*x43;
            double x63 = -0.25*grad_2_gt1[pp];
            double x64 = -grad_1_gt5[pp]*x29 + grad_2_gt3[pp]*x15 - x31*x47;
            double x65 = x45*(4*x0 - 4*x1);
            double x66 = 0.25*grad_0_gt5[pp];
            double x67 = 4*x14 - 4*x6;
            double x68 = x45*x67;
            double x69 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x70 = 0.5*x69;
            double x71 = grad_1_gt5[pp]*x54;
            double x72 = grad_0_gt5[pp]*x54;
            double x73 = 2.0*x29*x45;
            double x74 = 4*x11 - 4*x12;
            double x75 = x41*x45;
            double x76 = -0.5*grad_2_gt3[pp] + x52;
            double x77 = -0.5*grad_2_gt0[pp] + x59;
            double x78 = 0.25*grad_1_gt5[pp] + (-0.5)*grad_2_gt4[pp];
            double x79 = -0.5*grad_2_gt2[pp] + x66;
            double x80 = -x14 + x6;
            double x81 = -x23 + x24;
            double x82 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x83 = 0.5*x14 - 0.5*x6;
            double x84 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x85 = x13*x51 + x15*(-grad_0_gt3[pp]*x17 + grad_1_gt0[pp]*x15 + x13*x69) - x17*(-0.5*grad_1_gt3[pp]*x17 + x13*x76 - x15*x82) - x2*x26 - 1.0*x29*x62 - x31*(grad_0_gt0[pp]*x83 + x13*x77 - x17*x84);
            double x86 = x13*x48 + x15*(grad_0_gt3[pp]*x13 - grad_1_gt0[pp]*x29 - x2*x69) - x17*(grad_1_gt3[pp]*x19 - x2*x76 + x29*x82) - 1.0*x29*x44 - x31*(-grad_0_gt0[pp]*x32 + x13*x84 - x2*x77) - x55;
            double x87 = x13*x64 + x15*(grad_0_gt3[pp]*x15 - grad_1_gt0[pp]*x31 - x29*x69) - x17*(grad_1_gt3[pp]*x83 - x29*x76 + x31*x82) - x2*x35 - 1.0*x29*x58 - x31*(-0.5*grad_0_gt0[pp]*x31 + x15*x84 - x29*x77);
            double x88 = 3.0*x10;
            double x89 = grad_0_chi[pp]*x88;
            double x90 = -x88;
            double x91 = 2.0*x9;
            _2203[pp] = x2*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x31*x9 - grad2_0_1_gt5[pp]*x15*x42 + 1.0*grad2_0_2_gt5[pp]*x41*x9 + 2.0*grad2_1_1_gt5[pp]*x17*x9 - grad2_1_2_gt5[pp]*x13*x42 + 2.0*grad2_2_2_gt5[pp]*x2*x9 - grad_0_gt5[pp]*x31*x44*x46 + 2.0*grad_0_gt5[pp]*x45*x87 - grad_1_gt5[pp]*x17*x46*x48 + 2.0*grad_1_gt5[pp]*x45*x85 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - 6.0*grad_2_gt5[pp]*x45*x55 + 2.0*grad_2_gt5[pp]*x45*x86 + 1.0*gt5[pp]*x10*x9*(-grad_0_chi[pp]*x87*x91 - grad_1_chi[pp]*x85*x91 - grad_2_chi[pp]*x86*x91 - x17*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x90) - x2*(2*grad2_2_2_chi[pp] - x40*x88) - x31*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x10) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x89)*(2*x14 - x7) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x89)*(2*x27 - 2*x28) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x90)*(2*x11 - 2*x12)) - 2.0*x10*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x38*(x22*x31 + x33 + x80*x81) + 1.0*grad_1_chi[pp]*x38*(grad_2_gt5[pp]*((-0.5)*gt0[pp]*gt4[pp] + x18) + x17*x81 + x22*x80) + 1.0*grad_2_chi[pp]*x38*(x22*x29 + x36 + x39*x81)) + 2.0*x13*x45*(grad_0_gt5[pp]*x64 + x35*x47) + 2.0*x13*x45*(grad_1_gt5[pp]*x51 + grad_2_gt3[pp]*x26) + 2.0*x13*x45*(grad_2_gt5[pp]*x48 + x71) - x26*x65*(x23 + x24) - x35*x65*(x20 + x21) + x45*x67*(0.25*x43*x51 + x62*x76) + x45*x67*(0.25*x47*x58 + x64*x77) + x45*x74*(0.25*grad_2_gt5[pp]*x48 + 1.0*x71) + x45*x74*(2*x26*x76 + x78*(-x15*x47 - x49 + x50)) + x45*x74*(x35*x69 - x64*x79) - x51*x53*(-0.25*grad_2_gt3[pp] + x52) - x53*x64*(0.25*grad_0_gt4[pp] + 0.75*grad_1_gt2[pp] + x63) - x58*x61*(x59 - x60) - x61*x62*(0.75*grad_0_gt4[pp] + 0.25*grad_1_gt2[pp] + x63) + x68*(0.25*grad_1_gt5[pp]*x44 + x20*x48) + x68*(0.5*grad_1_gt5[pp]*x44 + x48*x66) + x68*(0.25*grad_2_gt3[pp]*x62 + x51*x70) + x68*(x58*x70 + x60*x64) - x73*(grad_0_gt5[pp]*x58 + grad_2_gt0[pp]*x35) - x73*(grad_1_gt5[pp]*x62 + x26*x43) - x73*(grad_2_gt5[pp]*x44 + x72) - x75*(0.25*grad_2_gt5[pp]*x44 + 1.0*x72) - x75*(x26*x69 - x62*x78) - x75*(x35*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp]) + x79*(-x15*x43 + x56 + x57)) - x40/pow(chi[pp], 2)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x9*(0.5*gt5[pp]*x10*(-grad_0_chi[pp]*x31 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x29) + x35) + 4.0*grad_1_alpha[pp]*x9*(0.5*gt5[pp]*x10*(grad_0_chi[pp]*x15 - grad_1_chi[pp]*x17 + grad_2_chi[pp]*x13) + x26) + 4*grad_2_alpha[pp]*(1.0*x10*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x38*(grad_0_chi[pp]*x29 + grad_1_chi[pp]*x39 + grad_2_chi[pp]*x2)) + 1.0*x29*x34*x9 - x36*x9 - 1.0*x37*x9));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt3[pp]*gt5[pp];
            double x1 = pow(gt4[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*x0;
            double x6 = gt1[pp]*gt4[pp];
            double x7 = 2*x6;
            double x8 = gt0[pp]*x1 - gt2[pp]*x7 + gt3[pp]*x4 + gt5[pp]*x3 - x5;
            double x9 = 1.0/x8;
            double x10 = 1.0/chi[pp];
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = gt2[pp]*gt4[pp];
            double x16 = x14 - x15;
            double x17 = gt0[pp]*gt5[pp];
            double x18 = x17 - x4;
            double x19 = 0.5*x15;
            double x20 = 0.5*x14 - x19;
            double x21 = 1.0*grad_0_gt2[pp];
            double x22 = 0.5*grad_2_gt0[pp];
            double x23 = x21 - x22;
            double x24 = 1.0*grad_0_gt1[pp];
            double x25 = 0.5*grad_1_gt0[pp];
            double x26 = x24 - x25;
            double x27 = x18*x26;
            double x28 = grad_0_gt0[pp]*x20 + x13*x23 - x27;
            double x29 = gt2[pp]*gt3[pp];
            double x30 = -x29 + x6;
            double x31 = gt0[pp]*gt3[pp];
            double x32 = -x3 + x31;
            double x33 = -0.5*x29 + 0.5*x6;
            double x34 = grad_0_gt0[pp]*x33;
            double x35 = x23*x32;
            double x36 = x13*x26 - x34 - x35;
            double x37 = 0.5*grad_0_gt0[pp]*x2;
            double x38 = x23*x30;
            double x39 = 1.0/(-gt0[pp]*x1 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x5);
            double x40 = -x14 + x15;
            double x41 = pow(grad_0_chi[pp], 2);
            double x42 = -4*x29 + 4*x6;
            double x43 = 4.0*x9;
            double x44 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x45 = grad_0_gt3[pp]*x16 - grad_1_gt0[pp]*x2 - x30*x44;
            double x46 = pow(x8, -2);
            double x47 = 3.0*x46;
            double x48 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x49 = -grad_0_gt5[pp]*x30 - grad_2_gt0[pp]*x2 + x16*x48;
            double x50 = -grad_0_gt3[pp]*x18 + grad_1_gt0[pp]*x16 + x13*x44;
            double x51 = 1.0*grad_1_gt1[pp];
            double x52 = x46*(4*x17 - 4*x4);
            double x53 = -grad_0_gt5[pp]*x32 - grad_2_gt0[pp]*x30 + x13*x48;
            double x54 = 0.25*grad_0_gt5[pp];
            double x55 = 1.0*grad_2_gt2[pp];
            double x56 = x46*(-4*x3 + 4*x31);
            double x57 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x16 - x18*x48;
            double x58 = -0.25*grad_0_gt4[pp];
            double x59 = grad_0_gt3[pp]*x13 - grad_1_gt0[pp]*x30 - x32*x44;
            double x60 = x16*x26 - x37 - x38;
            double x61 = x2*x60;
            double x62 = x46*(4*x0 - 4*x1);
            double x63 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x64 = x46*(4*x11 - 4*x12);
            double x65 = 0.25*grad_1_gt0[pp];
            double x66 = 0.25*grad_2_gt0[pp];
            double x67 = 2.0*x46;
            double x68 = x16*x67;
            double x69 = 0.5*grad_0_gt3[pp] - x51;
            double x70 = 0.5*grad_0_gt5[pp];
            double x71 = -x55 + x70;
            double x72 = x30*x67;
            double x73 = 4*x14 - 4*x15;
            double x74 = x42*x46;
            double x75 = 0.5*grad_0_gt1[pp] - x65;
            double x76 = 0.5*grad_0_gt2[pp] - x66;
            double x77 = -x11 + x12;
            double x78 = 0.5*x11 - 0.5*x12;
            double x79 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x80 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x81 = x13*(grad_1_gt5[pp]*x13 - grad_2_gt3[pp]*x18 + x16*x63) + x16*x50 - x18*(-0.5*grad_1_gt3[pp]*x18 + x13*x80 - x16*x69) - x2*x28 - 1.0*x30*x57 - x32*(grad_2_gt5[pp]*x78 + x16*(x55 - x70) + x18*x79);
            double x82 = x13*(-grad_1_gt5[pp]*x32 + grad_2_gt3[pp]*x13 - x30*x63) + x16*x59 - x18*(grad_1_gt3[pp]*x78 + x30*x69 - x32*x80) - x2*x36 - 1.0*x30*x53 - x32*(-0.5*grad_2_gt5[pp]*x32 - x13*x79 + x30*x71);
            double x83 = x13*(-grad_1_gt5[pp]*x30 + grad_2_gt3[pp]*x16 - x2*x63) + x16*x45 - x18*(grad_1_gt3[pp]*x20 + x2*x69 - x30*x80) - 1.0*x30*x49 - x32*(-grad_2_gt5[pp]*x33 - x16*x79 + x2*x71) - x61;
            double x84 = 3.0*x10;
            double x85 = grad_0_chi[pp]*x84;
            double x86 = -x84;
            double x87 = 2.0*x9;
            _2093[pp] = x2*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x2*x9 - grad2_0_1_gt0[pp]*x16*x43 + 1.0*grad2_0_2_gt0[pp]*x42*x9 + 2.0*grad2_1_1_gt0[pp]*x18*x9 - grad2_1_2_gt0[pp]*x13*x43 + 2.0*grad2_2_2_gt0[pp]*x32*x9 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - 6.0*grad_0_gt0[pp]*x46*x61 + 2.0*grad_0_gt0[pp]*x46*x83 - grad_1_gt0[pp]*x18*x45*x47 + 2.0*grad_1_gt0[pp]*x46*x81 - grad_2_gt0[pp]*x32*x47*x49 + 2.0*grad_2_gt0[pp]*x46*x82 + 1.0*gt0[pp]*x10*x9*(-grad_0_chi[pp]*x83*x87 - grad_1_chi[pp]*x81*x87 - grad_2_chi[pp]*x82*x87 - x18*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x86) - x2*(2*grad2_0_0_chi[pp] - 3.0*x10*x41) - x32*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x84) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x85)*(2*x14 - 2*x15) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x85)*(-2*x29 + x7) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x86)*(2*x11 - 2*x12)) - 2.0*x10*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x39*(0.5*grad_0_gt0[pp]*x2 + x23*x30 + x26*x40) + 1.0*grad_1_chi[pp]*x39*(grad_0_gt0[pp]*((-0.5)*gt1[pp]*gt5[pp] + x19) + x23*x77 + x27) + 1.0*grad_2_chi[pp]*x39*(x26*x77 + x34 + x35)) - x28*x62*(x24 + x25) - x36*x62*(x21 + x22) + x46*x73*(0.25*grad_0_gt0[pp]*x45 + 1.0*grad_1_gt0[pp]*x60) + x46*x73*(-2*x28*x69 + x50*x75) + x46*x73*(x36*x63 + x59*x76) - x50*x52*(-0.25*grad_0_gt3[pp] + x51) - x52*x59*(0.75*grad_1_gt2[pp] + 0.25*grad_2_gt1[pp] + x58) - x53*x56*(-x54 + x55) - x56*x57*(0.25*grad_1_gt2[pp] + 0.75*grad_2_gt1[pp] + x58) + x64*(0.25*grad_0_gt3[pp]*x57 + 0.5*x50*x63) + x64*(0.5*grad_1_gt0[pp]*x49 + x45*x66) + x64*(0.5*grad_2_gt0[pp]*x45 + x49*x65) + x64*(0.25*x44*x53 - 1.0*x59*x71) + x64*(0.25*x48*x50 - 1.0*x57*x69) + x64*(0.5*x53*x63 + x54*x59) + x68*(grad_0_gt0[pp]*x45 + grad_1_gt0[pp]*x60) + x68*(grad_0_gt3[pp]*x28 + grad_1_gt0[pp]*x50) + x68*(grad_2_gt0[pp]*x59 + x36*x44) - x72*(grad_0_gt0[pp]*x49 + grad_2_gt0[pp]*x60) - x72*(grad_0_gt5[pp]*x36 + grad_2_gt0[pp]*x53) - x72*(grad_1_gt0[pp]*x57 + x28*x48) - x74*(0.25*grad_0_gt0[pp]*x49 + 1.0*grad_2_gt0[pp]*x60) - x74*(x28*x63 + x57*x75) - x74*(x36*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp]) + x53*x76) - x41/pow(chi[pp], 2)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x39*(grad_0_chi[pp]*x2 + grad_1_chi[pp]*x40 + grad_2_chi[pp]*x30)) + 1.0*x16*x26*x9 - x37*x9 - 1.0*x38*x9) + 4.0*grad_1_alpha[pp]*x9*(0.5*gt0[pp]*x10*(grad_0_chi[pp]*x16 - grad_1_chi[pp]*x18 + grad_2_chi[pp]*x13) + x28) + 4.0*grad_2_alpha[pp]*x9*(0.5*gt0[pp]*x10*(-grad_0_chi[pp]*x30 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x32) + x36));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt5[pp];
            double x1 = pow(gt2[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = gt3[pp]*x0;
            double x6 = gt1[pp]*gt4[pp];
            double x7 = 2*x6;
            double x8 = gt0[pp]*x3 - gt2[pp]*x7 + gt3[pp]*x1 + gt5[pp]*x4 - x5;
            double x9 = 1.0/x8;
            double x10 = 1.0/chi[pp];
            double x11 = gt1[pp]*gt5[pp];
            double x12 = gt2[pp]*gt4[pp];
            double x13 = x11 - x12;
            double x14 = gt2[pp]*gt3[pp];
            double x15 = -x14 + x6;
            double x16 = gt3[pp]*gt5[pp];
            double x17 = x16 - x3;
            double x18 = 0.5*x12;
            double x19 = 0.5*x11 - x18;
            double x20 = 0.5*grad_0_gt3[pp];
            double x21 = 1.0*grad_1_gt1[pp];
            double x22 = x20 - x21;
            double x23 = 1.0*grad_1_gt4[pp];
            double x24 = 0.5*grad_2_gt3[pp];
            double x25 = x23 - x24;
            double x26 = x15*x25;
            double x27 = grad_1_gt3[pp]*x19 + x17*x22 - x26;
            double x28 = gt0[pp]*gt4[pp];
            double x29 = gt1[pp]*gt2[pp];
            double x30 = x28 - x29;
            double x31 = gt0[pp]*gt3[pp];
            double x32 = x31 - x4;
            double x33 = 0.5*x29;
            double x34 = 0.5*x28 - x33;
            double x35 = grad_1_gt3[pp]*x34 + x15*x22 - x25*x32;
            double x36 = 0.5*grad_1_gt3[pp]*x2;
            double x37 = -x36;
            double x38 = x13*x22;
            double x39 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x1 - gt5[pp]*x4 + x5);
            double x40 = -x11 + x12;
            double x41 = -x28 + x29;
            double x42 = pow(grad_1_chi[pp], 2);
            double x43 = -4*x14 + 4*x6;
            double x44 = 4.0*x9;
            double x45 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x46 = -grad_0_gt3[pp]*x2 + grad_1_gt0[pp]*x13 + x30*x45;
            double x47 = pow(x8, -2);
            double x48 = 3.0*x47;
            double x49 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x50 = grad_1_gt5[pp]*x30 - grad_2_gt3[pp]*x2 + x13*x49;
            double x51 = grad_0_gt3[pp]*x13;
            double x52 = grad_1_gt0[pp]*x17;
            double x53 = x15*x45;
            double x54 = x51 - x52 - x53;
            double x55 = 1.0*grad_0_gt1[pp];
            double x56 = 0.25*grad_1_gt0[pp];
            double x57 = x47*(4*x16 - 4*x3);
            double x58 = -grad_1_gt5[pp]*x32 + grad_2_gt3[pp]*x30 - x15*x49;
            double x59 = 1.0*grad_2_gt4[pp];
            double x60 = x47*(4*x31 - 4*x4);
            double x61 = x25*x30 + x37 - x38;
            double x62 = x2*x61;
            double x63 = grad_0_gt3[pp]*x30 - grad_1_gt0[pp]*x15 - x32*x45;
            double x64 = -0.25*grad_1_gt2[pp];
            double x65 = -grad_1_gt5[pp]*x15 + grad_2_gt3[pp]*x13 - x17*x49;
            double x66 = x47*(4*x0 - 4*x1);
            double x67 = 0.25*grad_0_gt3[pp];
            double x68 = x43*x47;
            double x69 = grad_2_gt3[pp]*x61;
            double x70 = grad_0_gt3[pp]*x61;
            double x71 = 2.0*x13*x47;
            double x72 = 4*x11 - 4*x12;
            double x73 = 4*x28 - 4*x29;
            double x74 = 0.5*grad_0_gt4[pp] + (-0.5)*grad_1_gt2[pp] + 0.5*grad_2_gt1[pp];
            double x75 = 0.5*grad_1_gt5[pp] - x59;
            double x76 = -0.5*grad_1_gt0[pp] + x55;
            double x77 = 0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp];
            double x78 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x79 = -0.5*grad_1_gt1[pp] + x67;
            double x80 = -x20 + x21;
            double x81 = 0.5*grad_0_gt5[pp];
            double x82 = 1.0*grad_2_gt2[pp];
            double x83 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x84 = x13*x46 - 1.0*x15*(grad_0_gt5[pp]*x30 + grad_2_gt0[pp]*x13 - x2*x78) - x17*(grad_0_gt0[pp]*x19 - x2*x76 + x30*x83) + x30*x50 - x32*(grad_2_gt5[pp]*x34 + x13*(-x81 + x82) + x2*x75) - x62;
            double x85 = x81 - x82;
            double x86 = -0.5*x14 + 0.5*x6;
            double x87 = x13*x63 - 1.0*x15*(-grad_0_gt5[pp]*x32 - grad_2_gt0[pp]*x15 + x30*x78) - x17*(-grad_0_gt0[pp]*x86 + x30*x76 - x32*x83) - x2*x35 + x30*x58 - x32*(-0.5*grad_2_gt5[pp]*x32 + x15*x85 - x30*x75);
            double x88 = x13*x54 - 1.0*x15*(-grad_0_gt5[pp]*x15 - grad_2_gt0[pp]*x17 + x13*x78) - x17*(-0.5*grad_0_gt0[pp]*x17 + x13*x76 - x15*x83) - x2*x27 + x30*x65 - x32*(-grad_2_gt5[pp]*x86 - x13*x75 + x17*x85);
            double x89 = 3.0*x10;
            double x90 = grad_0_chi[pp]*x89;
            double x91 = -x89;
            double x92 = 2.0*x9;
            _1755[pp] = x2*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x17*x9 - grad2_0_1_gt3[pp]*x13*x44 + 1.0*grad2_0_2_gt3[pp]*x43*x9 + 2.0*grad2_1_1_gt3[pp]*x2*x9 - grad2_1_2_gt3[pp]*x30*x44 + 2.0*grad2_2_2_gt3[pp]*x32*x9 - grad_0_gt3[pp]*x17*x46*x48 + 2.0*grad_0_gt3[pp]*x47*x88 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - 6.0*grad_1_gt3[pp]*x47*x62 + 2.0*grad_1_gt3[pp]*x47*x84 - grad_2_gt3[pp]*x32*x48*x50 + 2.0*grad_2_gt3[pp]*x47*x87 + 1.0*gt3[pp]*x10*x9*(-grad_0_chi[pp]*x88*x92 - grad_1_chi[pp]*x84*x92 - grad_2_chi[pp]*x87*x92 - x17*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x10) - x2*(2*grad2_1_1_chi[pp] + x42*x91) - x32*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x89) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x90)*(2*x11 - 2*x12) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x90)*(-2*x14 + x7) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x91)*(2*x28 - 2*x29)) - 2.0*x10*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x39*(grad_1_gt3[pp]*((-0.5)*gt1[pp]*gt5[pp] + x18) + x17*x80 + x26) + 1.0*grad_1_chi[pp]*x39*(x25*x41 + x36 + x40*x80) + 1.0*grad_2_chi[pp]*x39*(grad_1_gt3[pp]*((-0.5)*gt0[pp]*gt4[pp] + x33) + x15*x80 + x25*x32)) + 2.0*x13*x47*(grad_0_gt3[pp]*x54 + grad_1_gt0[pp]*x27) - x27*x66*(x20 + x21) + 2.0*x30*x47*(grad_0_gt3[pp]*x65 + x27*x49) + 2.0*x30*x47*(grad_1_gt3[pp]*x50 + x69) + 2.0*x30*x47*(grad_1_gt5[pp]*x35 + grad_2_gt3[pp]*x58) - x35*x66*(x23 + x24) + x47*x72*(0.25*grad_1_gt3[pp]*x46 + 1.0*x70) + x47*x72*(2*x27*x76 + x79*(-x51 + x52 + x53)) + x47*x72*(x35*x78 + x63*x77) + x47*x73*(0.25*grad_1_gt3[pp]*x50 + 1.0*x69) + x47*x73*(x27*x78 - x65*x79) + x47*x73*(-2*x35*x75 + x58*x77) - x54*x57*(x55 - x56) - x57*x63*(0.75*grad_0_gt4[pp] + 0.25*grad_2_gt1[pp] + x64) - x58*x60*(-0.25*grad_1_gt5[pp] + x59) - x60*x65*(0.25*grad_0_gt4[pp] + 0.75*grad_2_gt1[pp] + x64) - x68*(0.25*grad_1_gt5[pp]*x63 + x58*x74) - x68*(0.25*grad_2_gt3[pp]*x46 + x20*x50) - x68*(0.5*grad_2_gt3[pp]*x46 + x50*x67) - x68*(0.25*x45*x58 - 1.0*x63*x75) - x68*(0.25*x49*x54 + x65*x76) - x68*(x54*x74 + x56*x65) + x71*(grad_1_gt3[pp]*x46 + x70) + x71*(grad_2_gt3[pp]*x63 + x35*x45) - x42/pow(chi[pp], 2)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x9*(0.5*gt3[pp]*x10*(-grad_0_chi[pp]*x17 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x15) + x27) + 4*grad_1_alpha[pp]*(1.0*x10*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x39*(grad_0_chi[pp]*x40 + grad_1_chi[pp]*x2 + grad_2_chi[pp]*x41)) + 1.0*x25*x30*x9 + 1.0*x37*x9 - 1.0*x38*x9) + 4.0*grad_2_alpha[pp]*x9*(0.5*gt3[pp]*x10*(-grad_0_chi[pp]*x15 + grad_1_chi[pp]*x30 - grad_2_chi[pp]*x32) + x35));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt4[pp];
            double x1 = gt1[pp]*gt2[pp];
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = pow(gt2[pp], 2);
            double x6 = gt0[pp]*gt3[pp];
            double x7 = gt5[pp]*x6;
            double x8 = gt1[pp]*gt4[pp];
            double x9 = 2*x8;
            double x10 = gt0[pp]*x3 - gt2[pp]*x9 + gt3[pp]*x5 + gt5[pp]*x4 - x7;
            double x11 = 1.0/x10;
            double x12 = 4.0*x11;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = gt2[pp]*gt4[pp];
            double x15 = x13 - x14;
            double x16 = gt3[pp]*gt5[pp];
            double x17 = x16 - x3;
            double x18 = gt0[pp]*gt5[pp];
            double x19 = x18 - x5;
            double x20 = -x4 + x6;
            double x21 = gt2[pp]*gt3[pp];
            double x22 = -4*x21 + 4*x8;
            double x23 = -x21 + x8;
            double x24 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x25 = grad_0_gt3[pp]*x2 - grad_1_gt0[pp]*x23 - x20*x24;
            double x26 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = -grad_1_gt5[pp]*x20 + grad_2_gt3[pp]*x2 - x23*x26;
            double x28 = 0.25*x26;
            double x29 = pow(x10, -2);
            double x30 = x29*(4*x18 - 4*x5);
            double x31 = grad_0_gt5[pp]*x23;
            double x32 = grad_2_gt0[pp]*x17;
            double x33 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x34 = x15*x33 - x31 - x32;
            double x35 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x36 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x37 = -0.5*grad_0_gt0[pp]*x17 + x15*x35 - x23*x36;
            double x38 = x29*(-4*x4 + 4*x6);
            double x39 = -x38;
            double x40 = grad_2_gt0[pp]*x23;
            double x41 = grad_0_gt5[pp]*x20;
            double x42 = x2*x33 - x40 - x41;
            double x43 = 0.5*grad_0_gt5[pp];
            double x44 = 1.0*grad_2_gt2[pp];
            double x45 = x43 - x44;
            double x46 = 0.5*grad_1_gt5[pp];
            double x47 = 1.0*grad_2_gt4[pp];
            double x48 = x46 - x47;
            double x49 = -0.5*grad_2_gt5[pp]*x20 - x2*x48 + x23*x45;
            double x50 = -0.5*x21 + 0.5*x8;
            double x51 = -grad_0_gt0[pp]*x50 + x2*x35 - x20*x36;
            double x52 = x29*(4*x16 - 4*x3);
            double x53 = -grad_0_gt3[pp]*x19 + grad_1_gt0[pp]*x15 + x2*x24;
            double x54 = x19*x33;
            double x55 = grad_0_gt5[pp]*x2 + grad_2_gt0[pp]*x15 - x54;
            double x56 = grad_1_gt5[pp]*x2;
            double x57 = grad_2_gt3[pp]*x19;
            double x58 = x15*x26 + x56 - x57;
            double x59 = x2*x29;
            double x60 = grad_0_gt3[pp]*x15;
            double x61 = grad_1_gt0[pp]*x17;
            double x62 = x23*x24;
            double x63 = x60 - x61 - x62;
            double x64 = -grad_1_gt5[pp]*x23 + grad_2_gt3[pp]*x15 - x17*x26;
            double x65 = 0.25*grad_0_gt5[pp];
            double x66 = -0.5*grad_2_gt2[pp] + x65;
            double x67 = 0.25*grad_1_gt5[pp]*x42 + 0.25*grad_2_gt5[pp]*x25;
            double x68 = x29*(4*x0 - 4*x1);
            double x69 = 0.25*x53;
            double x70 = 0.5*x13 - 0.5*x14;
            double x71 = grad_0_gt0[pp]*x70 - x19*x35 + x2*x36;
            double x72 = 0.5*grad_2_gt3[pp];
            double x73 = x29*(4*x13 - 4*x14);
            double x74 = 0.5*grad_1_gt2[pp];
            double x75 = 0.5*grad_2_gt1[pp];
            double x76 = (-0.5)*grad_0_gt4[pp] + x74 + x75;
            double x77 = 0.25*grad_2_gt0[pp];
            double x78 = 0.5*grad_1_gt5[pp]*x51 + x25*x65;
            double x79 = -grad_2_gt5[pp]*x50 - x15*x48 + x17*x45;
            double x80 = 0.25*grad_1_gt5[pp] + (-0.5)*grad_2_gt4[pp];
            double x81 = 0.5*x0 - 0.5*x1;
            double x82 = -x43 + x44;
            double x83 = grad_2_gt5[pp]*x81 + x15*x82 + x19*x48;
            double x84 = 0.5*grad_2_gt5[pp]*x51 + x42*x65;
            double x85 = x22*x29;
            double x86 = 0.25*x34;
            double x87 = 0.5*grad_0_gt4[pp];
            double x88 = (-0.5)*grad_2_gt1[pp] + x74 + x87;
            double x89 = -x85;
            double x90 = 0.25*grad_2_gt0[pp]*x15 + x2*x65 - 0.25*x54;
            double x91 = 1.0*grad_1_gt4[pp] - x72;
            double x92 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x93 = 0.5*grad_0_gt2[pp] - x77;
            double x94 = 1.0/chi[pp];
            double x95 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x5 - gt5[pp]*x4 + x7);
            double x96 = -x13 + x14;
            double x97 = -x0 + x1;
            double x98 = x15*x53 - x17*x71 - x19*(-0.5*grad_1_gt3[pp]*x19 - x15*x92 + x2*x91) + x2*x58 - x20*x83 - 1.0*x23*x55;
            double x99 = x15*x25 - x17*x51 - x19*(grad_1_gt3[pp]*x81 - x20*x91 + x23*x92) + x2*x27 - x20*x49 - 1.0*x23*x42;
            double x100 = x15*x63 - x17*x37 - x19*(grad_1_gt3[pp]*x70 + x17*x92 - x23*x91) + x2*x64 - x20*x79 - 1.0*x23*x34;
            double x101 = 3.0*x94;
            double x102 = grad_0_chi[pp]*x101;
            double x103 = -x101;
            double x104 = 2.0*x11;
            _1971[pp] = alpha[pp]*(2.0*grad2_0_0_gt2[pp]*x11*x17 - grad2_0_1_gt2[pp]*x12*x15 + 1.0*grad2_0_2_gt2[pp]*x11*x22 + 2.0*grad2_1_1_gt2[pp]*x11*x19 - grad2_1_2_gt2[pp]*x12*x2 + 2.0*grad2_2_2_gt2[pp]*x11*x20 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x100*x29 + 2.0*grad_1_gt2[pp]*x29*x98 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*(-grad_0_chi[pp]/pow(chi[pp], 2)) + 2.0*grad_2_gt2[pp]*x29*x99 + 1.0*gt2[pp]*x11*x94*(-grad_0_chi[pp]*x100*x104 - grad_1_chi[pp]*x104*x98 - grad_2_chi[pp]*x104*x99 - x17*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x94) - x19*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x103) - x20*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x101) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x102)*(2*x13 - 2*x14) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x102)*(-2*x21 + x9) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x103)*(2*x0 - 2*x1)) - 1.0*x19*x29*(grad_1_gt0[pp]*x64 + x24*x63 + x26*x63) - 2.0*x23*x29*(grad_0_gt5[pp]*x37 + grad_2_gt0[pp]*x34) - x30*(0.5*grad_1_gt5[pp]*x25 + x27*x28) - x30*(0.25*grad_2_gt3[pp]*x53 + x53*(0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp]) + (0.25*grad_0_gt3[pp] - 0.5*grad_1_gt1[pp])*(-x15*x26 - x56 + x57)) - x38*(0.5*grad_2_gt0[pp]*x79 + x34*x65 + x66*(-x15*x33 + x31 + x32)) + x39*(0.5*grad_2_gt5[pp]*x42 - x45*x49) + x39*(0.25*grad_1_gt5[pp]*x55 - x55*x80 + x76*x83) - x52*(1.0*grad_0_gt5[pp]*x51 + 0.25*grad_2_gt0[pp]*x42) - x52*(0.25*grad_0_gt0[pp]*x34 + 0.5*grad_2_gt0[pp]*x37 + x36*x37) - x52*(0.25*grad_1_gt0[pp]*x55 + x71*x88 + x71*((-0.5)*grad_1_gt2[pp] + x75 + x87)) + x59*(grad_0_gt5[pp]*x63 + grad_2_gt0[pp]*x64 + x26*x34) + x59*(grad_1_gt5[pp]*x53 + grad_2_gt3[pp]*x55 + x26*x58) + x68*(-x27*x66 + x67) + x68*(x49*x76 + x67) + x68*(0.5*grad_1_gt0[pp]*x79 + x24*x86 + x66*(-x60 + x61 + x62)) + x68*(-x53*x80 + 0.5*x55*x91 - x83*x92) + x73*(x27*x77 + x78) + x73*(x28*x42 + x78) + x73*(0.25*grad_0_gt0[pp]*x64 + x37*x76 + x63*x93) + x73*(0.25*grad_1_gt0[pp]*x58 + x24*x69 + x71*x72) + x73*(grad_1_gt0[pp]*x86 + x37*x88 + x63*x77) + x73*(x33*x69 - 0.5*x55*x92 + x71*x91) - x85*(0.5*grad_2_gt0[pp]*x49 + x84) - x85*(x66*(-x2*x33 + x40 + x41) + x84) - x85*(0.5*grad_0_gt0[pp]*x79 + x34*x93 + x37*x82) + x89*(0.5*grad_1_gt0[pp]*x83 + x24*x90 + x71*(-x46 + x47)) + x89*(x26*x90 + x33*x90 + x46*x71) - 2.0*x94*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x95*(grad_2_gt0[pp]*x17 + x31 + x33*x96) + 0.5*grad_1_chi[pp]*x95*(grad_0_gt5[pp]*x97 + grad_2_gt0[pp]*x96 + x19*x33) + 0.5*grad_2_chi[pp]*x95*(grad_2_gt0[pp]*x23 + x33*x97 + x41)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt4[pp];
            double x1 = gt1[pp]*gt2[pp];
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = pow(gt2[pp], 2);
            double x6 = gt3[pp]*gt5[pp];
            double x7 = gt0[pp]*x6;
            double x8 = gt2[pp]*gt4[pp];
            double x9 = 2*x8;
            double x10 = gt0[pp]*x3 - gt1[pp]*x9 + gt3[pp]*x5 + gt5[pp]*x4 - x7;
            double x11 = 1.0/x10;
            double x12 = 4.0*x11;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = x13 - x8;
            double x15 = -x3 + x6;
            double x16 = gt0[pp]*gt5[pp];
            double x17 = x16 - x5;
            double x18 = gt0[pp]*gt3[pp];
            double x19 = x18 - x4;
            double x20 = gt1[pp]*gt4[pp];
            double x21 = gt2[pp]*gt3[pp];
            double x22 = 4*x20 - 4*x21;
            double x23 = x20 - x21;
            double x24 = grad_2_gt0[pp]*x23;
            double x25 = grad_0_gt5[pp]*x19;
            double x26 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = x2*x26 - x24 - x25;
            double x28 = 0.5*grad_0_gt5[pp];
            double x29 = 1.0*grad_2_gt2[pp];
            double x30 = x28 - x29;
            double x31 = 0.5*grad_1_gt5[pp];
            double x32 = -1.0*grad_2_gt4[pp] + x31;
            double x33 = -0.5*grad_2_gt5[pp]*x19 - x2*x32 + x23*x30;
            double x34 = pow(x10, -2);
            double x35 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x36 = -grad_1_gt5[pp]*x23 + grad_2_gt3[pp]*x14 - x15*x35;
            double x37 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x38 = grad_0_gt3[pp]*x14 - grad_1_gt0[pp]*x15 - x23*x37;
            double x39 = 0.25*x37;
            double x40 = x34*(4*x16 - 4*x5);
            double x41 = x34*(4*x18 - 4*x4);
            double x42 = grad_0_gt5[pp]*x23;
            double x43 = -grad_2_gt0[pp]*x15 + x14*x26 - x42;
            double x44 = 0.25*grad_0_gt5[pp];
            double x45 = 0.5*x20 - 0.5*x21;
            double x46 = -grad_2_gt5[pp]*x45 - x14*x32 + x15*x30;
            double x47 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x48 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x49 = -0.5*grad_0_gt0[pp]*x15 + x14*x48 - x23*x47;
            double x50 = x34*(-4*x3 + 4*x6);
            double x51 = grad_0_gt5[pp]*x2;
            double x52 = x17*x26;
            double x53 = grad_2_gt0[pp]*x14 + x51 - x52;
            double x54 = grad_1_gt5[pp]*x2;
            double x55 = grad_2_gt3[pp]*x17;
            double x56 = x14*x35 + x54 - x55;
            double x57 = -grad_0_gt3[pp]*x17 + grad_1_gt0[pp]*x14 + x2*x37;
            double x58 = x14*x34;
            double x59 = grad_0_gt3[pp]*x2 - grad_1_gt0[pp]*x23 - x19*x37;
            double x60 = -grad_1_gt5[pp]*x19 + grad_2_gt3[pp]*x2 - x23*x35;
            double x61 = 0.25*x56;
            double x62 = 0.5*x0 - 0.5*x1;
            double x63 = grad_2_gt5[pp]*x62 + x14*(-x28 + x29) + x17*x32;
            double x64 = 0.5*grad_0_gt3[pp];
            double x65 = x34*(4*x0 - 4*x1);
            double x66 = 0.25*grad_0_gt3[pp];
            double x67 = 0.25*grad_2_gt0[pp];
            double x68 = 0.5*grad_0_gt2[pp] - x67;
            double x69 = 0.25*grad_1_gt0[pp];
            double x70 = 0.25*grad_0_gt0[pp]*x36 + x43*x69;
            double x71 = x34*(4*x13 - 4*x8);
            double x72 = 0.5*grad_1_gt0[pp]*x46 + x36*x67;
            double x73 = 0.5*grad_1_gt2[pp];
            double x74 = 0.5*grad_2_gt1[pp];
            double x75 = (-0.5)*grad_0_gt4[pp] + x73 + x74;
            double x76 = -grad_0_gt0[pp]*x45 - x19*x47 + x2*x48;
            double x77 = 0.5*grad_0_gt0[pp]*x46 + x43*x67;
            double x78 = x22*x34;
            double x79 = 0.25*grad_2_gt0[pp]*x14 + 0.25*x51 - 0.25*x52;
            double x80 = 0.5*grad_0_gt4[pp];
            double x81 = (-0.5)*grad_2_gt1[pp] + x73 + x80;
            double x82 = 0.5*grad_0_gt1[pp] - x69;
            double x83 = 0.5*x13 - 0.5*x8;
            double x84 = grad_0_gt0[pp]*x83 - x17*x48 + x2*x47;
            double x85 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x86 = -1.0*grad_1_gt1[pp] + x64;
            double x87 = -0.5*grad_2_gt2[pp] + x44;
            double x88 = 1.0/chi[pp];
            double x89 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x5 - gt5[pp]*x4 + x7);
            double x90 = -x13 + x8;
            double x91 = -x0 + x1;
            double x92 = x14*x57 - x15*x84 - x17*(-0.5*grad_1_gt3[pp]*x17 - x14*x86 + x2*x85) - x19*x63 + x2*x56 - 1.0*x23*x53;
            double x93 = x14*x59 - x15*x76 - x17*(grad_1_gt3[pp]*x62 - x19*x85 + x23*x86) - x19*x33 + x2*x60 - 1.0*x23*x27;
            double x94 = x14*x38 - x15*x49 - x17*(grad_1_gt3[pp]*x83 + x15*x86 - x23*x85) - x19*x46 + x2*x36 - 1.0*x23*x43;
            double x95 = 3.0*x88;
            double x96 = grad_0_chi[pp]*x95;
            double x97 = -x95;
            double x98 = 2.0*x11;
            _1872[pp] = alpha[pp]*(2.0*grad2_0_0_gt2[pp]*x11*x15 - grad2_0_1_gt2[pp]*x12*x14 + 1.0*grad2_0_2_gt2[pp]*x11*x22 + 2.0*grad2_1_1_gt2[pp]*x11*x17 - grad2_1_2_gt2[pp]*x12*x2 + 2.0*grad2_2_2_gt2[pp]*x11*x19 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x34*x94 + 2.0*grad_1_gt2[pp]*x34*x92 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*(-grad_0_chi[pp]/pow(chi[pp], 2)) + 2.0*grad_2_gt2[pp]*x34*x93 + 1.0*gt2[pp]*x11*x88*(-grad_0_chi[pp]*x94*x98 - grad_1_chi[pp]*x92*x98 - grad_2_chi[pp]*x93*x98 - x15*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x88) - x17*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x97) - x19*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x95) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x96)*(2*x13 - x9) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x96)*(2*x20 - 2*x21) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x97)*(2*x0 - 2*x1)) - 1.0*x17*x34*(grad_1_gt5[pp]*x59 + x35*x60 + x37*x60) - 2.0*x23*x34*(grad_0_gt5[pp]*x27 + grad_2_gt0[pp]*x33) - x40*(0.5*grad_1_gt0[pp]*x36 + x38*x39) - x40*(x56*x66 + x57*(0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp]) + (-0.5*grad_1_gt1[pp] + x66)*(-x14*x35 - x54 + x55)) - x41*(1.0*grad_2_gt0[pp]*x46 + x43*x44) - x41*(0.25*grad_1_gt5[pp]*x53 + x63*x75 + x63*((-0.5)*grad_1_gt2[pp] + x74 + x80)) - x41*(0.25*grad_2_gt5[pp]*x27 + x28*x33 - x30*x33) - x50*(0.5*grad_0_gt0[pp]*x43 + x47*x49) - x50*(0.25*grad_1_gt0[pp]*x53 + x53*x82 + x81*x84) - x50*(0.25*grad_2_gt0[pp]*x27 + x27*x68 + x28*x76) + x58*(grad_0_gt3[pp]*x53 + grad_1_gt0[pp]*x56 + x37*x57) + x58*(grad_0_gt5[pp]*x59 + grad_2_gt0[pp]*x60 + x27*x37) + x65*(x38*x44 + x72) + x65*(x39*x43 + x72) + x65*(0.25*grad_1_gt5[pp]*x27 + x33*x75 + x44*x60) + x65*(0.25*grad_1_gt5[pp]*x57 + x35*x61 + x63*x64) + x65*(0.25*grad_2_gt5[pp]*x59 + x33*x81 - x60*x87) + x65*(x26*x61 + 0.5*x53*x85 - x63*x86) + x71*(x38*x68 + x70) + x71*(x49*x81 + x70) + x71*(0.5*grad_1_gt5[pp]*x76 + 0.25*x27*x35 + x60*x68) + x71*(-0.5*x53*x86 + x56*x82 + x84*x85) - x78*(x28*x49 + x77) - x78*(x43*x68 + x77) - x78*(0.5*grad_1_gt0[pp]*x63 + x26*x79 + x37*x79) - x78*(0.5*grad_2_gt5[pp]*x76 + x33*x47 + x87*(-x2*x26 + x24 + x25)) - x78*(x31*x84 + x35*x79 + x48*x63) - 2.0*x88*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x89*(grad_2_gt0[pp]*x15 + x26*x90 + x42) + 0.5*grad_1_chi[pp]*x89*(grad_0_gt5[pp]*x91 + grad_2_gt0[pp]*x90 + x17*x26) + 0.5*grad_2_chi[pp]*x89*(grad_2_gt0[pp]*x23 + x25 + x26*x91)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt4[pp];
            double x1 = gt1[pp]*gt2[pp];
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = pow(gt2[pp], 2);
            double x6 = gt3[pp]*gt5[pp];
            double x7 = gt0[pp]*x6;
            double x8 = gt2[pp]*gt4[pp];
            double x9 = 2*x8;
            double x10 = gt0[pp]*x3 - gt1[pp]*x9 + gt3[pp]*x5 + gt5[pp]*x4 - x7;
            double x11 = 1.0/x10;
            double x12 = 4.0*x11;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = x13 - x8;
            double x15 = -x3 + x6;
            double x16 = gt0[pp]*gt5[pp];
            double x17 = x16 - x5;
            double x18 = gt0[pp]*gt3[pp];
            double x19 = x18 - x4;
            double x20 = gt1[pp]*gt4[pp];
            double x21 = gt2[pp]*gt3[pp];
            double x22 = 4*x20 - 4*x21;
            double x23 = pow(x10, -2);
            double x24 = grad_1_gt5[pp]*x2;
            double x25 = grad_2_gt3[pp]*x17;
            double x26 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = x14*x26 + x24 - x25;
            double x28 = 0.5*grad_2_gt3[pp];
            double x29 = 1.0*grad_1_gt4[pp] - x28;
            double x30 = 0.5*grad_0_gt3[pp];
            double x31 = -1.0*grad_1_gt1[pp] + x30;
            double x32 = -0.5*grad_1_gt3[pp]*x17 - x14*x31 + x2*x29;
            double x33 = x20 - x21;
            double x34 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x35 = grad_0_gt3[pp]*x2 - grad_1_gt0[pp]*x33 - x19*x34;
            double x36 = 0.5*grad_0_gt5[pp];
            double x37 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x38 = -grad_0_gt5[pp]*x19 - grad_2_gt0[pp]*x33 + x2*x37;
            double x39 = x23*(-4*x3 + 4*x6);
            double x40 = grad_2_gt3[pp]*x2;
            double x41 = grad_1_gt5[pp]*x19;
            double x42 = x26*x33;
            double x43 = x40 - x41 - x42;
            double x44 = 0.5*x0 - 0.5*x1;
            double x45 = grad_1_gt3[pp]*x44 - x19*x29 + x31*x33;
            double x46 = x23*(4*x16 - 4*x5);
            double x47 = 0.5*grad_2_gt5[pp];
            double x48 = 0.5*grad_1_gt5[pp];
            double x49 = 1.0*grad_2_gt4[pp];
            double x50 = x48 - x49;
            double x51 = 1.0*grad_2_gt2[pp];
            double x52 = x36 - x51;
            double x53 = -x19*x47 - x2*x50 + x33*x52;
            double x54 = x23*(4*x18 - 4*x4);
            double x55 = 1.0*x23;
            double x56 = x33*x55;
            double x57 = -grad_0_gt3[pp]*x17 + grad_1_gt0[pp]*x14 + x2*x34;
            double x58 = x17*x37;
            double x59 = grad_0_gt5[pp]*x2 + grad_2_gt0[pp]*x14 - x58;
            double x60 = grad_0_gt3[pp]*x14;
            double x61 = grad_1_gt0[pp]*x15;
            double x62 = x33*x34;
            double x63 = x60 - x61 - x62;
            double x64 = grad_2_gt3[pp]*x14;
            double x65 = grad_1_gt5[pp]*x33;
            double x66 = -x15*x26 + x64 - x65;
            double x67 = -grad_0_gt5[pp]*x33 - grad_2_gt0[pp]*x15 + x14*x37;
            double x68 = 0.25*grad_1_gt5[pp] + (-0.5)*grad_2_gt4[pp];
            double x69 = 0.25*grad_0_gt5[pp];
            double x70 = 0.25*grad_2_gt5[pp]*x35 + x43*x69;
            double x71 = x22*x23;
            double x72 = -x54;
            double x73 = grad_2_gt5[pp]*x44 + x14*(-x36 + x51) + x17*x50;
            double x74 = 0.25*grad_1_gt5[pp]*x35 + x36*x45;
            double x75 = x23*(4*x13 - 4*x8);
            double x76 = 0.25*grad_1_gt5[pp]*x43 + 0.5*grad_2_gt5[pp]*x45;
            double x77 = x23*(4*x0 - 4*x1);
            double x78 = 0.25*grad_0_gt3[pp];
            double x79 = 0.5*grad_0_gt4[pp];
            double x80 = 0.5*grad_1_gt2[pp] + (-0.5)*grad_2_gt1[pp] + x79;
            double x81 = 0.25*grad_2_gt0[pp];
            double x82 = 0.5*grad_0_gt1[pp] - 0.25*grad_1_gt0[pp];
            double x83 = 0.5*grad_0_gt2[pp] - x81;
            double x84 = (-0.5)*grad_1_gt2[pp] + 0.5*grad_2_gt1[pp] + x79;
            double x85 = 0.25*x63;
            double x86 = 0.5*x13 - 0.5*x8;
            double x87 = grad_1_gt3[pp]*x86 + x15*x31 - x29*x33;
            double x88 = 0.25*grad_0_gt4[pp] - 0.25*grad_1_gt2[pp] + 0.25*grad_2_gt1[pp];
            double x89 = 0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp];
            double x90 = -0.25*x15*x26 + 0.25*x64 - 0.25*x65;
            double x91 = -0.5*grad_2_gt2[pp] + x69;
            double x92 = 0.5*x20 - 0.5*x21;
            double x93 = -grad_2_gt5[pp]*x92 - x14*x50 + x15*x52;
            double x94 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x95 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x96 = 1.0/chi[pp];
            double x97 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x5 - gt5[pp]*x4 + x7);
            double x98 = -x13 + x8;
            double x99 = -x0 + x1;
            double x100 = x14*x57 - x15*(grad_0_gt0[pp]*x86 - x17*x94 + x2*x95) - x17*x32 - x19*x73 + x2*x27 - 1.0*x33*x59;
            double x101 = x14*x35 - x15*(-grad_0_gt0[pp]*x92 - x19*x95 + x2*x94) - x17*x45 - x19*x53 + x2*x43 - 1.0*x33*x38;
            double x102 = x14*x63 - x15*(-0.5*grad_0_gt0[pp]*x15 + x14*x94 - x33*x95) - x17*x87 - x19*x93 + x2*x66 - 1.0*x33*x67;
            double x103 = 3.0*x96;
            double x104 = grad_0_chi[pp]*x103;
            double x105 = -x103;
            double x106 = 2.0*x11;
            _1636[pp] = alpha[pp]*((-1/pow(chi[pp], 2))*grad_1_chi[pp]*grad_2_chi[pp] + 2.0*grad2_0_0_gt4[pp]*x11*x15 - grad2_0_1_gt4[pp]*x12*x14 + 1.0*grad2_0_2_gt4[pp]*x11*x22 + 2.0*grad2_1_1_gt4[pp]*x11*x17 - grad2_1_2_gt4[pp]*x12*x2 + 2.0*grad2_2_2_gt4[pp]*x11*x19 + 2.0*grad_0_gt4[pp]*x102*x23 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] + 2.0*grad_1_gt4[pp]*x100*x23 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x101*x23 + 1.0*gt4[pp]*x11*x96*(-grad_0_chi[pp]*x102*x106 - grad_1_chi[pp]*x100*x106 - grad_2_chi[pp]*x101*x106 - x15*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x96) - x17*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x105) - x19*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x103) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x104)*(2*x13 - x9) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x104)*(2*x20 - 2*x21) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x105)*(2*x0 - 2*x1)) - x15*x55*(grad_0_gt3[pp]*x59 + x34*x57 + x37*x57) + 2.0*x2*x23*(grad_1_gt5[pp]*x32 + grad_2_gt3[pp]*x27) - x39*(x35*x36 + 0.25*x37*x38) - x39*(x63*x81 + x63*x83 + x67*x82) - x46*(1.0*grad_1_gt5[pp]*x45 + 0.25*grad_2_gt3[pp]*x43) - x46*(0.25*grad_1_gt3[pp]*x27 + x28*x32 + x29*x32) - x46*(0.5*x26*x87 + x66*x78 + x80*x87) - x54*(x43*x47 - x50*x53) - x56*(grad_0_gt5[pp]*x63 + grad_2_gt0[pp]*x66 + x37*x67) - x56*(grad_1_gt5[pp]*x57 + grad_2_gt3[pp]*x59 + x27*x37) - x71*(-x38*x68 + x70) - x71*(x53*x84 + x70) - x71*(0.25*x27*x34 + x30*x73 - x57*x68) - x71*(x66*x83 + x91*(-x60 + x61 + x62) + x93*x94) + x72*(0.25*grad_1_gt5[pp]*x27 + 0.5*grad_2_gt3[pp]*x73 + x68*(-x14*x26 - x24 + x25)) + x72*(x66*x69 - x66*x91 + x84*x93) + x75*(0.25*grad_2_gt3[pp]*x38 + x74) + x75*(x43*x88 + x74) + x75*(grad_1_gt3[pp]*(0.25*grad_2_gt0[pp]*x14 + x2*x69 - 0.25*x58) + x32*x84 + x57*x89) + x75*(0.5*grad_2_gt0[pp]*x87 + x34*x85 + x67*x78) + x75*(0.25*grad_2_gt3[pp]*x57 + x27*x78 + x32*x80) + x75*(x26*x85 + x66*x82 + x87*x95) + x77*(x28*x53 + x76) + x77*(x68*(-x40 + x41 + x42) + x76) + x77*(0.5*grad_1_gt3[pp]*x73 + x27*x89 + x32*(-x48 + x49)) + x77*(x26*x90 + x36*x87 + x66*x88) + x77*(x30*x93 + x34*x90 - x52*x87) - 2.0*x96*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x97*(grad_2_gt3[pp]*x98 + x15*x26 + x65) + 0.5*grad_1_chi[pp]*x97*(grad_1_gt5[pp]*x99 + x25 + x26*x98) + 0.5*grad_2_chi[pp]*x97*(grad_2_gt3[pp]*x99 + x26*x33 + x41)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt4[pp];
            double x1 = gt1[pp]*gt2[pp];
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = pow(gt2[pp], 2);
            double x6 = gt0[pp]*gt5[pp];
            double x7 = gt3[pp]*x6;
            double x8 = gt2[pp]*gt4[pp];
            double x9 = 2*x8;
            double x10 = gt0[pp]*x3 - gt1[pp]*x9 + gt3[pp]*x5 + gt5[pp]*x4 - x7;
            double x11 = 1.0/x10;
            double x12 = 4.0*x11;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = x13 - x8;
            double x15 = gt3[pp]*gt5[pp];
            double x16 = x15 - x3;
            double x17 = -x5 + x6;
            double x18 = gt0[pp]*gt3[pp];
            double x19 = x18 - x4;
            double x20 = gt1[pp]*gt4[pp];
            double x21 = gt2[pp]*gt3[pp];
            double x22 = 4*x20 - 4*x21;
            double x23 = pow(x10, -2);
            double x24 = grad_2_gt3[pp]*x2;
            double x25 = grad_1_gt5[pp]*x19;
            double x26 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = x20 - x21;
            double x28 = x26*x27;
            double x29 = x24 - x25 - x28;
            double x30 = 0.5*grad_0_gt5[pp];
            double x31 = 1.0*grad_2_gt2[pp];
            double x32 = x30 - x31;
            double x33 = 0.5*grad_1_gt5[pp];
            double x34 = -1.0*grad_2_gt4[pp] + x33;
            double x35 = -0.5*grad_2_gt5[pp]*x19 - x2*x34 + x27*x32;
            double x36 = grad_0_gt5[pp]*x2;
            double x37 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x38 = x17*x37;
            double x39 = grad_2_gt0[pp]*x14 + x36 - x38;
            double x40 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x41 = -grad_0_gt3[pp]*x17 + grad_1_gt0[pp]*x14 + x2*x40;
            double x42 = 0.25*x40;
            double x43 = x23*(4*x15 - 4*x3);
            double x44 = x23*(4*x18 - 4*x4);
            double x45 = grad_2_gt3[pp]*x17;
            double x46 = grad_1_gt5[pp]*x2 + x14*x26 - x45;
            double x47 = 0.5*x0 - 0.5*x1;
            double x48 = grad_2_gt5[pp]*x47 + x14*(-x30 + x31) + x17*x34;
            double x49 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x50 = 0.5*grad_0_gt3[pp];
            double x51 = 1.0*grad_1_gt1[pp];
            double x52 = x50 - x51;
            double x53 = -0.5*grad_1_gt3[pp]*x17 - x14*x52 + x2*x49;
            double x54 = x23*(-4*x5 + 4*x6);
            double x55 = -grad_0_gt5[pp]*x19 - grad_2_gt0[pp]*x27 + x2*x37;
            double x56 = grad_0_gt3[pp]*x2 - grad_1_gt0[pp]*x27 - x19*x40;
            double x57 = x14*x23;
            double x58 = 0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp];
            double x59 = 0.25*grad_0_gt3[pp];
            double x60 = grad_1_gt3[pp]*(0.25*grad_2_gt0[pp]*x14 + 0.25*x36 - 0.25*x38) + x46*x59;
            double x61 = x23*(4*x13 - 4*x8);
            double x62 = grad_0_gt5[pp]*x27;
            double x63 = grad_2_gt0[pp]*x16;
            double x64 = x14*x37 - x62 - x63;
            double x65 = grad_2_gt3[pp]*x14;
            double x66 = grad_1_gt5[pp]*x27;
            double x67 = -x16*x26 + x65 - x66;
            double x68 = grad_0_gt3[pp]*x14 - grad_1_gt0[pp]*x16 - x27*x40;
            double x69 = 0.25*grad_2_gt3[pp]*x39 + x48*x50;
            double x70 = x22*x23;
            double x71 = 0.5*grad_1_gt3[pp]*x48 + 0.25*grad_2_gt3[pp]*x46;
            double x72 = x23*(4*x0 - 4*x1);
            double x73 = 0.5*grad_0_gt4[pp];
            double x74 = 0.5*grad_1_gt2[pp] + (-0.5)*grad_2_gt1[pp] + x73;
            double x75 = 0.25*grad_1_gt0[pp];
            double x76 = 0.5*grad_0_gt1[pp] - x75;
            double x77 = 0.5*grad_0_gt2[pp] - 0.25*grad_2_gt0[pp];
            double x78 = 0.25*grad_0_gt5[pp];
            double x79 = (-0.5)*grad_1_gt2[pp] + 0.5*grad_2_gt1[pp] + x73;
            double x80 = grad_1_gt3[pp]*x47 - x19*x49 + x27*x52;
            double x81 = -0.25*x16*x26 + 0.25*x65 - 0.25*x66;
            double x82 = 0.5*x20 - 0.5*x21;
            double x83 = -grad_2_gt5[pp]*x82 - x14*x34 + x16*x32;
            double x84 = 0.25*grad_0_gt4[pp] - 0.25*grad_1_gt2[pp] + 0.25*grad_2_gt1[pp];
            double x85 = 0.25*grad_1_gt5[pp] + (-0.5)*grad_2_gt4[pp];
            double x86 = -0.5*grad_1_gt1[pp] + x59;
            double x87 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x88 = 0.5*x13 - 0.5*x8;
            double x89 = grad_1_gt3[pp]*x88 + x16*x52 - x27*x49;
            double x90 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x91 = 1.0/chi[pp];
            double x92 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x5 - gt5[pp]*x4 + x7);
            double x93 = -x13 + x8;
            double x94 = -x0 + x1;
            double x95 = x14*x41 - x16*(grad_0_gt0[pp]*x88 - x17*x90 + x2*x87) - x17*x53 - x19*x48 + x2*x46 - 1.0*x27*x39;
            double x96 = x14*x56 - x16*(-grad_0_gt0[pp]*x82 - x19*x87 + x2*x90) - x17*x80 - x19*x35 + x2*x29 - 1.0*x27*x55;
            double x97 = x14*x68 - x16*(-0.5*grad_0_gt0[pp]*x16 + x14*x90 - x27*x87) - x17*x89 - x19*x83 + x2*x67 - 1.0*x27*x64;
            double x98 = 3.0*x91;
            double x99 = grad_0_chi[pp]*x98;
            double x100 = -x98;
            double x101 = 2.0*x11;
            _1534[pp] = alpha[pp]*((-1/pow(chi[pp], 2))*grad_1_chi[pp]*grad_2_chi[pp] + 2.0*grad2_0_0_gt4[pp]*x11*x16 - grad2_0_1_gt4[pp]*x12*x14 + 1.0*grad2_0_2_gt4[pp]*x11*x22 + 2.0*grad2_1_1_gt4[pp]*x11*x17 - grad2_1_2_gt4[pp]*x12*x2 + 2.0*grad2_2_2_gt4[pp]*x11*x19 + 2.0*grad_0_gt4[pp]*x23*x97 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] + 2.0*grad_1_gt4[pp]*x23*x95 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x23*x96 + 1.0*gt4[pp]*x11*x91*(-grad_0_chi[pp]*x101*x97 - grad_1_chi[pp]*x101*x95 - grad_2_chi[pp]*x101*x96 - x16*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x91) - x17*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x100) - x19*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x98) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x99)*(2*x13 - x9) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x99)*(2*x20 - 2*x21) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x100)*(2*x0 - 2*x1)) - 1.0*x16*x23*(grad_0_gt5[pp]*x56 + x37*x55 + x40*x55) + 2.0*x2*x23*(grad_1_gt5[pp]*x29 + grad_2_gt3[pp]*x35) - x43*(0.5*grad_0_gt3[pp]*x39 + x41*x42) - x43*(x64*x75 + x64*x76 + x68*x77) - x44*(0.25*grad_1_gt5[pp]*x46 + 1.0*grad_2_gt3[pp]*x48) - x44*(0.25*grad_2_gt5[pp]*x29 + x33*x35 - x34*x35) - x44*(0.5*x26*x83 + x67*x78 + x79*x83) - x54*(0.5*grad_1_gt3[pp]*x46 + x49*x53) - x54*(0.25*grad_2_gt3[pp]*x29 + x29*x58 + x33*x80) - x54*(x59*x67 - x67*x86 + x74*x89) + x57*(grad_0_gt3[pp]*x64 + grad_1_gt0[pp]*x67 + x40*x68) + x57*(grad_1_gt5[pp]*x56 + grad_2_gt3[pp]*x55 + x29*x40) + x61*(x41*x58 + x60) + x61*(x53*x74 + x60) + x61*(x29*x84 + x30*x80 + x55*x58) + x61*(x67*x76 + x86*(-x14*x37 + x62 + x63) + x87*x89) - x70*(0.25*grad_1_gt5[pp]*x41 + x69) - x70*(x42*x46 + x69) - x70*(0.5*grad_1_gt0[pp]*x83 + x64*x84 + x68*x78) - x70*(0.25*grad_1_gt5[pp]*x55 + x29*x78 + x35*x79) - x70*(0.25*grad_2_gt5[pp]*x56 + x35*x74 - x55*x85) - x70*(0.25*x26*x64 + x67*x77 + x83*x90) + x72*(x33*x53 + x71) + x72*(x46*x58 + x71) + x72*(0.5*grad_2_gt5[pp]*x80 + x35*x49 + x85*(-x24 + x25 + x28)) + x72*(x26*x81 + x40*x81 + x50*x83) + x72*(x30*x89 + x67*x84 + x83*(-x50 + x51)) - 2.0*x91*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x92*(grad_2_gt3[pp]*x93 + x16*x26 + x66) + 0.5*grad_1_chi[pp]*x92*(grad_1_gt5[pp]*x94 + x26*x93 + x45) + 0.5*grad_2_chi[pp]*x92*(grad_2_gt3[pp]*x94 + x25 + x26*x27)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt4[pp];
            double x1 = gt1[pp]*gt2[pp];
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = pow(gt2[pp], 2);
            double x6 = gt0[pp]*gt3[pp];
            double x7 = gt5[pp]*x6;
            double x8 = gt1[pp]*gt4[pp];
            double x9 = 2*x8;
            double x10 = gt0[pp]*x3 - gt2[pp]*x9 + gt3[pp]*x5 + gt5[pp]*x4 - x7;
            double x11 = 1.0/x10;
            double x12 = 4.0*x11;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = gt2[pp]*gt4[pp];
            double x15 = x13 - x14;
            double x16 = gt3[pp]*gt5[pp];
            double x17 = x16 - x3;
            double x18 = gt0[pp]*gt5[pp];
            double x19 = x18 - x5;
            double x20 = -x4 + x6;
            double x21 = gt2[pp]*gt3[pp];
            double x22 = -4*x21 + 4*x8;
            double x23 = pow(x10, -2);
            double x24 = -x23*(-4*x4 + 4*x6);
            double x25 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x26 = x19*x25;
            double x27 = grad_0_gt5[pp]*x2 + grad_2_gt0[pp]*x15 - x26;
            double x28 = grad_1_gt5[pp]*x2;
            double x29 = grad_2_gt3[pp]*x19;
            double x30 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x31 = x15*x30 + x28 - x29;
            double x32 = grad_0_gt3[pp]*x15;
            double x33 = grad_1_gt0[pp]*x17;
            double x34 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x35 = -x21 + x8;
            double x36 = x34*x35;
            double x37 = x32 - x33 - x36;
            double x38 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x39 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x40 = -0.5*grad_0_gt0[pp]*x17 + x15*x38 - x35*x39;
            double x41 = x23*(4*x16 - 4*x3);
            double x42 = grad_0_gt3[pp]*x19;
            double x43 = grad_1_gt0[pp]*x15 + x2*x34 - x42;
            double x44 = 0.5*x13 - 0.5*x14;
            double x45 = grad_0_gt0[pp]*x44 - x19*x38 + x2*x39;
            double x46 = 0.5*grad_0_gt3[pp];
            double x47 = 1.0*grad_1_gt1[pp];
            double x48 = x46 - x47;
            double x49 = 0.5*grad_1_gt3[pp];
            double x50 = 0.5*grad_2_gt3[pp];
            double x51 = 1.0*grad_1_gt4[pp] - x50;
            double x52 = -x15*x48 - x19*x49 + x2*x51;
            double x53 = x23*(4*x18 - 4*x5);
            double x54 = -grad_0_gt5[pp]*x20 - grad_2_gt0[pp]*x35 + x2*x25;
            double x55 = grad_0_gt3[pp]*x2;
            double x56 = grad_1_gt0[pp]*x35;
            double x57 = x20*x34;
            double x58 = x55 - x56 - x57;
            double x59 = -grad_1_gt5[pp]*x20 + grad_2_gt3[pp]*x2 - x30*x35;
            double x60 = x2*x23;
            double x61 = grad_0_gt5[pp]*x35;
            double x62 = grad_2_gt0[pp]*x17;
            double x63 = x15*x25 - x61 - x62;
            double x64 = -grad_1_gt5[pp]*x35 + grad_2_gt3[pp]*x15 - x17*x30;
            double x65 = 0.25*grad_0_gt3[pp];
            double x66 = -0.5*grad_1_gt1[pp] + x65;
            double x67 = 0.25*grad_0_gt5[pp];
            double x68 = grad_1_gt3[pp]*(0.25*grad_2_gt0[pp]*x15 + x2*x67 - 0.25*x26) + 0.25*grad_2_gt3[pp]*x43;
            double x69 = x23*(4*x0 - 4*x1);
            double x70 = x22*x23;
            double x71 = -x70;
            double x72 = 0.25*grad_1_gt0[pp];
            double x73 = 0.25*grad_0_gt3[pp]*x27 + x45*x50;
            double x74 = 0.5*grad_2_gt1[pp];
            double x75 = (-0.5)*grad_0_gt4[pp] + 0.5*grad_1_gt2[pp] + x74;
            double x76 = 0.25*grad_0_gt3[pp]*x43 + x45*x49;
            double x77 = x23*(4*x13 - 4*x14);
            double x78 = grad_1_gt3[pp]*x44 + x17*x48 - x35*x51;
            double x79 = 0.25*grad_2_gt0[pp];
            double x80 = 0.25*x54;
            double x81 = -0.5*x21 + 0.5*x8;
            double x82 = -grad_0_gt0[pp]*x81 + x2*x38 - x20*x39;
            double x83 = 0.5*grad_0_gt4[pp] + (-0.5)*grad_1_gt2[pp] + x74;
            double x84 = 0.25*grad_0_gt4[pp] - 0.25*grad_1_gt2[pp] + 0.25*grad_2_gt1[pp];
            double x85 = 0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp];
            double x86 = 0.5*x0 - 0.5*x1;
            double x87 = grad_1_gt3[pp]*x86 - x20*x51 + x35*x48;
            double x88 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x89 = 0.5*x58;
            double x90 = 0.5*grad_0_gt5[pp];
            double x91 = 1.0*grad_2_gt2[pp];
            double x92 = x90 - x91;
            double x93 = 0.25*x55 - 0.25*x56 - 0.25*x57;
            double x94 = 0.5*grad_0_gt1[pp] - x72;
            double x95 = 1.0/chi[pp];
            double x96 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x5 - gt5[pp]*x4 + x7);
            double x97 = -x13 + x14;
            double x98 = -x0 + x1;
            double x99 = x15*x43 - x17*x45 - x19*x52 + x2*x31 - x20*(grad_2_gt5[pp]*x86 + x15*(-x90 + x91) + x19*x88) - 1.0*x27*x35;
            double x100 = x15*x58 - x17*x82 - x19*x87 + x2*x59 - x20*(-0.5*grad_2_gt5[pp]*x20 - x2*x88 + x35*x92) - 1.0*x35*x54;
            double x101 = x15*x37 - x17*x40 - x19*x78 + x2*x64 - x20*(-grad_2_gt5[pp]*x81 - x15*x88 + x17*x92) - 1.0*x35*x63;
            double x102 = 3.0*x95;
            double x103 = grad_0_chi[pp]*x102;
            double x104 = -x102;
            double x105 = 2.0*x11;
            _1412[pp] = alpha[pp]*(2.0*grad2_0_0_gt1[pp]*x11*x17 - grad2_0_1_gt1[pp]*x12*x15 + 1.0*grad2_0_2_gt1[pp]*x11*x22 + 2.0*grad2_1_1_gt1[pp]*x11*x19 - grad2_1_2_gt1[pp]*x12*x2 + 2.0*grad2_2_2_gt1[pp]*x11*x20 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x101*x23 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*(-grad_0_chi[pp]/pow(chi[pp], 2)) + 2.0*grad_1_gt1[pp]*x23*x99 + 2.0*grad_2_gt1[pp]*x100*x23 + 1.0*gt1[pp]*x11*x95*(-grad_0_chi[pp]*x101*x105 - grad_1_chi[pp]*x105*x99 - grad_2_chi[pp]*x100*x105 - x17*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x95) - x19*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x104) - x20*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x102) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x103)*(2*x13 - 2*x14) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x103)*(-2*x21 + x9) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x104)*(2*x0 - 2*x1)) + 2.0*x15*x23*(grad_0_gt3[pp]*x40 + grad_1_gt0[pp]*x37) - 1.0*x20*x23*(grad_2_gt0[pp]*x64 + x25*x63 + x30*x63) + x24*(0.5*grad_2_gt3[pp]*x27 + 0.25*x30*x31) + x24*(0.25*grad_1_gt5[pp]*x54 - x54*(0.25*grad_1_gt5[pp] + (-0.5)*grad_2_gt4[pp]) - x59*(-0.5*grad_2_gt2[pp] + x67)) - x41*(1.0*grad_0_gt3[pp]*x45 + 0.25*grad_1_gt0[pp]*x43) - x41*(0.25*grad_0_gt0[pp]*x37 + 0.5*grad_1_gt0[pp]*x40 + x38*x40) - x41*(0.5*x34*x82 + x58*x79 + x82*x83) - x53*(0.5*grad_1_gt3[pp]*x43 - x48*x52) - x53*(0.5*grad_1_gt0[pp]*x78 + x37*x65 + x66*(-x32 + x33 + x36)) - x53*(0.25*grad_2_gt3[pp]*x58 + x58*x85 + x75*x87) + x60*(grad_0_gt3[pp]*x63 + grad_1_gt0[pp]*x64 + x30*x37) + x60*(grad_1_gt5[pp]*x58 + grad_2_gt3[pp]*x54 + x30*x59) + x69*(x52*x75 + x68) + x69*(x66*(-x15*x30 - x28 + x29) + x68) + x69*(0.5*grad_2_gt0[pp]*x78 + x37*x84 + x66*(-x15*x25 + x61 + x62)) + x69*(x54*x85 - x87*x92 - x88*x89) - x70*(0.25*grad_0_gt0[pp]*x64 + x40*x75 + x63*x94) - x70*(0.5*grad_1_gt5[pp]*x82 + x25*x80 + x59*x79) - x70*(x34*x80 - x82*x88 - x89*x92) - x70*(x37*x79 + x40*x83 + x63*x72) + x71*(0.25*x30*x43 + x73) + x71*(x31*x72 + x73) + x77*(0.5*grad_1_gt0[pp]*x52 + x76) + x77*(x66*(-grad_1_gt0[pp]*x15 - x2*x34 + x42) + x76) + x77*(0.5*grad_0_gt0[pp]*x78 + x37*x94 + x40*(-x46 + x47)) + x77*(0.5*grad_2_gt0[pp]*x87 + x51*x82 + x58*x84) + x77*(0.5*grad_2_gt3[pp]*x82 + x30*x93 + x34*x93) - 2.0*x95*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x96*(grad_0_gt3[pp]*x97 + grad_1_gt0[pp]*x17 + x34*x35) + 0.5*grad_1_chi[pp]*x96*(grad_1_gt0[pp]*x97 + x34*x98 + x42) + 0.5*grad_2_chi[pp]*x96*(grad_0_gt3[pp]*x98 + grad_1_gt0[pp]*x35 + x20*x34)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt4[pp];
            double x1 = gt1[pp]*gt2[pp];
            double x2 = x0 - x1;
            double x3 = pow(gt4[pp], 2);
            double x4 = pow(gt1[pp], 2);
            double x5 = pow(gt2[pp], 2);
            double x6 = gt0[pp]*gt3[pp];
            double x7 = gt5[pp]*x6;
            double x8 = 2*x1;
            double x9 = gt0[pp]*x3 + gt3[pp]*x5 - gt4[pp]*x8 + gt5[pp]*x4 - x7;
            double x10 = 1.0/x9;
            double x11 = 4.0*x10;
            double x12 = gt1[pp]*gt5[pp];
            double x13 = gt2[pp]*gt4[pp];
            double x14 = x12 - x13;
            double x15 = gt3[pp]*gt5[pp];
            double x16 = x15 - x3;
            double x17 = gt0[pp]*gt5[pp];
            double x18 = x17 - x5;
            double x19 = -x4 + x6;
            double x20 = gt1[pp]*gt4[pp];
            double x21 = gt2[pp]*gt3[pp];
            double x22 = 4*x20 - 4*x21;
            double x23 = grad_0_gt3[pp]*x18;
            double x24 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x25 = grad_1_gt0[pp]*x14 + x2*x24 - x23;
            double x26 = 0.5*grad_1_gt3[pp];
            double x27 = 0.5*grad_2_gt3[pp];
            double x28 = 1.0*grad_1_gt4[pp] - x27;
            double x29 = 0.5*grad_0_gt3[pp];
            double x30 = -1.0*grad_1_gt1[pp] + x29;
            double x31 = -x14*x30 - x18*x26 + x2*x28;
            double x32 = pow(x9, -2);
            double x33 = x20 - x21;
            double x34 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x35 = -grad_1_gt5[pp]*x33 + grad_2_gt3[pp]*x14 - x16*x34;
            double x36 = 0.25*grad_0_gt4[pp] - 0.25*grad_1_gt2[pp] + 0.25*grad_2_gt1[pp];
            double x37 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x38 = -grad_0_gt5[pp]*x33 - grad_2_gt0[pp]*x16 + x14*x37;
            double x39 = x32*(-4*x4 + 4*x6);
            double x40 = grad_0_gt3[pp]*x14 - grad_1_gt0[pp]*x16 - x24*x33;
            double x41 = 0.25*grad_0_gt3[pp];
            double x42 = 0.5*x12 - 0.5*x13;
            double x43 = grad_1_gt3[pp]*x42 + x16*x30 - x28*x33;
            double x44 = x32*(4*x17 - 4*x5);
            double x45 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x46 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x47 = -0.5*grad_0_gt0[pp]*x16 + x14*x45 - x33*x46;
            double x48 = x32*(4*x15 - 4*x3);
            double x49 = x18*x37;
            double x50 = grad_0_gt5[pp]*x2 + grad_2_gt0[pp]*x14 - x49;
            double x51 = grad_1_gt5[pp]*x2;
            double x52 = grad_2_gt3[pp]*x18;
            double x53 = x14*x34 + x51 - x52;
            double x54 = 1.0*x32;
            double x55 = x33*x54;
            double x56 = grad_0_gt3[pp]*x2;
            double x57 = grad_1_gt0[pp]*x33;
            double x58 = x19*x24;
            double x59 = x56 - x57 - x58;
            double x60 = -grad_1_gt5[pp]*x19 + grad_2_gt3[pp]*x2 - x33*x34;
            double x61 = -grad_0_gt5[pp]*x19 - grad_2_gt0[pp]*x33 + x2*x37;
            double x62 = 0.25*grad_1_gt0[pp];
            double x63 = 0.5*grad_0_gt1[pp] - x62;
            double x64 = 0.25*grad_2_gt0[pp];
            double x65 = 0.25*grad_0_gt0[pp]*x35 + x40*x64;
            double x66 = x22*x32;
            double x67 = 0.5*grad_2_gt0[pp]*x43 + x35*x62;
            double x68 = x32*(4*x0 - 4*x1);
            double x69 = 0.5*grad_2_gt1[pp];
            double x70 = (-0.5)*grad_0_gt4[pp] + 0.5*grad_1_gt2[pp] + x69;
            double x71 = grad_0_gt0[pp]*x42 - x18*x45 + x2*x46;
            double x72 = 0.25*grad_0_gt5[pp];
            double x73 = 0.25*x60;
            double x74 = 0.5*x0 - 0.5*x1;
            double x75 = grad_1_gt3[pp]*x74 - x19*x28 + x30*x33;
            double x76 = 0.5*grad_0_gt5[pp];
            double x77 = 0.5*grad_0_gt0[pp]*x43 + x40*x62;
            double x78 = x32*(4*x12 - 4*x13);
            double x79 = -0.5*grad_1_gt1[pp] + x41;
            double x80 = 0.5*grad_0_gt4[pp] + (-0.5)*grad_1_gt2[pp] + x69;
            double x81 = 0.25*x56 - 0.25*x57 - 0.25*x58;
            double x82 = 0.5*grad_0_gt2[pp] - x64;
            double x83 = 0.5*x20 - 0.5*x21;
            double x84 = -grad_0_gt0[pp]*x83 - x19*x46 + x2*x45;
            double x85 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x86 = 0.5*x59;
            double x87 = 1.0*grad_2_gt2[pp];
            double x88 = x76 - x87;
            double x89 = 1.0/chi[pp];
            double x90 = 1.0/(-gt0[pp]*x3 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x5 - gt5[pp]*x4 + x7);
            double x91 = -x12 + x13;
            double x92 = -x0 + x1;
            double x93 = x14*x25 - x16*x71 - x18*x31 - x19*(grad_2_gt5[pp]*x74 + x14*(-x76 + x87) + x18*x85) + x2*x53 - 1.0*x33*x50;
            double x94 = x14*x59 - x16*x84 - x18*x75 - x19*(-0.5*grad_2_gt5[pp]*x19 - x2*x85 + x33*x88) + x2*x60 - 1.0*x33*x61;
            double x95 = x14*x40 - x16*x47 - x18*x43 - x19*(-grad_2_gt5[pp]*x83 - x14*x85 + x16*x88) + x2*x35 - 1.0*x33*x38;
            double x96 = 3.0*x89;
            double x97 = grad_0_chi[pp]*x96;
            double x98 = -x96;
            double x99 = 2.0*x10;
            _1309[pp] = alpha[pp]*(2.0*grad2_0_0_gt1[pp]*x10*x16 - grad2_0_1_gt1[pp]*x11*x14 + 1.0*grad2_0_2_gt1[pp]*x10*x22 + 2.0*grad2_1_1_gt1[pp]*x10*x18 - grad2_1_2_gt1[pp]*x11*x2 + 2.0*grad2_2_2_gt1[pp]*x10*x19 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x32*x95 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*(-grad_0_chi[pp]/pow(chi[pp], 2)) + 2.0*grad_1_gt1[pp]*x32*x93 + 2.0*grad_2_gt1[pp]*x32*x94 + 1.0*gt1[pp]*x10*x89*(-grad_0_chi[pp]*x95*x99 - grad_1_chi[pp]*x93*x99 - grad_2_chi[pp]*x94*x99 - x16*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x89) - x18*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x98) - x19*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x96) + (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x97)*(2*x12 - 2*x13) - (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x97)*(2*x20 - 2*x21) + (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x98)*(2*x0 - x8)) + 2.0*x14*x32*(grad_0_gt3[pp]*x25 + grad_1_gt0[pp]*x31) - x19*x54*(grad_2_gt3[pp]*x50 + x34*x53 + x37*x53) - x39*(0.5*grad_2_gt0[pp]*x35 + x36*x38) - x39*(x60*x72 - x60*(-0.5*grad_2_gt2[pp] + x72) - x61*(0.25*grad_1_gt5[pp] + (-0.5)*grad_2_gt4[pp])) - x44*(1.0*grad_1_gt0[pp]*x43 + x40*x41) - x44*(0.25*grad_1_gt3[pp]*x25 + x29*x31 - x30*x31) - x44*(0.25*grad_2_gt3[pp]*x59 + 0.5*x24*x75 + x70*x75) - x48*(0.5*grad_0_gt0[pp]*x40 + x45*x47) - x48*(0.25*grad_1_gt0[pp]*x25 + x25*x63 + x29*x71) - x48*(x59*x64 + x59*x82 + x80*x84) - x55*(grad_0_gt3[pp]*x50 + grad_1_gt0[pp]*x53 + x25*x37) - x55*(grad_0_gt5[pp]*x59 + grad_2_gt0[pp]*x60 + x37*x61) - x66*(x38*x63 + x65) - x66*(x47*x80 + x65) - x66*(0.25*x25*x34 + x27*x71 + x53*x63) - x66*(x60*x82 - x84*x85 - x86*x88) + x68*(x36*x40 + x67) + x68*(x38*x41 + x67) + x68*(grad_1_gt3[pp]*(0.25*grad_2_gt0[pp]*x14 + x2*x72 - 0.25*x49) + x31*x80 + x79*(-x14*x34 - x51 + x52)) + x68*(0.25*grad_2_gt3[pp]*x25 + x31*x70 + x41*x53) + x68*(0.25*grad_2_gt3[pp]*x61 + x34*x73 + x75*x76) + x68*(x24*x73 - x75*x88 - x85*x86) + x78*(x29*x47 + x77) + x78*(x40*x63 + x77) + x78*(0.5*grad_2_gt0[pp]*x75 + x24*x81 + x36*x59) + x78*(0.5*grad_2_gt3[pp]*x84 + x34*x81 + x46*x75) + x78*(x26*x71 + x31*x45 + x79*(-grad_1_gt0[pp]*x14 - x2*x24 + x23)) - 2.0*x89*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x90*(grad_0_gt3[pp]*x91 + grad_1_gt0[pp]*x16 + x24*x33) + 0.5*grad_1_chi[pp]*x90*(grad_1_gt0[pp]*x91 + x23 + x24*x92) + 0.5*grad_2_chi[pp]*x90*(grad_0_gt3[pp]*x92 + grad_1_gt0[pp]*x33 + x19*x24)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At1[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt3[pp];
            double x6 = gt5[pp]*x5;
            double x7 = gt2[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt1[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x14 - x7;
            double x16 = gt0[pp]*gt5[pp];
            double x17 = x16 - x4;
            double x18 = gt1[pp]*gt4[pp];
            double x19 = gt2[pp]*gt3[pp];
            double x20 = x18 - x19;
            double x21 = -x3 + x5;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = -grad_2_gt1[pp];
            double x25 = grad_0_gt4[pp] + grad_1_gt2[pp] + x24;
            double x26 = 1.0/chi[pp];
            double x27 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x21;
            double x28 = 1.0*x10;
            double x29 = -grad_0_chi[pp];
            double x30 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x17 + grad_2_chi[pp]*x13;
            double x31 = 1.0*x26;
            double x32 = grad_0_gt3[pp]*x17;
            double x33 = 1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x13*x25 - x28*x32;
            double x34 = grad_0_gt3[pp]*x15;
            double x35 = -grad_1_chi[pp];
            double x36 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x37 = -x14 + x7;
            double x38 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x37 + grad_2_chi[pp]*x20;
            double x39 = x31*(1.0*gt1[pp]*x36*x38 + x35);
            double x40 = grad_2_gt3[pp]*x15;
            double x41 = grad_1_gt5[pp]*x20;
            double x42 = -grad_0_gt4[pp] + grad_1_gt2[pp];
            double x43 = grad_2_gt1[pp] + x42;
            double x44 = x23*x43 + x41;
            double x45 = -x40 + x44;
            double x46 = grad_2_gt0[pp]*x23;
            double x47 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x48 = grad_0_gt5[pp]*x20;
            double x49 = -x15*x47 + x48;
            double x50 = x46 + x49;
            double x51 = pow(x9, -2);
            double x52 = x21*x51;
            double x53 = -4*x3 + 4*x5;
            double x54 = grad_2_gt0[pp]*x20;
            double x55 = grad_0_gt5[pp]*x21;
            double x56 = x13*x47 - x54 - x55;
            double x57 = 0.25*grad_1_gt5[pp];
            double x58 = (-0.5)*grad_2_gt4[pp] + x57;
            double x59 = 0.25*grad_0_gt5[pp];
            double x60 = -0.5*grad_2_gt2[pp] + x59;
            double x61 = grad_2_gt3[pp]*x13;
            double x62 = grad_1_gt5[pp]*x21;
            double x63 = x20*x43;
            double x64 = x61 - x62 - x63;
            double x65 = grad_0_gt3[pp]*x13;
            double x66 = grad_1_gt0[pp]*x20;
            double x67 = x21*x25;
            double x68 = x65 - x66 - x67;
            double x69 = 0.5*grad_2_gt5[pp]*x21;
            double x70 = 0.5*grad_0_gt5[pp];
            double x71 = 1.0*grad_2_gt2[pp];
            double x72 = x70 - x71;
            double x73 = 0.5*grad_1_gt5[pp];
            double x74 = 1.0*grad_2_gt4[pp];
            double x75 = x73 - x74;
            double x76 = x13*x75;
            double x77 = x20*x72 - x69 - x76;
            double x78 = 0.5*x12;
            double x79 = 0.5*x11 - x78;
            double x80 = 0.5*grad_0_gt3[pp];
            double x81 = 1.0*grad_1_gt1[pp];
            double x82 = x80 - x81;
            double x83 = 1.0*grad_1_gt4[pp];
            double x84 = 0.5*grad_2_gt3[pp];
            double x85 = x83 - x84;
            double x86 = grad_1_gt3[pp]*x79 + x20*x82 - x21*x85;
            double x87 = 0.5*x18 - 0.5*x19;
            double x88 = grad_0_gt0[pp]*x87;
            double x89 = 1.0*grad_0_gt1[pp];
            double x90 = 0.5*grad_1_gt0[pp];
            double x91 = x89 - x90;
            double x92 = 1.0*grad_0_gt2[pp];
            double x93 = 0.5*grad_2_gt0[pp];
            double x94 = x92 - x93;
            double x95 = x21*x94;
            double x96 = x13*x91 - x88 - x95;
            double x97 = 2.0*x51;
            double x98 = -x34;
            double x99 = grad_1_gt0[pp]*x23 + x20*x25;
            double x100 = x98 + x99;
            double x101 = 0.5*grad_0_gt0[pp]*x23 + x20*x94;
            double x102 = x101 - x15*x91;
            double x103 = x51*(-4*x2 + 4*x22);
            double x104 = grad_1_gt0[pp]*x20 + x21*x25;
            double x105 = x104 - x65;
            double x106 = x88 + x95;
            double x107 = x106 - x13*x91;
            double x108 = 0.5*x25;
            double x109 = 0.5*grad_0_gt4[pp];
            double x110 = 0.5*grad_2_gt1[pp];
            double x111 = (-0.5)*grad_1_gt2[pp] + x109 + x110;
            double x112 = x15*x51;
            double x113 = 2.0*x112;
            double x114 = 0.5*grad_1_gt2[pp];
            double x115 = 0.5*grad_1_gt3[pp];
            double x116 = x115*x17;
            double x117 = x15*x82;
            double x118 = x13*x85;
            double x119 = x116 + x117 - x118;
            double x120 = grad_1_gt0[pp]*x15 + x13*x25 - x32;
            double x121 = 0.25*grad_2_gt3[pp]*x120;
            double x122 = x17*x47;
            double x123 = 0.25*grad_2_gt0[pp]*x15 - 0.25*x122 + x13*x59;
            double x124 = grad_1_gt3[pp]*x123;
            double x125 = x121 + x124;
            double x126 = 4*x11 - 4*x12;
            double x127 = x126*x51;
            double x128 = -0.25*grad_2_gt3[pp];
            double x129 = 0.5*grad_1_gt4[pp] + x128;
            double x130 = x72*x86;
            double x131 = 0.25*grad_0_gt3[pp];
            double x132 = -0.5*grad_1_gt1[pp] + x131;
            double x133 = 0.25*grad_0_gt4[pp];
            double x134 = 0.25*grad_2_gt1[pp];
            double x135 = 0.25*grad_1_gt2[pp];
            double x136 = -x135;
            double x137 = x134 + x136;
            double x138 = x133 + x137;
            double x139 = 0.5*x7;
            double x140 = -x139 + 0.5*x14;
            double x141 = x20*x85;
            double x142 = grad_1_gt3[pp]*x140 - x141 + x23*x82;
            double x143 = 0.5*grad_2_gt0[pp]*x142;
            double x144 = 4*x18 - 4*x19;
            double x145 = 0.5*grad_0_gt1[pp];
            double x146 = 0.25*grad_1_gt0[pp];
            double x147 = -x146;
            double x148 = x145 + x147;
            double x149 = (-0.5)*grad_0_gt4[pp] + x110 + x114;
            double x150 = x25*x56;
            double x151 = 0.25*x150;
            double x152 = 0.5*x68;
            double x153 = x152*x72;
            double x154 = x20*x43;
            double x155 = -x61 + x62;
            double x156 = x154 + x155;
            double x157 = 0.25*grad_2_gt0[pp];
            double x158 = grad_2_gt0[pp]*x20;
            double x159 = -x13*x47 + x55;
            double x160 = x158 + x159;
            double x161 = x17*x91;
            double x162 = grad_0_gt0[pp]*x140 + x13*x94 - x161;
            double x163 = x115*x162;
            double x164 = 0.25*grad_0_gt3[pp]*x120 + x163;
            double x165 = 4*x14 - 4*x7;
            double x166 = x165*x51;
            double x167 = -0.25*grad_0_gt3[pp]*x13 + 0.25*grad_1_gt0[pp]*x20 + 0.25*x21*x25;
            double x168 = 0.5*grad_2_gt0[pp]*x86;
            double x169 = 0.5*grad_0_gt0[pp]*x142;
            double x170 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x15 - x122;
            double x171 = grad_1_gt5[pp]*x13;
            double x172 = grad_2_gt3[pp]*x17;
            double x173 = x15*x43 + x171 - x172;
            double x174 = -x70 + x71;
            double x175 = grad_2_gt5[pp]*x79 + x15*x174 + x17*x75;
            double x176 = -x116;
            double x177 = -x117 + x118 + x176;
            double x178 = x162*x23;
            double x179 = -grad2_0_1_chi[pp];
            double x180 = grad_1_gt0[pp]*x23;
            double x181 = x20*x25;
            double x182 = -x180 - x181 + x34;
            double x183 = 2.0*x26;
            double x184 = grad_2_gt0[pp]*x23;
            double x185 = x15*x47 - x184 - x48;
            double x186 = -x23*x43 + x40 - x41;
            double x187 = grad_2_gt5[pp]*x87;
            double x188 = -x15*x75 - x187 + x23*x72;
            double x189 = 0.5*grad_0_gt0[pp]*x23;
            double x190 = x20*x94;
            double x191 = x15*x91 - x189 - x190;
            double x192 = pow(grad_1_chi[pp], 2);
            double x193 = 3.0*x26;
            double x194 = -x193;
            double x195 = x17*(2*grad2_1_1_chi[pp] + x192*x194);
            double x196 = pow(grad_0_chi[pp], 2);
            double x197 = x23*(2*grad2_0_0_chi[pp] - 3.0*x196*x26);
            double x198 = pow(grad_2_chi[pp], 2);
            double x199 = x21*(2*grad2_2_2_chi[pp] - x193*x198);
            double x200 = 2*x14 - x8;
            double x201 = grad_0_chi[pp]*x193;
            double x202 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x201;
            double x203 = 2*x18 - 2*x19;
            double x204 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x201;
            double x205 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x194)*(2*x11 - 2*x12);
            double x206 = x17*x177;
            double x207 = x120*x15 + x13*x173 - 1.0*x170*x20 - x175*x21 - x178 - x206;
            double x208 = x21*x77;
            double x209 = x13*x64 + x15*x68 - x17*x86 - 1.0*x20*x56 - x208 - x23*x96;
            double x210 = x191*x23;
            double x211 = x13*x186 - x142*x17 + x15*x182 - 1.0*x185*x20 - x188*x21 - x210;
            double x212 = x177*x82;
            double x213 = x51*(4*x16 - 4*x4);
            double x214 = -x131;
            double x215 = 0.5*grad_1_gt0[pp]*x142;
            double x216 = x65 - x66 - x67;
            double x217 = x149*x86;
            double x218 = x13*x51;
            double x219 = 1.0*x218;
            double x220 = -x103;
            double x221 = 0.25*grad_1_gt0[pp]*x120;
            double x222 = grad_0_gt3[pp]*x162;
            double x223 = x51*x53;
            double x224 = -x223;
            double x225 = x173*x43;
            double x226 = 0.25*x225;
            double x227 = -x15*x43 - x171 + x172;
            double x228 = x132*x227;
            double x229 = x144*x51;
            double x230 = -x229;
            double x231 = x146*x173;
            double x232 = 0.25*grad_0_gt3[pp]*x170;
            double x233 = x162*x84;
            double x234 = x232 + x233;
            double x235 = x132*(-grad_1_gt0[pp]*x15 - x13*x25 + x32);
            double x236 = 0.25*x120*x43;
            double x237 = pow(chi[pp], -2);
            double x238 = -grad_0_chi[pp]*x237;
            double x239 = 4.0*x10;
            double x240 = x13*x239;
            double x241 = -x240;
            double x242 = x15*x239;
            double x243 = -x242;
            double x244 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x243 + 1.0*grad2_0_2_gt1[pp]*x10*x144 + 2.0*grad2_1_1_gt1[pp]*x10*x17 + grad2_1_2_gt1[pp]*x241 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x238;
            double x245 = x127*(x125 + x228) + x166*(x164 + x235) + x220*(x221 + 1.0*x222) + x224*(0.5*grad_2_gt3[pp]*x170 + x226) + x230*(x231 + x234) + x230*(x234 + x236) + x244;
            double x246 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x20;
            double x247 = -x11 + x12;
            double x248 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x247 + grad_2_chi[pp]*x21;
            double x249 = grad_0_gt5[pp]*x56;
            double x250 = 3.0*x51;
            double x251 = x23*x250;
            double x252 = grad_1_gt5[pp]*x64;
            double x253 = x17*x250;
            double x254 = 6.0*x51;
            double x255 = -x157;
            double x256 = 0.75*grad_0_gt4[pp];
            double x257 = -x134;
            double x258 = 0.75*grad_1_gt2[pp];
            double x259 = x59*x64;
            double x260 = 0.25*grad_1_gt5[pp]*x56;
            double x261 = grad_2_gt3[pp]*x175;
            double x262 = 0.25*grad_2_gt3[pp]*x170;
            double x263 = grad_2_gt5[pp]*x64;
            double x264 = grad_1_gt5[pp]*x77;
            double x265 = grad_0_gt5[pp]*x77;
            double x266 = x20*x97;
            double x267 = 0.25*grad_2_gt5[pp]*x64;
            double x268 = 0.25*grad_2_gt5[pp]*x56;
            double x269 = x157*x186;
            double x270 = x173*x47;
            double x271 = 0.25*x270;
            double x272 = x188*x43;
            double x273 = x185*x43;
            double x274 = 0.25*x273;
            double x275 = -x170*x58;
            double x276 = x227*x58;
            double x277 = -x186*x60;
            double x278 = x184 + x49;
            double x279 = x278*x60;
            double x280 = (-0.5)*gt0[pp]*gt4[pp] + x78;
            double x281 = -x73 + x74;
            double x282 = 2.0*x10;
            double x283 = -grad_0_chi[pp]*x211*x282 - grad_1_chi[pp]*x207*x282 - 2.0*grad_2_chi[pp]*x10*x209 - x195 - x197 - x199 + x200*x202 - x203*x204 + x205;
            double x284 = grad_0_chi[pp]*x37 + grad_1_chi[pp]*x17 + grad_2_chi[pp]*x247;
            double x285 = grad_0_gt3[pp]*x120;
            double x286 = grad_2_gt3[pp]*x173;
            double x287 = 3.0*x52;
            double x288 = 0.75*grad_2_gt1[pp];
            double x289 = x131*x173;
            double x290 = grad_2_gt3[pp]*x177;
            double x291 = grad_0_gt3[pp]*x177;
            double x292 = 0.25*grad_1_gt3[pp]*x120;
            double x293 = 0.25*grad_1_gt3[pp]*x173;
            double x294 = grad_1_gt5[pp]*x86;
            double x295 = 0.25*grad_1_gt5[pp]*x68;
            double x296 = x142*x43;
            double x297 = x146*x186;
            double x298 = x25*x86;
            double x299 = x25*x64;
            double x300 = 0.25*x299;
            double x301 = x182*x43;
            double x302 = 0.25*x301;
            double x303 = x129*x68;
            double x304 = -x132*x186;
            double x305 = x129*x64;
            double x306 = x180 + x181 + x98;
            double x307 = x132*x306;
            double x308 = (-0.5)*gt1[pp]*gt5[pp] + x139;
            double x309 = -x80 + x81;
            double x310 = -x133;
            double x311 = x146*x185;
            double x312 = x157*x182;
            double x313 = x59*x68;
            double x314 = x120*x47;
            double x315 = 0.25*x314;
            double x316 = grad_0_gt5[pp]*x96;
            double x317 = 0.25*grad_0_gt0[pp]*x182;
            double x318 = 0.25*grad_0_gt0[pp]*x185;
            double x319 = x25*x96;
            double x320 = x148*x170;
            double x321 = x120*x148;
            double x322 = 0.5*grad_0_gt2[pp] + x255;
            double x323 = x322*x68;
            double x324 = x322*x56;
            double x325 = 0.25*grad_1_gt5[pp]*x173;
            double x326 = x111*x188 + x186*x59;
            double x327 = -x75*x77;
            double x328 = x148*x185;
            double x329 = x182*x322;
            double x330 = x328 + x329;
            double x331 = x120*x25;
            double x332 = 0.25*x331;
            double x333 = x129*x173;
            double x334 = 0.5*grad_1_gt3[pp]*x175;
            double x335 = 0.25*grad_2_gt3[pp]*x173 + x334;
            double x336 = -0.25*x23*x43 + 0.25*x40 - 0.25*x41;
            double x337 = x336*x43;
            double x338 = x188*x80 + x25*x336;
            double x339 = x138*x186 + x142*x70;
            double x340 = 0.5*grad_2_gt5[pp]*x86;
            double x341 = x340 + x58*(x155 + x63);
            double x342 = 0.25*grad_1_gt5[pp]*x120;
            double x343 = x175*x80;
            double x344 = x262 + x343;
            double x345 = 0.25*x25;
            double x346 = x173*x345;
            double x347 = x111*x77 + x259;
            double x348 = x186*x322 + x188*x91;
            double x349 = x138*x185;
            double x350 = 0.5*grad_1_gt0[pp]*x188;
            double x351 = x182*x59 + x350;
            double x352 = (-0.5)*grad_2_gt1[pp] + x109 + x114;
            double x353 = x352*x77;
            double x354 = -x56*x58;
            double x355 = 0.25*grad_2_gt5[pp]*x68;
            double x356 = x354 + x355;
            double x357 = x120*x129;
            double x358 = x124 + x289;
            double x359 = x132*x278;
            double x360 = x142*x94 + x148*x186;
            double x361 = x177*x352;
            double x362 = x129*x56;
            double x363 = x70*x86;
            double x364 = x138*x64 + x363;
            double x365 = x177*x85;
            double x366 = x131*x186 + x142*x352;
            double x367 = 0.25*grad_2_gt3[pp]*x64;
            double x368 = grad_1_gt5[pp]*x68;
            double x369 = grad_2_gt3[pp]*x56 + x368;
            double x370 = x182*x25;
            double x371 = grad_1_gt0[pp]*x186;
            double x372 = grad_0_gt3[pp]*x185 + x371;
            double x373 = grad_0_gt5[pp]*x68;
            double x374 = x47*x56;
            double x375 = x373 + x374;
            double x376 = 1.0*x51;
            double x377 = x23*x376;
            double x378 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x243 + 1.0*grad2_0_2_gt4[pp]*x10*x144 + 2.0*grad2_1_1_gt4[pp]*x10*x17 + grad2_1_2_gt4[pp]*x241 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x211*x51 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x237 + 2.0*grad_1_gt4[pp]*x207*x51 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x209*x51 + 1.0*gt4[pp]*x10*x26*x283 - x183*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x36*(grad_2_gt3[pp]*x37 + x44) + 0.5*grad_1_chi[pp]*x36*(grad_1_gt5[pp]*x247 + x172 + x37*x43) + 0.5*grad_2_chi[pp]*x36*(grad_2_gt3[pp]*x247 + x154 + x62));
            double x379 = 2.0*grad_2_alpha[pp];
            double x380 = -grad_2_chi[pp];
            double x381 = 2.0*grad_1_alpha[pp];
            double x382 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x246*x26 - 2.0*x23*x43 + 2.0*x40 - 2.0*x41) + x379*(1.0*grad_2_gt3[pp]*x10*x13 - x28*x62 - x28*x63 + x31*(1.0*gt4[pp]*x248*x36 + x35)) + x381*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x15*x43 - x172*x28 + x31*(1.0*gt4[pp]*x284*x36 + x380));
            double x383 = x185*x59;
            double x384 = 0.25*grad_1_gt5[pp]*x170 + x149*x175;
            double x385 = -x72*x77;
            double x386 = 0.25*grad_1_gt0[pp]*x170 + x162*x352;
            double x387 = x191*x94;
            double x388 = 0.25*grad_2_gt0[pp]*x56;
            double x389 = 0.5*x170*x85 - x175*x82;
            double x390 = x149*x77 + x260;
            double x391 = x185*x345 + x350;
            double x392 = -x60*x64;
            double x393 = x355 + x392;
            double x394 = x185*x322;
            double x395 = 0.5*grad_0_gt0[pp]*x188;
            double x396 = x157*x185 + x395;
            double x397 = x123*x47;
            double x398 = 0.5*grad_1_gt0[pp]*x175 + x123*x25;
            double x399 = x123*x43 + x162*x73;
            double x400 = 0.5*grad_2_gt5[pp]*x96;
            double x401 = x400 + x60*(x159 + x54);
            double x402 = 0.25*grad_0_gt0[pp]*x186;
            double x403 = x311 + x402;
            double x404 = x191*x352;
            double x405 = x148*x173;
            double x406 = x162*x85 - 0.5*x170*x82;
            double x407 = x322*x64;
            double x408 = 0.5*grad_1_gt5[pp]*x96;
            double x409 = x408 + 0.25*x43*x56;
            double x410 = x228 + x357;
            double x411 = 0.25*x370;
            double x412 = grad_2_gt0[pp]*x64;
            double x413 = grad_0_gt3[pp]*x170;
            double x414 = grad_1_gt0[pp]*x173;
            double x415 = x43*x64;
            double x416 = x17*x376;
            double x417 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x243 + 1.0*grad2_0_2_gt2[pp]*x10*x144 + 2.0*grad2_1_1_gt2[pp]*x10*x17 + grad2_1_2_gt2[pp]*x241 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x211*x51 + 2.0*grad_1_gt2[pp]*x207*x51 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x238 + 2.0*grad_2_gt2[pp]*x209*x51 + 1.0*gt2[pp]*x10*x26*x283 - x183*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x36*(x37*x47 + x46 + x48) + 0.5*grad_1_chi[pp]*x36*(grad_0_gt5[pp]*x247 + grad_2_gt0[pp]*x37 + x17*x47) + 0.5*grad_2_chi[pp]*x36*(x158 + x247*x47 + x55));
            double x418 = 2.0*grad_0_alpha[pp];
            double x419 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x26*x30 + x170) + x379*(1.0*x10*x13*x47 - x28*x54 - x28*x55 + x31*(1.0*gt2[pp]*x248*x36 + x29)) + x418*(1.0*x10*x15*x47 - x184*x28 - x28*x48 + x31*(1.0*gt2[pp]*x36*x38 + x380));
            double x420 = 0.25*x374;
            double x421 = 0.25*grad_1_gt5[pp]*x64;
            double x422 = x306*x60;
            double x423 = x111*x177 + x124;
            double x424 = x121 + x289;
            double x425 = 0.25*grad_2_gt3[pp]*x56 + x363;
            double x426 = x131*x185;
            double x427 = grad_0_gt5[pp]*x182;
            double x428 = grad_2_gt0[pp]*x186;
            double x429 = x185*x47 + x428;
            double x430 = x20*x376;
            double x431 = grad_1_gt5[pp]*x120;
            double x432 = grad_2_gt3[pp]*x170;
            double x433 = x270 + x432;
            double x434 = x314 + x413;
            double x435 = -x120*x58;
            double x436 = x56*x59;
            double x437 = x311 + x312;
            double x438 = x149*x191 + x402;
            double x439 = x157*x64 + x408;
            double x440 = 0.25*x415;
            double x441 = x354 + x392;
            double x442 = x191*x91;
            double x443 = x111*x96 + x157*x68;
            double x444 = -x130 - x152*x75;
            double x445 = x149*x177;
            double x446 = x143 + x297;
            double x447 = x138*x182;
            double x448 = x312 + x402;
            double x449 = x111*x191;
            double x450 = -x153 - x75*x96;
            double x451 = 0.25*x65 - 0.25*x66 - 0.25*x67;
            double x452 = x25*x451;
            double x453 = x138*x68 + x168;
            double x454 = x148*x182;
            double x455 = x146*x182 + x169;
            double x456 = 0.5*grad_2_gt3[pp]*x96 + x43*x451;
            double x457 = x131*x182;
            double x458 = 0.25*grad_2_gt3[pp]*x68 + x217;
            double x459 = -x212;
            double x460 = 1.0*x52;
            double x461 = 2.0*grad_0_gt1[pp]*x211*x51 + 2.0*grad_1_gt1[pp]*x207*x51 + 2.0*grad_2_gt1[pp]*x209*x51 + 1.0*gt1[pp]*x10*x26*x283 - x183*(0.5*grad_0_chi[pp]*x36*(grad_0_gt3[pp]*x37 + x99) + 0.5*grad_1_chi[pp]*x36*(grad_1_gt0[pp]*x37 + x247*x25 + x32) + 0.5*grad_2_chi[pp]*x36*(grad_0_gt3[pp]*x247 + x104) + x179);
            double x462 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x26*x27 + 2.0*x65 - 2.0*x66 - 2.0*x67) + x381*(x31*(1.0*gt1[pp]*x284*x36 + x29) + x33) + x418*(1.0*grad_0_gt3[pp]*x10*x15 - x180*x28 - x181*x28 + x39);
            _3380[pp] = At0[pp]*grad_1_beta0[pp] + 1.0*At1[pp]*grad_0_beta0[pp]*x0 + 1.0*At1[pp]*grad_1_beta1[pp]*x0 - 0.66666666666666663*At1[pp]*grad_2_beta2[pp] + At2[pp]*grad_1_beta2[pp] + At3[pp]*grad_0_beta1[pp] + At4[pp]*grad_0_beta2[pp] - alpha[pp]*(2.0*At0[pp]*x10*(At3[pp]*x15 - At4[pp]*x20 + x1*x23) + 2.0*At1[pp]*x10*(At1[pp]*x15 - At3[pp]*x17 + At4[pp]*x13) + 2.0*At2[pp]*x10*(-At1[pp]*x20 + At3[pp]*x13 - At4[pp]*x21) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt1[pp]*x97*(-1.0*x13*x186 + x142*x17 - 1.0*x15*x182 + x185*x20 + x188*x21 + x191*x23) - grad_1_gt1[pp]*x97*(-1.0*x120*x15 - 1.0*x13*x173 + x17*x177 + x170*x20 + x175*x21 + x178) - grad_2_gt1[pp]*x97*(-1.0*x13*x64 - 1.0*x15*x68 + x17*x86 + x20*x56 + x21*x77 + x23*x96) - gt1[pp]*x10*x31*(2.0*grad_0_chi[pp]*x10*x211 + 2.0*grad_1_chi[pp]*x10*x207 + 2.0*grad_2_chi[pp]*x10*x209 + x195 + x197 + x199 - x200*x202 + x203*x204 - x205) + x103*(0.25*grad_0_gt0[pp]*x100 + 0.5*grad_1_gt0[pp]*x102 + x102*x91) + x103*(0.25*grad_2_gt0[pp]*x105 + x107*x108 + x107*x111) - x113*(grad_0_gt3[pp]*x102 + grad_1_gt0[pp]*x100) + x127*(x119*(x109 - x110 - x114) + x125) + x127*(-x100*x138 + x132*x50 + x143) - x127*(-x129*x56 + x130 + 0.5*x68*x75) + x144*x51*(-x151 + x153 + x75*x96) + x144*x51*(0.25*grad_0_gt0[pp]*x45 + x102*x149 + x148*x50) + x144*x51*(0.25*grad_2_gt0[pp]*x100 + x102*x111 + x146*x50) + x144*x51*(x107*x73 + x138*x160 + x156*x157) + x166*(-x119*x90 + x164) + x166*(x100*(-x145 + x146) + x102*x82 + x169) - x166*(x107*x84 + x167*x25 + x167*x43) + x166*(-x107*x85 + x167*(x24 + x42) + x168) - x183*(0.5*grad_0_chi[pp]*x10*x182 + 0.5*grad_1_chi[pp]*x10*x120 + 0.5*grad_2_chi[pp]*x10*x68 + x179) + x213*(-0.5*grad_1_gt3[pp]*x120 + x212) - x213*(0.25*grad_2_gt3[pp]*x216 + x129*x216 + x217) - x213*(x100*x132 + x100*x214 + x215) - x219*(grad_0_gt3[pp]*x50 + grad_1_gt0[pp]*x45 + x100*x43) - x219*(grad_1_gt5[pp]*x105 + grad_2_gt3[pp]*x160 + x156*x43) + x245 + x51*x53*(-x56*x57 + x56*x58 + x60*x64) + x52*(grad_2_gt0[pp]*x45 + x43*x50 + x47*x50)) - 12*grad2_0_1_alpha[pp] - 6.0*grad_0_alpha[pp]*(1.0*grad_1_gt0[pp]*x10*x23 + 1.0*x10*x20*x25 - x28*x34 - x39) + 6.0*grad_1_alpha[pp]*(x31*(1.0*gt1[pp]*x10*x30 + x29) + x33) - grad_2_alpha[pp]*x28*(-6.0*grad_0_gt3[pp]*x13 + 6.0*grad_1_gt0[pp]*x20 - 6.0*gt1[pp]*x26*x27 + 6.0*x21*x25) + 1.0*gt1[pp]*x10*(-x13*(alpha[pp]*(-x103*(x311 + x330) - x103*(0.5*grad_0_gt3[pp]*x170 + x332) + x112*(x299 + x369) + x112*(x370 + x372) + x127*(x333 + x335) + x127*(x337 + x338) + x127*(x341 + x77*x85) + x127*(x177*x73 + x335) + x127*(x188*x309 + x339) + 2.0*x13*x51*(grad_2_gt3[pp]*x77 + x252) + x166*(x357 + x358) + x166*(x358 + x361) + x166*(x359 + x360) + x166*(x362 + x364) - x213*(x304 + x366) - x213*(0.5*grad_1_gt3[pp]*x173 + x365) - x213*(x305 + x367 + x73*x86) - x223*(0.5*x272 + x326) - x223*(x267 + x327 + x73*x77) + x224*(1.0*x261 + x325) - x229*(x260 + x347) - x229*(x274 + x348) - x229*(x342 + x344) - x229*(x344 + x346) - x229*(x349 + x351) - x229*(x353 + x356) - x377*(x150 + x375) + x378) + x382) - x13*(alpha[pp]*(-x103*(x312 + x330) - x103*(x420 + x68*x70) + x127*(x337 + x339) + x127*(x341 + x421) + x127*(-x142*x72 + x338) + x127*(x340 + x421 + x77*x84) + x127*(x177*x281 + x333 + x334) + 2.0*x13*x51*(grad_1_gt5[pp]*x177 + x286) + x166*(x295 + x364) + x166*(x295 + x425) + x166*(x302 + x360) + x166*(x357 + x423) + x166*(x361 + x424) + x166*(x143 + x411 + x426) - x213*(1.0*x294 + x367) - x213*(0.5*x296 + x366) - x213*(x177*x84 + x293 + x365) - x223*(0.5*x263 + x327) + x224*(x277 + x326) + x224*(0.5*grad_2_gt3[pp]*x175 + x276 + x325) - x229*(x259 + x356) - x229*(x347 + x355) - x229*(x348 + x422) + x230*(x343 + x346 + x435) - x377*(x331 + x434) + x378 - x430*(x427 + x429) - x430*(x431 + x433)) + x382) - x15*(alpha[pp]*(-x103*(0.5*x319 + x443) - x103*(0.5*grad_1_gt0[pp]*x191 + x317 + x442) + x127*(x125 + x445) + x127*(x362 + x444) + x127*(x143 + x359 + x447) + 2.0*x15*x51*(grad_0_gt3[pp]*x191 + grad_1_gt0[pp]*x182) + x166*(x452 + x456) + x166*(x453 + x85*x96) + x166*(0.5*grad_1_gt0[pp]*x177 + x164) + x166*(x169 + x191*x309 + x454) - x213*(x303 + x458) - x213*(0.5*grad_1_gt3[pp]*x120 + x459) - x213*(x215 + x307 + x457) + x218*(x301 + x372) + x218*(x369 + x415) + x224*(x260 + x441) - x229*(x151 + x450) - x229*(x328 + x438) - x229*(x420 + x439) - x229*(x437 + x449) + x245 - x460*(x273 + x429) + x461) + x462) + x17*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x242 + 1.0*grad2_0_2_gt3[pp]*x10*x144 + 2.0*grad2_1_1_gt3[pp]*x10*x17 - grad2_1_2_gt3[pp]*x240 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 2.0*grad_0_gt3[pp]*x211*x51 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x206*x254 + 2.0*grad_1_gt3[pp]*x207*x51 + 2.0*grad_2_gt3[pp]*x209*x51 + 1.0*gt3[pp]*x10*x26*x283 - x103*x182*(x147 + x89) - x103*x68*(x137 + x256) + x113*(grad_1_gt3[pp]*x120 + x291) + x113*(grad_2_gt3[pp]*x68 + x298) + x126*x51*(x305 - 2*x75*x86) + x126*x51*(x142*x47 + x304) + x127*(1.0*x290 + x293) + 2.0*x13*x51*(grad_0_gt3[pp]*x186 + x296) + 2.0*x13*x51*(grad_1_gt3[pp]*x173 + x290) + 2.0*x13*x51*(grad_2_gt3[pp]*x64 + x294) - x142*x213*(x80 + x81) + 2.0*x15*x51*(grad_0_gt3[pp]*x182 + grad_1_gt0[pp]*x142) + x165*x51*(x303 + x47*x86) + x165*x51*(2*x142*x91 + x307) + x166*(1.0*x291 + x292) - x183*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x36*(grad_1_gt3[pp]*x308 + x141 + x23*x309) + 1.0*grad_1_chi[pp]*x36*(x116 + x247*x85 + x309*x37) + 1.0*grad_2_chi[pp]*x36*(grad_1_gt3[pp]*x280 + x20*x309 + x21*x85)) - x186*x223*(x133 + x136 + x288) - x192*x237 - x213*x86*(x83 + x84) - x223*x64*(-x57 + x74) - x229*(x121 + x173*x80) - x229*(x300 - 1.0*x68*x75) - x229*(0.5*grad_2_gt3[pp]*x120 + x289) - x229*(x111*x182 + x297) - x229*(x111*x64 + x295) - x229*(x186*x91 + x302) - x251*x285 - x286*x287) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x246*x26 + x142) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x85 + 1.0*x10*x176 - x117*x28 + x31*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x284*x36)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x26*x27 + x86)) + x20*(alpha[pp]*(-x103*(1.0*x316 + x388) - x103*(0.5*grad_2_gt0[pp]*x191 + x318 + x387) + x127*(x260 + x393) + x127*(x355 + x390) + x127*(x389 + x435) + x127*(x391 + x422) + x166*(x313 + x409) + x166*(x313 + x439) + x166*(x315 + x406) + x166*(x329 + x438) + x166*(x404 + x437) + x166*(x231 + x233 + x332) - x213*(x121 + x410) - x213*(0.5*grad_1_gt5[pp]*x68 + x440) + x218*(x225 + x431 + x432) + x218*(x273 + x427 + x428) + x220*(x111*x162 + x386) - x223*(0.5*grad_2_gt0[pp]*x188 + x279 + x383) + x224*(x275 + x384) + x224*(0.5*grad_2_gt5[pp]*x56 + x385) - x229*(x401 + x436) - x229*(0.5*grad_2_gt0[pp]*x77 + x400 + x436) - x229*(x174*x191 + x394 + x395) + x230*(x397 + x399) + x230*(x162*x281 + x398) - x266*(grad_0_gt5[pp]*x191 + grad_2_gt0[pp]*x185) - x416*(x301 + x370 + x371) + x417) + x419) + x20*(alpha[pp]*(-x103*(x320 + x386) - x103*(0.5*grad_0_gt0[pp]*x185 + x387) - x103*(x324 + x388 + x70*x96) + x112*(x150 + x373 + x412) + x112*(x331 + x413 + x414) + x127*(x259 + x390) + x127*(x269 + x351) + x127*(x269 + x391) + x127*(x271 + x389) + x127*(x353 + x393) + x127*(x226 + x342 + x343) + x166*(x329 + x403) + x166*(x403 + x404) + x166*(x405 + x406) + x166*(x407 + x409) - x213*(x289 + x410) - x213*(0.5*grad_1_gt0[pp]*x186 + x411) - x223*(x111*x175 + x384) - x223*(x268 + x385 + x70*x77) + x224*(1.0*grad_2_gt0[pp]*x188 + x383) - x229*(x394 + x396) - x229*(x397 + x398) - x229*(x401 + x77*x94) - x229*(x175*x91 + x399) - x229*(x191*x70 + x396) - x266*(grad_2_gt0[pp]*x77 + x249) - x416*(x299 + x368 + x415) + x417) + x419) + x21*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x242 + 1.0*grad2_0_2_gt5[pp]*x10*x144 + 2.0*grad2_1_1_gt5[pp]*x10*x17 - grad2_1_2_gt5[pp]*x240 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 2.0*grad_0_gt5[pp]*x211*x51 + 2.0*grad_1_gt5[pp]*x207*x51 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x208*x254 + 2.0*grad_2_gt5[pp]*x209*x51 + 1.0*gt5[pp]*x10*x26*x283 - x103*x170*(x135 + x256 + x257) - x103*x185*(x255 + x92) + x126*x51*(2*x175*x85 + x276) + x126*x51*(x188*x25 + x277) + x127*(1.0*x264 + x267) + 2.0*x13*x51*(x263 + x264) + 2.0*x13*x51*(grad_0_gt5[pp]*x186 + x272) + 2.0*x13*x51*(grad_1_gt5[pp]*x173 + x261) + x165*x51*(x170*x85 + x271) + x165*x51*(x186*x94 + x274) + x166*(x260 + x64*x70) + x166*(0.5*grad_1_gt5[pp]*x56 + x259) + x166*(x108*x173 + x262) + x166*(x108*x185 + x269) - x173*x213*(x128 + x83) - x175*x223*(x73 + x74) - x183*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x36*(x174*x23 + x187 + x281*x37) + 1.0*grad_1_chi[pp]*x36*(grad_2_gt5[pp]*x280 + x17*x281 + x174*x37) + 1.0*grad_2_chi[pp]*x36*(x174*x20 + x247*x281 + x69)) - x186*x213*(x133 + x257 + x258) - x188*x223*(x70 + x71) - x198*x237 - x229*(1.0*x265 + x268) - x229*(x175*x25 + x275) - x229*(x188*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp]) + x279) - x249*x251 - x252*x253 - x266*(grad_0_gt5[pp]*x185 + grad_2_gt0[pp]*x188) - x266*(grad_1_gt5[pp]*x170 + x175*x47) - x266*(grad_2_gt5[pp]*x56 + x265)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x246*x26 + x188) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x26*x30 + x175) + 4*grad_2_alpha[pp]*(1.0*x10*x20*x72 - x10*x69 - x28*x76 + x31*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x248*x36))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x242 + 1.0*grad2_0_2_gt0[pp]*x10*x144 + 2.0*grad2_1_1_gt0[pp]*x10*x17 - grad2_1_2_gt0[pp]*x240 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x210*x254 + 2.0*grad_0_gt0[pp]*x211*x51 - grad_1_gt0[pp]*x182*x253 + 2.0*grad_1_gt0[pp]*x207*x51 - grad_2_gt0[pp]*x185*x287 + 2.0*grad_2_gt0[pp]*x209*x51 + 1.0*gt0[pp]*x10*x26*x283 - x103*x162*(x89 + x90) - x103*x96*(x92 + x93) + x113*(grad_0_gt0[pp]*x182 + grad_1_gt0[pp]*x191) + x113*(grad_1_gt0[pp]*x120 + x222) + x113*(grad_2_gt0[pp]*x68 + x319) - x120*x213*(x214 + x81) + x127*(x151 - 1.0*x68*x72) + x127*(x313 + 0.5*x43*x56) + x127*(0.5*grad_1_gt0[pp]*x185 + x312) + x127*(0.5*grad_2_gt0[pp]*x182 + x311) + x127*(0.5*x120*x43 + x232) + x127*(-1.0*x170*x82 + x315) + x165*x51*(x323 + x43*x96) + x165*x51*(-2*x162*x82 + x321) + x166*(1.0*grad_1_gt0[pp]*x191 + x317) - x170*x223*(x135 + x288 + x310) - x183*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x36*(x101 + x37*x91) + 1.0*grad_1_chi[pp]*x36*(grad_0_gt0[pp]*x308 + x161 + x247*x94) + 1.0*grad_2_chi[pp]*x36*(x106 + x247*x91)) - x196*x237 - x213*x68*(x134 + x258 + x310) - x223*x56*(-x59 + x71) - x229*(x324 + x96*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp])) - x229*(1.0*grad_2_gt0[pp]*x191 + x318) - x229*(x162*x43 + x320) - x266*(grad_0_gt0[pp]*x185 + grad_2_gt0[pp]*x191) - x266*(grad_1_gt0[pp]*x170 + x162*x47) - x266*(grad_2_gt0[pp]*x56 + x316)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x15*x91 - x10*x189 - x190*x28 + x31*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x36*x38)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x26*x30 + x162) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x26*x27 + x96)) + x37*(alpha[pp]*(-x103*(x323 + x443) - x103*(0.5*grad_0_gt0[pp]*x182 + x442) - x103*(x162*x80 + x221 + x321) + x113*(grad_1_gt0[pp]*x177 + x285) + x127*(x228 + x423) + x127*(x300 + x444) + x127*(x424 + x445) + x127*(x425 + x440) + x127*(x426 + x446) + x127*(x446 + x447) + x166*(x452 + x453) + x166*(x454 + x455) + x166*(x456 + x86*x94) + x166*(x191*x80 + x455) + x166*(x163 + x177*x91 + x235) - x213*(0.5*x298 + x458) - x213*(1.0*grad_1_gt0[pp]*x142 + x457) - x213*(x177*x80 + x292 + x459) - x223*(0.5*grad_2_gt0[pp]*x186 + x349) + x224*(x259 + x441) - x229*(x328 + x448) - x229*(x407 + x450) - x229*(x448 + x449) - x229*(x233 + x236 + x405) + x244 - x430*(x375 + x412) - x430*(x414 + x434) - x460*(x225 + x433) + x461) + x462)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At4[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt3[pp]*gt5[pp];
            double x6 = gt0[pp]*x5;
            double x7 = gt1[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt2[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = gt2[pp]*gt4[pp];
            double x16 = x14 - x15;
            double x17 = gt0[pp]*gt5[pp];
            double x18 = x17 - x4;
            double x19 = gt2[pp]*gt3[pp];
            double x20 = -x19 + x7;
            double x21 = gt0[pp]*gt3[pp];
            double x22 = x21 - x3;
            double x23 = -x2 + x5;
            double x24 = grad_1_gt5[pp]*x20;
            double x25 = grad_2_gt3[pp]*x16;
            double x26 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = 1.0/chi[pp];
            double x28 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x16 - grad_2_chi[pp]*x20;
            double x29 = 1.0*x10;
            double x30 = -grad_2_chi[pp];
            double x31 = grad_0_chi[pp]*x16 - grad_1_chi[pp]*x18 + grad_2_chi[pp]*x13;
            double x32 = 1.0*x27;
            double x33 = grad_2_gt3[pp]*x18;
            double x34 = 1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x16*x26 - x29*x33;
            double x35 = grad_2_gt3[pp]*x13;
            double x36 = -grad_1_chi[pp];
            double x37 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x38 = -x11 + x12;
            double x39 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x38 + grad_2_chi[pp]*x22;
            double x40 = x32*(1.0*gt4[pp]*x37*x39 + x36);
            double x41 = grad_0_gt3[pp]*x16;
            double x42 = -x41;
            double x43 = -grad_2_gt1[pp];
            double x44 = grad_0_gt4[pp] + grad_1_gt2[pp] + x43;
            double x45 = grad_1_gt0[pp]*x23 + x20*x44;
            double x46 = x42 + x45;
            double x47 = x23*x26 + x24;
            double x48 = -x25 + x47;
            double x49 = grad_0_gt4[pp] - grad_1_gt2[pp];
            double x50 = grad_2_gt1[pp] + x49;
            double x51 = grad_2_gt0[pp]*x23;
            double x52 = grad_0_gt5[pp]*x20;
            double x53 = -x16*x50 + x52;
            double x54 = x51 + x53;
            double x55 = pow(x9, -2);
            double x56 = x20*x55;
            double x57 = 4*x21 - 4*x3;
            double x58 = grad_1_gt5[pp]*x22;
            double x59 = x20*x26;
            double x60 = x35 - x58 - x59;
            double x61 = grad_2_gt5[pp]*x60;
            double x62 = 0.5*x61;
            double x63 = 0.5*grad_1_gt5[pp];
            double x64 = 1.0*grad_2_gt4[pp];
            double x65 = x63 - x64;
            double x66 = 0.5*grad_2_gt5[pp]*x22;
            double x67 = 0.5*grad_0_gt5[pp];
            double x68 = 1.0*grad_2_gt2[pp];
            double x69 = x67 - x68;
            double x70 = x20*x69;
            double x71 = x13*x65;
            double x72 = -x66 + x70 - x71;
            double x73 = x65*x72;
            double x74 = 0.25*grad_0_gt5[pp];
            double x75 = -x74;
            double x76 = -0.5*grad_2_gt2[pp] + x74;
            double x77 = 0.5*grad_0_gt4[pp];
            double x78 = 0.5*grad_2_gt1[pp];
            double x79 = (-0.5)*grad_1_gt2[pp] + x77 + x78;
            double x80 = -0.5*x19 + 0.5*x7;
            double x81 = grad_2_gt5[pp]*x80;
            double x82 = x16*x65;
            double x83 = -x23*x69 + x81 + x82;
            double x84 = x55*x57;
            double x85 = grad_2_gt0[pp]*x23;
            double x86 = x16*x50 - x52 - x85;
            double x87 = -x23*x26 - x24 + x25;
            double x88 = grad_1_gt0[pp]*x23;
            double x89 = x20*x44;
            double x90 = x41 - x88 - x89;
            double x91 = x23*x69 - x81 - x82;
            double x92 = 0.5*x15;
            double x93 = 0.5*x14 - x92;
            double x94 = 0.5*grad_0_gt3[pp];
            double x95 = 1.0*grad_1_gt1[pp];
            double x96 = x94 - x95;
            double x97 = 1.0*grad_1_gt4[pp];
            double x98 = 0.5*grad_2_gt3[pp];
            double x99 = x97 - x98;
            double x100 = x20*x99;
            double x101 = grad_1_gt3[pp]*x93 - x100 + x23*x96;
            double x102 = 0.5*grad_0_gt0[pp]*x23;
            double x103 = 1.0*grad_0_gt1[pp];
            double x104 = 0.5*grad_1_gt0[pp];
            double x105 = x103 - x104;
            double x106 = 1.0*grad_0_gt2[pp];
            double x107 = 0.5*grad_2_gt0[pp];
            double x108 = x106 - x107;
            double x109 = x108*x20;
            double x110 = -x102 + x105*x16 - x109;
            double x111 = 2.0*x55;
            double x112 = grad_0_gt3[pp]*x13;
            double x113 = grad_1_gt0[pp]*x20 + x22*x44;
            double x114 = -x112 + x113;
            double x115 = 0.25*grad_0_gt4[pp];
            double x116 = 0.25*grad_2_gt1[pp];
            double x117 = 0.25*grad_1_gt2[pp];
            double x118 = -x117;
            double x119 = x116 + x118;
            double x120 = x115 + x119;
            double x121 = grad_2_gt0[pp]*x20;
            double x122 = x13*x50;
            double x123 = grad_0_gt5[pp]*x22;
            double x124 = -x122 + x123;
            double x125 = x121 + x124;
            double x126 = x55*(-4*x2 + 4*x5);
            double x127 = 0.5*grad_0_gt1[pp];
            double x128 = 0.25*grad_1_gt0[pp];
            double x129 = -x128;
            double x130 = x127 + x129;
            double x131 = 0.5*grad_0_gt2[pp];
            double x132 = 0.25*grad_2_gt0[pp];
            double x133 = -x132;
            double x134 = x131 + x133;
            double x135 = 0.5*grad_1_gt3[pp];
            double x136 = x135*x18;
            double x137 = x16*x96;
            double x138 = x13*x99;
            double x139 = x136 + x137 - x138;
            double x140 = -0.25*grad_2_gt3[pp];
            double x141 = 0.5*grad_1_gt4[pp] + x140;
            double x142 = grad_1_gt5[pp]*x13;
            double x143 = x142 + x16*x26 - x33;
            double x144 = 0.5*x12;
            double x145 = 0.5*x11 - x144;
            double x146 = -x67 + x68;
            double x147 = grad_2_gt5[pp]*x145 + x146*x16 + x18*x65;
            double x148 = 0.5*grad_1_gt3[pp]*x147;
            double x149 = x141*x143 + x148;
            double x150 = 4*x11 - 4*x12;
            double x151 = x150*x55;
            double x152 = -x98;
            double x153 = x66 - x70 + x71;
            double x154 = 0.25*grad_1_gt5[pp];
            double x155 = x20*x26;
            double x156 = -x35 + x58;
            double x157 = x155 + x156;
            double x158 = grad_1_gt3[pp]*x145 + x20*x96 - x22*x99;
            double x159 = 0.5*grad_2_gt5[pp]*x158;
            double x160 = -x154*x157 + x159;
            double x161 = (-0.5)*grad_2_gt4[pp] + x154;
            double x162 = 0.25*x24;
            double x163 = 0.25*x25;
            double x164 = x162 - x163 + 0.25*x23*x26;
            double x165 = x101*x69;
            double x166 = x101*x67;
            double x167 = x157*x74;
            double x168 = -4*x19 + 4*x7;
            double x169 = x168*x55;
            double x170 = grad_2_gt0[pp]*x20;
            double x171 = -x170;
            double x172 = x158*x67;
            double x173 = -x114*x154 + x172;
            double x174 = 4*x14 - 4*x15;
            double x175 = x174*x55;
            double x176 = -x77;
            double x177 = 0.5*grad_1_gt2[pp];
            double x178 = 0.25*grad_0_gt3[pp];
            double x179 = x143*x178;
            double x180 = grad_0_gt3[pp]*x18;
            double x181 = grad_1_gt0[pp]*x16 + x13*x44 - x180;
            double x182 = 0.25*grad_2_gt3[pp]*x181;
            double x183 = x179 + x182;
            double x184 = -x116;
            double x185 = -x115;
            double x186 = x117 + x185;
            double x187 = -x178;
            double x188 = 0.25*x46;
            double x189 = 0.5*grad_2_gt0[pp]*x101;
            double x190 = x101*x108;
            double x191 = x141*x181;
            double x192 = x18*x50;
            double x193 = 0.25*grad_2_gt0[pp]*x16 + x13*x74 - 0.25*x192;
            double x194 = grad_1_gt3[pp]*x193;
            double x195 = x191 + x194;
            double x196 = -grad2_1_2_chi[pp];
            double x197 = 2.0*x27;
            double x198 = -x123 + x13*x50 + x171;
            double x199 = grad_1_gt0[pp]*x20;
            double x200 = x22*x44;
            double x201 = x112 - x199 - x200;
            double x202 = grad_0_gt0[pp]*x80;
            double x203 = x108*x22;
            double x204 = x105*x13 - x202 - x203;
            double x205 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x16 - x192;
            double x206 = -x136;
            double x207 = -x137 + x138 + x206;
            double x208 = x105*x18;
            double x209 = grad_0_gt0[pp]*x93 + x108*x13 - x208;
            double x210 = x209*x23;
            double x211 = pow(grad_1_chi[pp], 2);
            double x212 = 3.0*x27;
            double x213 = -x212;
            double x214 = x18*(2*grad2_1_1_chi[pp] + x211*x213);
            double x215 = pow(grad_0_chi[pp], 2);
            double x216 = x23*(2*grad2_0_0_chi[pp] - 3.0*x215*x27);
            double x217 = pow(grad_2_chi[pp], 2);
            double x218 = x22*(2*grad2_2_2_chi[pp] - x212*x217);
            double x219 = 2*x14 - 2*x15;
            double x220 = grad_0_chi[pp]*x212;
            double x221 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x220;
            double x222 = -2*x19 + x8;
            double x223 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x220;
            double x224 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x213)*(2*x11 - 2*x12);
            double x225 = x18*x207;
            double x226 = x13*x143 - x147*x22 + x16*x181 - 1.0*x20*x205 - x210 - x225;
            double x227 = x22*x72;
            double x228 = x13*x60 - x158*x18 + x16*x201 - 1.0*x198*x20 - x204*x23 - x227;
            double x229 = x110*x23;
            double x230 = -x101*x18 + x13*x87 + x16*x90 - 1.0*x20*x86 - x22*x91 - x229;
            double x231 = grad_1_gt5[pp]*x158;
            double x232 = 1.0*x231;
            double x233 = x55*(4*x17 - 4*x4);
            double x234 = (-0.5)*grad_2_gt1[pp] + x177 + x77;
            double x235 = x101*x234;
            double x236 = x101*x26;
            double x237 = x235 + 0.5*x236;
            double x238 = 0.25*grad_1_gt3[pp]*x143;
            double x239 = grad_2_gt3[pp]*x143;
            double x240 = 1.0*x56;
            double x241 = grad_1_gt5[pp]*x181;
            double x242 = x143*x50;
            double x243 = grad_2_gt3[pp]*x205;
            double x244 = x242 + x243;
            double x245 = x23*x55;
            double x246 = 1.0*x245;
            double x247 = x181*x44;
            double x248 = x181*x50;
            double x249 = grad_0_gt3[pp]*x205;
            double x250 = x248 + x249;
            double x251 = -x84;
            double x252 = 0.25*grad_1_gt5[pp]*x143;
            double x253 = -x142 - x16*x26 + x33;
            double x254 = x161*x253;
            double x255 = -x169;
            double x256 = -x161*x181;
            double x257 = 0.25*x44;
            double x258 = x147*x94;
            double x259 = x143*x257 + x258;
            double x260 = pow(chi[pp], -2);
            double x261 = 4.0*x10;
            double x262 = x13*x261;
            double x263 = -x262;
            double x264 = x16*x261;
            double x265 = -x264;
            double x266 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x265 + 1.0*grad2_0_2_gt4[pp]*x10*x168 + 2.0*grad2_1_1_gt4[pp]*x10*x18 + grad2_1_2_gt4[pp]*x263 + 2.0*grad2_2_2_gt4[pp]*x10*x22 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x260 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp];
            double x267 = -x240*(x241 + x244) - x246*(x247 + x250) + x251*(0.5*grad_2_gt3[pp]*x147 + x252 + x254) + x255*(x256 + x259) + x266;
            double x268 = grad_0_gt5[pp]*x198;
            double x269 = 3.0*x245;
            double x270 = grad_1_gt5[pp]*x60;
            double x271 = 3.0*x55;
            double x272 = x18*x271;
            double x273 = 6.0*x55;
            double x274 = 0.75*grad_0_gt4[pp];
            double x275 = 0.75*grad_1_gt2[pp];
            double x276 = x60*x74;
            double x277 = 0.25*grad_1_gt5[pp]*x198;
            double x278 = grad_2_gt3[pp]*x147;
            double x279 = 0.25*grad_2_gt3[pp]*x205;
            double x280 = 0.5*x44;
            double x281 = grad_1_gt5[pp]*x72;
            double x282 = grad_0_gt5[pp]*x72;
            double x283 = 2.0*x56;
            double x284 = 0.25*grad_2_gt5[pp]*x60;
            double x285 = 0.25*grad_2_gt5[pp]*x198;
            double x286 = x132*x87;
            double x287 = 0.25*x242;
            double x288 = x26*x91;
            double x289 = x26*x86;
            double x290 = 0.25*x289;
            double x291 = -x161*x205;
            double x292 = -x76*x87;
            double x293 = x53 + x85;
            double x294 = x293*x76;
            double x295 = (-0.5)*gt0[pp]*gt4[pp] + x144;
            double x296 = -x14 + x15;
            double x297 = -x63 + x64;
            double x298 = 2.0*x10;
            double x299 = -grad_0_chi[pp]*x230*x298 - grad_1_chi[pp]*x226*x298 - grad_2_chi[pp]*x228*x298 - x214 - x216 - x218 + x219*x221 - x222*x223 + x224;
            double x300 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x22;
            double x301 = grad_0_chi[pp]*x296 + grad_1_chi[pp]*x18 + grad_2_chi[pp]*x38;
            double x302 = grad_0_gt3[pp]*x181;
            double x303 = x22*x271;
            double x304 = 0.75*grad_2_gt1[pp];
            double x305 = grad_2_gt3[pp]*x207;
            double x306 = grad_0_gt3[pp]*x207;
            double x307 = x16*x55;
            double x308 = 2.0*x307;
            double x309 = 0.25*grad_1_gt3[pp]*x181;
            double x310 = 0.25*grad_1_gt5[pp]*x201;
            double x311 = x128*x87;
            double x312 = x158*x44;
            double x313 = x44*x60;
            double x314 = 0.25*x313;
            double x315 = x26*x90;
            double x316 = 0.25*x315;
            double x317 = x141*x201;
            double x318 = -0.5*grad_1_gt1[pp] + x178;
            double x319 = -x318*x87;
            double x320 = x141*x60;
            double x321 = x42 + x88 + x89;
            double x322 = x318*x321;
            double x323 = (-0.5)*gt1[pp]*gt5[pp] + x92;
            double x324 = -x94 + x95;
            double x325 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x296 + grad_2_chi[pp]*x20;
            double x326 = 0.25*grad_0_gt3[pp]*x205;
            double x327 = x128*x86;
            double x328 = x132*x90;
            double x329 = x201*x74;
            double x330 = grad_0_gt3[pp]*x209;
            double x331 = 0.25*x248;
            double x332 = x198*x44;
            double x333 = 0.25*x332;
            double x334 = grad_0_gt5[pp]*x204;
            double x335 = 0.25*grad_0_gt0[pp]*x90;
            double x336 = 0.25*grad_0_gt0[pp]*x86;
            double x337 = x204*x44;
            double x338 = x130*x205;
            double x339 = x130*x181;
            double x340 = x134*x201;
            double x341 = x134*x198;
            double x342 = x74*x87 + x79*x91;
            double x343 = -x73;
            double x344 = x130*x86;
            double x345 = x134*x90;
            double x346 = x344 + x345;
            double x347 = 0.25*x247;
            double x348 = 0.25*grad_2_gt3[pp]*x143;
            double x349 = -x162 + x163 - 0.25*x23*x26;
            double x350 = x26*x349;
            double x351 = x349*x44 + x91*x94;
            double x352 = x120*x87 + x166;
            double x353 = x159 + x161*(x156 + x59);
            double x354 = 0.25*grad_1_gt5[pp]*x181 + x258;
            double x355 = x276 + x72*x79;
            double x356 = x105*x91 + x134*x87;
            double x357 = x120*x86;
            double x358 = 0.5*grad_1_gt0[pp]*x91;
            double x359 = x358 + x74*x90;
            double x360 = x234*x72;
            double x361 = -x161*x198;
            double x362 = 0.25*grad_2_gt5[pp]*x201;
            double x363 = x361 + x362;
            double x364 = x293*x318;
            double x365 = x130*x87 + x190;
            double x366 = x207*x234;
            double x367 = x141*x198;
            double x368 = x120*x60 + x172;
            double x369 = x207*x99;
            double x370 = x178*x87;
            double x371 = 0.25*grad_2_gt3[pp]*x60;
            double x372 = grad_1_gt5[pp]*x201;
            double x373 = grad_2_gt3[pp]*x198 + x372;
            double x374 = x44*x90;
            double x375 = grad_1_gt0[pp]*x87;
            double x376 = grad_0_gt3[pp]*x86 + x375;
            double x377 = grad_0_gt5[pp]*x201;
            double x378 = x198*x50;
            double x379 = x377 + x378;
            double x380 = 2.0*grad_0_gt4[pp]*x230*x55 + 2.0*grad_1_gt4[pp]*x226*x55 + 2.0*grad_2_gt4[pp]*x228*x55 + 1.0*gt4[pp]*x10*x27*x299 - x197*(0.5*grad_0_chi[pp]*x37*(grad_2_gt3[pp]*x296 + x47) + 0.5*grad_1_chi[pp]*x37*(grad_1_gt5[pp]*x38 + x26*x296 + x33) + 0.5*grad_2_chi[pp]*x37*(grad_2_gt3[pp]*x38 + x155 + x58) + x196);
            double x381 = 2.0*grad_2_alpha[pp];
            double x382 = 2.0*grad_1_alpha[pp];
            double x383 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x27*x28 - 2.0*x23*x26 - 2.0*x24 + 2.0*x25) + x381*(1.0*grad_2_gt3[pp]*x10*x13 - x29*x58 - x29*x59 + x40) + x382*(x32*(1.0*gt4[pp]*x301*x37 + x30) + x34);
            double x384 = x74*x86;
            double x385 = (-0.5)*grad_0_gt4[pp] + x177 + x78;
            double x386 = 0.25*grad_1_gt5[pp]*x205 + x147*x385;
            double x387 = -x69*x72;
            double x388 = 0.25*grad_1_gt0[pp]*x205 + x209*x234;
            double x389 = x108*x110;
            double x390 = 0.25*grad_2_gt0[pp]*x198;
            double x391 = -x147*x96 + 0.5*x205*x99;
            double x392 = x277 + x385*x72;
            double x393 = x257*x86 + x358;
            double x394 = x143*x26;
            double x395 = 0.25*x394;
            double x396 = -x60*x76;
            double x397 = x362 + x396;
            double x398 = x134*x86;
            double x399 = 0.5*grad_0_gt0[pp]*x91;
            double x400 = x132*x86 + x399;
            double x401 = x193*x50;
            double x402 = 0.5*grad_1_gt0[pp]*x147 + x193*x44;
            double x403 = x193*x26 + x209*x63;
            double x404 = 0.5*grad_2_gt5[pp]*x204;
            double x405 = x404 + x76*(x124 + x170);
            double x406 = 0.25*grad_0_gt0[pp]*x87;
            double x407 = x327 + x406;
            double x408 = x110*x234;
            double x409 = x130*x143;
            double x410 = -0.5*x205*x96 + x209*x99;
            double x411 = x134*x60;
            double x412 = 0.5*grad_1_gt5[pp]*x204;
            double x413 = 0.25*x198*x26 + x412;
            double x414 = x253*x318;
            double x415 = x191 + x414;
            double x416 = 0.25*x374;
            double x417 = grad_2_gt0[pp]*x60;
            double x418 = grad_1_gt0[pp]*x143;
            double x419 = x26*x60;
            double x420 = 1.0*x55;
            double x421 = x18*x420;
            double x422 = -grad_0_chi[pp]*x260;
            double x423 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x265 + 1.0*grad2_0_2_gt2[pp]*x10*x168 + 2.0*grad2_1_1_gt2[pp]*x10*x18 + grad2_1_2_gt2[pp]*x263 + 2.0*grad2_2_2_gt2[pp]*x10*x22 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x230*x55 + 2.0*grad_1_gt2[pp]*x226*x55 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x422 + 2.0*grad_2_gt2[pp]*x228*x55 + 1.0*gt2[pp]*x10*x27*x299 - x197*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x37*(x296*x50 + x51 + x52) + 0.5*grad_1_chi[pp]*x37*(grad_0_gt5[pp]*x38 + grad_2_gt0[pp]*x296 + x18*x50) + 0.5*grad_2_chi[pp]*x37*(x121 + x123 + x38*x50));
            double x424 = -grad_0_chi[pp];
            double x425 = 2.0*grad_0_alpha[pp];
            double x426 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x27*x31 + x205) + x381*(1.0*x10*x13*x50 - x123*x29 - x170*x29 + x32*(1.0*gt2[pp]*x37*x39 + x424)) + x425*(1.0*x10*x16*x50 - x29*x52 - x29*x85 + x32*(1.0*gt2[pp]*x325*x37 + x30));
            double x427 = 0.25*x378;
            double x428 = 0.25*grad_1_gt5[pp]*x60;
            double x429 = x321*x76;
            double x430 = x207*x79;
            double x431 = 0.25*grad_2_gt3[pp]*x198 + x172;
            double x432 = x178*x86;
            double x433 = grad_0_gt5[pp]*x90;
            double x434 = grad_2_gt0[pp]*x87;
            double x435 = x434 + x50*x86;
            double x436 = x198*x74;
            double x437 = x327 + x328;
            double x438 = x110*x385 + x406;
            double x439 = x132*x60 + x412;
            double x440 = 0.25*x419;
            double x441 = x13*x55;
            double x442 = x209*x98;
            double x443 = x128*x143 + x442;
            double x444 = -x126;
            double x445 = x361 + x396;
            double x446 = x105*x110;
            double x447 = x132*x201 + x204*x79;
            double x448 = 0.25*grad_1_gt0[pp]*x181;
            double x449 = 0.5*x201;
            double x450 = -x158*x69 - x449*x65;
            double x451 = x194 + x414;
            double x452 = x207*x385;
            double x453 = x189 + x311;
            double x454 = x120*x90;
            double x455 = x328 + x406;
            double x456 = x110*x79;
            double x457 = -x204*x65 - x449*x69;
            double x458 = 0.25*x181*x26 + x442;
            double x459 = 0.25*x112 - 0.25*x199 - 0.25*x200;
            double x460 = x44*x459;
            double x461 = 0.5*grad_2_gt0[pp]*x158 + x120*x201;
            double x462 = x130*x90;
            double x463 = 0.5*grad_0_gt0[pp]*x101;
            double x464 = x128*x90 + x463;
            double x465 = 0.5*grad_2_gt3[pp]*x204 + x26*x459;
            double x466 = x135*x209;
            double x467 = x318*(-grad_1_gt0[pp]*x16 - x13*x44 + x180) + x466;
            double x468 = x178*x90;
            double x469 = 0.25*grad_2_gt3[pp]*x201 + x158*x385;
            double x470 = -x207*x96;
            double x471 = x22*x420;
            double x472 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x265 + 1.0*grad2_0_2_gt1[pp]*x10*x168 + 2.0*grad2_1_1_gt1[pp]*x10*x18 + grad2_1_2_gt1[pp]*x263 + 2.0*grad2_2_2_gt1[pp]*x10*x22 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x230*x55 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x422 + 2.0*grad_1_gt1[pp]*x226*x55 + 2.0*grad_2_gt1[pp]*x228*x55 + 1.0*gt1[pp]*x10*x27*x299 - x197*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x37*(grad_0_gt3[pp]*x296 + x45) + 0.5*grad_1_chi[pp]*x37*(grad_1_gt0[pp]*x296 + x180 + x38*x44) + 0.5*grad_2_chi[pp]*x37*(grad_0_gt3[pp]*x38 + x113));
            double x473 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x27*x300 + 2.0*x112 - 2.0*x199 - 2.0*x200) + x382*(1.0*grad_1_gt0[pp]*x10*x16 + 1.0*x10*x13*x44 - x180*x29 + x32*(1.0*gt1[pp]*x301*x37 + x424)) + x425*(1.0*grad_0_gt3[pp]*x10*x16 - x29*x88 - x29*x89 + x32*(1.0*gt1[pp]*x325*x37 + x36));
            double x474 = 0.25*grad_0_gt3[pp]*x181;
            _4000[pp] = At1[pp]*grad_2_beta0[pp] + At2[pp]*grad_1_beta0[pp] + At3[pp]*grad_2_beta1[pp] - 0.66666666666666663*At4[pp]*grad_0_beta0[pp] + 1.0*At4[pp]*grad_1_beta1[pp]*x0 + 1.0*At4[pp]*grad_2_beta2[pp]*x0 + At5[pp]*grad_1_beta2[pp] - alpha[pp]*(2.0*At1[pp]*x10*(-At2[pp]*x23 + At4[pp]*x16 - At5[pp]*x20) + 2.0*At3[pp]*x10*(At2[pp]*x16 + At5[pp]*x13 + x1*x18) + 2.0*At4[pp]*x10*(-At2[pp]*x20 + At4[pp]*x13 - At5[pp]*x22) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt4[pp]*x111*(x101*x18 + x110*x23 - 1.0*x13*x87 - 1.0*x16*x90 + x20*x86 + x22*x91) - grad_1_gt4[pp]*x111*(-1.0*x13*x143 + x147*x22 - 1.0*x16*x181 + x18*x207 + x20*x205 + x210) - grad_2_gt4[pp]*x111*(-1.0*x13*x60 + x158*x18 - 1.0*x16*x201 + x198*x20 + x204*x23 + x22*x72) - gt4[pp]*x10*x32*(2.0*grad_0_chi[pp]*x10*x230 + 2.0*grad_1_chi[pp]*x10*x226 + 2.0*grad_2_chi[pp]*x10*x228 + x214 + x216 + x218 - x219*x221 + x222*x223 - x224) + x126*(0.5*grad_0_gt5[pp]*x114 + x120*x125) + x126*(0.25*grad_2_gt0[pp]*x46 + x130*x54 + x134*x46) + 2.0*x13*x55*(-grad_1_gt5[pp]*x139 + x239) + x151*(x139*x65 + x149) + x151*(x152*x153 + x160) + x151*(x157*x161 + x160) + x151*(-x120*x48 + x164*(x43 + x49) + x166) - x151*(x164*x44 + x165 + x83*x94) + x168*x55*(0.25*grad_2_gt5[pp]*x114 + x153*x79 + x167) - x169*(-0.25*grad_2_gt5[pp]*x114 + x125*x161 - x167) - x169*(-x105*x83 + x46*x76 + x48*(-x131 + x132)) + x175*(0.25*grad_2_gt3[pp]*(x122 - x123 + x171) + x173) + x175*(x139*(x176 - x177 + x78) + x183) + x175*(x139*(x176 + x177 - x78) + x195) + x175*(x157*(x184 + x186) + x173) + x175*(x187*x54 - x188*x44 + x189) + x175*(-x188*x26 + x190 + x48*(-x127 + x128)) - x197*(0.5*grad_0_chi[pp]*x10*x87 + 0.5*grad_1_chi[pp]*x10*x143 + 0.5*grad_2_chi[pp]*x10*x60 + x196) - x233*(x140*x157 + x232) - x233*(x187*x48 + x237) - x233*(x139*x152 - x139*x99 + x238) + x267 + x55*x57*(-x62 + x73) + x56*(grad_0_gt5[pp]*x46 + grad_2_gt0[pp]*x48 + x50*x54) - x84*(x48*x75 + x48*x76 - x79*x83)) - 12*grad2_1_2_alpha[pp] - grad_0_alpha[pp]*x29*(-6.0*gt4[pp]*x27*x28 + 6.0*x23*x26 + 6.0*x24 - 6.0*x25) + 6.0*grad_1_alpha[pp]*(x32*(1.0*gt4[pp]*x10*x31 + x30) + x34) - 6.0*grad_2_alpha[pp]*(1.0*grad_1_gt5[pp]*x10*x22 + 1.0*x10*x20*x26 - x29*x35 - x40) + 1.0*gt4[pp]*x10*(-x13*(alpha[pp]*(-x126*(x328 + x346) - x126*(x201*x67 + x427) + 2.0*x13*x55*(grad_1_gt5[pp]*x207 + x239) + x151*(x149 + x207*x297) + x151*(-x165 + x351) + x151*(x350 + x352) + x151*(x353 + x428) + x151*(x159 + x428 + x72*x98) - x169*(x276 + x363) - x169*(x355 + x362) - x169*(x356 + x429) + x175*(x183 + x366) + x175*(x195 + x430) + x175*(x310 + x368) + x175*(x310 + x431) + x175*(x316 + x365) + x175*(x189 + x416 + x432) - x233*(x232 + x371) - x233*(x237 + x370) - x233*(x207*x98 + x238 + x369) - x240*(x433 + x435) + x251*(x292 + x342) + x267 + x380 - x84*(x343 + x62)) + x383) - x13*(alpha[pp]*(-x126*(x327 + x346) - x126*(0.5*grad_0_gt3[pp]*x205 + x347) + 2.0*x13*x55*(grad_2_gt3[pp]*x72 + x270) + x151*(x149 + x348) + x151*(x350 + x351) + x151*(x353 + x72*x99) + x151*(x324*x91 + x352) + x151*(x148 + x207*x63 + x348) - x169*(x259 + x279) - x169*(x277 + x355) - x169*(x279 + x354) - x169*(x290 + x356) - x169*(x357 + x359) - x169*(x360 + x363) + x175*(x179 + x195) + x175*(x364 + x365) + x175*(x367 + x368) + x175*(x179 + x194 + x366) - x233*(0.5*grad_1_gt3[pp]*x143 + x369) - x233*(x235 + x319 + x370) - x233*(x158*x63 + x320 + x371) - x246*(x332 + x379) + x251*(x252 + 1.0*x278) + x266 + x307*(x313 + x373) + x307*(x374 + x376) + x380 - x84*(0.5*x288 + x342) - x84*(x284 + x343 + x63*x72)) + x383) - x16*(alpha[pp]*(-x126*(0.5*x337 + x447) - x126*(0.5*grad_1_gt0[pp]*x110 + x335 + x446) + x151*(x182 + x451) + x151*(x367 + x450) + x151*(x182 + x194 + x452) + x151*(x189 + x364 + x454) + 2.0*x16*x55*(grad_0_gt3[pp]*x110 + grad_1_gt0[pp]*x90) - x169*(x333 + x457) - x169*(x344 + x438) - x169*(x427 + x439) - x169*(x437 + x456) + x175*(x460 + x465) + x175*(x467 + x474) + x175*(x204*x99 + x461) + x175*(0.5*grad_1_gt0[pp]*x207 + x466 + x474) + x175*(x110*x324 + x462 + x463) - x233*(x317 + x469) - x233*(0.5*grad_1_gt3[pp]*x181 + x470) - x233*(0.5*grad_1_gt0[pp]*x101 + x322 + x468) + x251*(x277 + x445) + x251*(0.5*grad_2_gt3[pp]*x205 + x395) + x255*(x326 + x443) + x255*(x326 + x458) + x441*(x315 + x376) + x441*(x373 + x419) + x444*(1.0*x330 + x448) - x471*(x289 + x435) + x472) + x473) + x18*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x264 + 1.0*grad2_0_2_gt3[pp]*x10*x168 + 2.0*grad2_1_1_gt3[pp]*x10*x18 - grad2_1_2_gt3[pp]*x262 + 2.0*grad2_2_2_gt3[pp]*x10*x22 + 2.0*grad_0_gt3[pp]*x230*x55 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x225*x273 + 2.0*grad_1_gt3[pp]*x226*x55 + 2.0*grad_2_gt3[pp]*x228*x55 + 1.0*gt3[pp]*x10*x27*x299 - x101*x233*(x94 + x95) - x126*x201*(x119 + x274) - x126*x90*(x103 + x129) + 2.0*x13*x55*(grad_0_gt3[pp]*x87 + x236) + 2.0*x13*x55*(grad_1_gt3[pp]*x143 + x305) + 2.0*x13*x55*(grad_2_gt3[pp]*x60 + x231) + x150*x55*(x101*x50 + x319) + x150*x55*(-2*x158*x65 + x320) + x151*(x238 + 1.0*x305) - x158*x233*(x97 + x98) + 2.0*x16*x55*(grad_0_gt3[pp]*x90 + grad_1_gt0[pp]*x101) - x169*(x310 + x60*x79) - x169*(x311 + x79*x90) - x169*(0.5*grad_2_gt3[pp]*x181 + x179) - x169*(x105*x87 + x316) - x169*(x143*x94 + x182) - x169*(-1.0*x201*x65 + x314) + x174*x55*(2*x101*x105 + x322) + x174*x55*(x158*x50 + x317) + x175*(1.0*x306 + x309) - x197*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x37*(grad_1_gt3[pp]*x323 + x100 + x23*x324) + 1.0*grad_1_chi[pp]*x37*(x136 + x296*x324 + x38*x99) + 1.0*grad_2_chi[pp]*x37*(grad_1_gt3[pp]*x295 + x20*x324 + x22*x99)) - x211*x260 - x239*x303 - x269*x302 + x308*(grad_1_gt3[pp]*x181 + x306) + x308*(grad_2_gt3[pp]*x201 + x312) - x60*x84*(-x154 + x64) - x84*x87*(x115 + x118 + x304)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x27*x28 + x101) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x99 + 1.0*x10*x206 - x137*x29 + x32*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x301*x37)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x27*x300 + x158)) + x20*(alpha[pp]*(-x126*(1.0*x334 + x390) - x126*(0.5*grad_2_gt0[pp]*x110 + x336 + x389) + x151*(x256 + x391) + x151*(x277 + x397) + x151*(x362 + x392) + x151*(x393 + x429) - x169*(x405 + x436) - x169*(0.5*grad_2_gt0[pp]*x72 + x404 + x436) - x169*(x110*x146 + x398 + x399) + x175*(x329 + x413) + x175*(x329 + x439) + x175*(x331 + x410) + x175*(x345 + x438) + x175*(x347 + x443) + x175*(x408 + x437) - x233*(x182 + x415) - x233*(0.5*grad_1_gt5[pp]*x201 + x440) + x251*(x291 + x386) + x251*(0.5*grad_2_gt5[pp]*x198 + x387) + x255*(x401 + x403) + x255*(x209*x297 + x402) - x283*(grad_0_gt5[pp]*x110 + grad_2_gt0[pp]*x86) - x421*(x315 + x374 + x375) + x423 + x441*(x241 + x243 + x394) + x441*(x289 + x433 + x434) + x444*(x209*x79 + x388) - x84*(0.5*grad_2_gt0[pp]*x91 + x294 + x384)) + x426) + x20*(alpha[pp]*(-x126*(x338 + x388) - x126*(0.5*grad_0_gt0[pp]*x86 + x389) - x126*(x204*x67 + x341 + x390) + x151*(x276 + x392) + x151*(x286 + x359) + x151*(x286 + x393) + x151*(x287 + x391) + x151*(x354 + x395) + x151*(x360 + x397) - x169*(x398 + x400) - x169*(x401 + x402) - x169*(x105*x147 + x403) - x169*(x108*x72 + x405) - x169*(x110*x67 + x400) + x175*(x345 + x407) + x175*(x407 + x408) + x175*(x409 + x410) + x175*(x411 + x413) - x233*(x179 + x415) - x233*(0.5*grad_1_gt0[pp]*x87 + x416) + x251*(1.0*grad_2_gt0[pp]*x91 + x384) - x283*(grad_2_gt0[pp]*x72 + x268) + x307*(x247 + x249 + x418) + x307*(x332 + x377 + x417) - x421*(x313 + x372 + x419) + x423 - x84*(x147*x79 + x386) - x84*(x285 + x387 + x67*x72)) + x426) + x22*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x264 + 1.0*grad2_0_2_gt5[pp]*x10*x168 + 2.0*grad2_1_1_gt5[pp]*x10*x18 - grad2_1_2_gt5[pp]*x262 + 2.0*grad2_2_2_gt5[pp]*x10*x22 + 2.0*grad_0_gt5[pp]*x230*x55 + 2.0*grad_1_gt5[pp]*x226*x55 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x227*x273 + 2.0*grad_2_gt5[pp]*x228*x55 + 1.0*gt5[pp]*x10*x27*x299 - x126*x205*(x117 + x184 + x274) - x126*x86*(x106 + x133) + 2.0*x13*x55*(x281 + x61) + 2.0*x13*x55*(grad_0_gt5[pp]*x87 + x288) + 2.0*x13*x55*(grad_1_gt5[pp]*x143 + x278) - x143*x233*(x140 + x97) - x147*x84*(x63 + x64) + x150*x55*(x292 + x44*x91) + x150*x55*(2*x147*x99 + x254) + x151*(1.0*x281 + x284) - x169*(1.0*x282 + x285) - x169*(x294 + x91*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp])) - x169*(x147*x44 + x291) + x174*x55*(x108*x87 + x290) + x174*x55*(x205*x99 + x287) + x175*(x277 + x60*x67) + x175*(0.5*grad_1_gt5[pp]*x198 + x276) + x175*(x143*x280 + x279) + x175*(x280*x86 + x286) - x197*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x37*(x146*x23 + x296*x297 + x81) + 1.0*grad_1_chi[pp]*x37*(grad_2_gt5[pp]*x295 + x146*x296 + x18*x297) + 1.0*grad_2_chi[pp]*x37*(x146*x20 + x297*x38 + x66)) - x217*x260 - x233*x87*(x115 + x184 + x275) - x268*x269 - x270*x272 - x283*(grad_0_gt5[pp]*x86 + grad_2_gt0[pp]*x91) - x283*(grad_1_gt5[pp]*x205 + x147*x50) - x283*(grad_2_gt5[pp]*x198 + x282) - x84*x91*(x67 + x68)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x27*x28 + x91) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x27*x31 + x147) + 4*grad_2_alpha[pp]*(1.0*x10*x20*x69 - x10*x66 - x29*x71 + x32*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x37*x39))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x264 + 1.0*grad2_0_2_gt0[pp]*x10*x168 + 2.0*grad2_1_1_gt0[pp]*x10*x18 - grad2_1_2_gt0[pp]*x262 + 2.0*grad2_2_2_gt0[pp]*x10*x22 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x229*x273 + 2.0*grad_0_gt0[pp]*x230*x55 + 2.0*grad_1_gt0[pp]*x226*x55 - grad_1_gt0[pp]*x272*x90 + 2.0*grad_2_gt0[pp]*x228*x55 - grad_2_gt0[pp]*x303*x86 + 1.0*gt0[pp]*x10*x27*x299 - x126*x204*(x106 + x107) - x126*x209*(x103 + x104) + x151*(0.5*grad_1_gt0[pp]*x86 + x328) + x151*(0.5*grad_2_gt0[pp]*x90 + x327) + x151*(0.5*x181*x26 + x326) + x151*(0.5*x198*x26 + x329) + x151*(-1.0*x201*x69 + x333) + x151*(-1.0*x205*x96 + x331) - x169*(1.0*grad_2_gt0[pp]*x110 + x336) - x169*(x204*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp]) + x341) - x169*(x209*x26 + x338) + x174*x55*(x204*x26 + x340) + x174*x55*(-2*x209*x96 + x339) + x175*(1.0*grad_1_gt0[pp]*x110 + x335) - x181*x233*(x187 + x95) - x197*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x37*(0.5*grad_0_gt0[pp]*x23 + x105*x296 + x108*x20) + 1.0*grad_1_chi[pp]*x37*(grad_0_gt0[pp]*x323 + x108*x38 + x208) + 1.0*grad_2_chi[pp]*x37*(x105*x38 + x202 + x203)) - x198*x84*(x68 + x75) - x201*x233*(x116 + x185 + x275) - x205*x84*(x186 + x304) - x215*x260 - x283*(grad_0_gt0[pp]*x86 + grad_2_gt0[pp]*x110) - x283*(grad_1_gt0[pp]*x205 + x209*x50) - x283*(grad_2_gt0[pp]*x198 + x334) + x308*(grad_0_gt0[pp]*x90 + grad_1_gt0[pp]*x110) + x308*(grad_1_gt0[pp]*x181 + x330) + x308*(grad_2_gt0[pp]*x201 + x337)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(-x10*x102 + 1.0*x10*x105*x16 - x109*x29 + x32*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x325*x37)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x27*x31 + x209) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x27*x300 + x204)) + x296*(alpha[pp]*(-x126*(x340 + x447) - x126*(0.5*grad_0_gt0[pp]*x90 + x446) - x126*(x209*x94 + x339 + x448) + x151*(x183 + x452) + x151*(x314 + x450) + x151*(x430 + x451) + x151*(x431 + x440) + x151*(x432 + x453) + x151*(x453 + x454) - x169*(x344 + x455) - x169*(x409 + x458) - x169*(x411 + x457) - x169*(x455 + x456) + x175*(x460 + x461) + x175*(x462 + x464) + x175*(x105*x207 + x467) + x175*(x108*x158 + x465) + x175*(x110*x94 + x464) - x233*(0.5*x312 + x469) - x233*(1.0*grad_1_gt0[pp]*x101 + x468) - x233*(x207*x94 + x309 + x470) - x240*(x250 + x418) - x240*(x379 + x417) + x251*(x276 + x445) + x308*(grad_1_gt0[pp]*x207 + x302) - x471*(x244 + x394) + x472 - x84*(0.5*grad_2_gt0[pp]*x87 + x357)) + x473)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At2[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt5[pp];
            double x6 = gt3[pp]*x5;
            double x7 = gt2[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt1[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x14 - x7;
            double x16 = -x4 + x5;
            double x17 = gt1[pp]*gt4[pp];
            double x18 = gt2[pp]*gt3[pp];
            double x19 = x17 - x18;
            double x20 = gt0[pp]*gt3[pp];
            double x21 = x20 - x3;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = 1.0/chi[pp];
            double x25 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x16 + grad_2_chi[pp]*x13;
            double x26 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = x16*x26;
            double x28 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x15 - x27;
            double x29 = 1.0*gt2[pp]*x24*x25 + x28;
            double x30 = x15*x26;
            double x31 = 1.0*x10;
            double x32 = -grad_2_chi[pp];
            double x33 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x34 = -x14 + x7;
            double x35 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x34 + grad_2_chi[pp]*x19;
            double x36 = 1.0*x24;
            double x37 = x36*(1.0*gt2[pp]*x33*x35 + x32);
            double x38 = x13*x26;
            double x39 = -grad_0_chi[pp];
            double x40 = -x11 + x12;
            double x41 = grad_0_chi[pp]*x19 + grad_1_chi[pp]*x40 + grad_2_chi[pp]*x21;
            double x42 = x36*(1.0*gt2[pp]*x33*x41 + x39);
            double x43 = grad_2_gt3[pp]*x15;
            double x44 = grad_1_gt5[pp]*x19;
            double x45 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x46 = x23*x45 + x44;
            double x47 = -x43 + x46;
            double x48 = grad_0_gt3[pp]*x15;
            double x49 = -x48;
            double x50 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x51 = grad_1_gt0[pp]*x23 + x19*x50;
            double x52 = x49 + x51;
            double x53 = pow(x9, -2);
            double x54 = x16*x53;
            double x55 = 4*x20 - 4*x3;
            double x56 = grad_2_gt0[pp]*x19;
            double x57 = grad_0_gt5[pp]*x21;
            double x58 = x13*x26 - x56 - x57;
            double x59 = 0.5*grad_0_gt5[pp];
            double x60 = 1.0*grad_2_gt2[pp];
            double x61 = x59 - x60;
            double x62 = 0.5*grad_2_gt5[pp];
            double x63 = x21*x62;
            double x64 = x19*x61;
            double x65 = 0.5*grad_1_gt5[pp];
            double x66 = 1.0*grad_2_gt4[pp];
            double x67 = x65 - x66;
            double x68 = x13*x67;
            double x69 = -x63 + x64 - x68;
            double x70 = x61*x69;
            double x71 = grad_0_gt5[pp]*x19;
            double x72 = grad_2_gt0[pp]*x23;
            double x73 = x30 - x71 - x72;
            double x74 = 0.25*grad_0_gt5[pp];
            double x75 = -0.5*grad_2_gt2[pp] + x74;
            double x76 = grad_2_gt0[pp]*x23;
            double x77 = -x30 + x71;
            double x78 = x76 + x77;
            double x79 = 0.5*x17 - 0.5*x18;
            double x80 = grad_2_gt5[pp]*x79;
            double x81 = x15*x67;
            double x82 = -x23*x61 + x80 + x81;
            double x83 = 0.5*grad_2_gt0[pp];
            double x84 = x53*x55;
            double x85 = grad_1_gt5[pp]*x13;
            double x86 = grad_2_gt3[pp]*x16;
            double x87 = x15*x45 + x85 - x86;
            double x88 = grad_0_gt3[pp]*x16;
            double x89 = grad_1_gt0[pp]*x15 + x13*x50 - x88;
            double x90 = 0.5*x12;
            double x91 = 0.5*x11 - x90;
            double x92 = -x59 + x60;
            double x93 = grad_2_gt5[pp]*x91 + x15*x92 + x16*x67;
            double x94 = 0.5*grad_1_gt3[pp];
            double x95 = x16*x94;
            double x96 = -x95;
            double x97 = 1.0*grad_1_gt4[pp];
            double x98 = 0.5*grad_2_gt3[pp];
            double x99 = x97 - x98;
            double x100 = 0.5*grad_0_gt3[pp];
            double x101 = 1.0*grad_1_gt1[pp];
            double x102 = x100 - x101;
            double x103 = x102*x15;
            double x104 = -x103 + x13*x99 + x96;
            double x105 = 0.5*x7;
            double x106 = -x105 + 0.5*x14;
            double x107 = 1.0*grad_0_gt2[pp];
            double x108 = x107 - x83;
            double x109 = 1.0*grad_0_gt1[pp];
            double x110 = 0.5*grad_1_gt0[pp];
            double x111 = x109 - x110;
            double x112 = x111*x16;
            double x113 = grad_0_gt0[pp]*x106 + x108*x13 - x112;
            double x114 = x113*x23;
            double x115 = 2.0*x53;
            double x116 = grad_2_gt0[pp]*x19;
            double x117 = -x38 + x57;
            double x118 = x116 + x117;
            double x119 = 0.25*grad_2_gt0[pp];
            double x120 = grad_0_gt0[pp]*x79;
            double x121 = x108*x21;
            double x122 = x120 + x121;
            double x123 = -x111*x13 + x122;
            double x124 = x53*(-4*x2 + 4*x22);
            double x125 = 0.5*grad_0_gt0[pp]*x23 + x108*x19;
            double x126 = -x111*x15 + x125;
            double x127 = 0.25*grad_1_gt5[pp];
            double x128 = (-0.5)*grad_2_gt4[pp] + x127;
            double x129 = x102*x93;
            double x130 = 4*x11 - 4*x12;
            double x131 = x130*x53;
            double x132 = grad_0_gt3[pp]*x13;
            double x133 = grad_1_gt0[pp]*x19 + x21*x50;
            double x134 = -x132 + x133;
            double x135 = x19*x45;
            double x136 = grad_2_gt3[pp]*x13;
            double x137 = grad_1_gt5[pp]*x21;
            double x138 = -x136 + x137;
            double x139 = x135 + x138;
            double x140 = 0.5*grad_1_gt2[pp];
            double x141 = 0.5*grad_2_gt1[pp];
            double x142 = (-0.5)*grad_0_gt4[pp] + x140 + x141;
            double x143 = x63 - x64 + x68;
            double x144 = -x119;
            double x145 = 0.5*grad_0_gt2[pp] + x144;
            double x146 = 0.5*grad_0_gt0[pp];
            double x147 = 4*x17 - 4*x18;
            double x148 = x147*x53;
            double x149 = x118*x74;
            double x150 = x123*x62;
            double x151 = 0.25*x45;
            double x152 = x123*x65 + x134*x74;
            double x153 = 4*x14 - 4*x7;
            double x154 = x153*x53;
            double x155 = 0.25*grad_1_gt0[pp];
            double x156 = 0.5*grad_0_gt4[pp];
            double x157 = (-0.5)*grad_2_gt1[pp] + x140 + x156;
            double x158 = x19*x45;
            double x159 = x136 - x137 - x158;
            double x160 = grad_1_gt0[pp]*x19;
            double x161 = x21*x50;
            double x162 = x132 - x160 - x161;
            double x163 = grad_1_gt3[pp]*x91 + x102*x19 - x21*x99;
            double x164 = x111*x13 - x120 - x121;
            double x165 = 2.0*grad_2_gt2[pp];
            double x166 = -grad2_0_2_chi[pp];
            double x167 = x15*x26 - x71 - x72;
            double x168 = 2.0*x24;
            double x169 = -x23*x45 + x43 - x44;
            double x170 = grad_1_gt0[pp]*x23;
            double x171 = x19*x50;
            double x172 = -x170 - x171 + x48;
            double x173 = x23*x61 - x80 - x81;
            double x174 = x19*x99;
            double x175 = grad_1_gt3[pp]*x106 + x102*x23 - x174;
            double x176 = x146*x23;
            double x177 = x108*x19;
            double x178 = x111*x15 - x176 - x177;
            double x179 = 2.0*grad_0_gt2[pp];
            double x180 = pow(grad_1_chi[pp], 2);
            double x181 = 3.0*x24;
            double x182 = -x181;
            double x183 = x16*(2*grad2_1_1_chi[pp] + x180*x182);
            double x184 = pow(grad_0_chi[pp], 2);
            double x185 = x23*(2*grad2_0_0_chi[pp] - 3.0*x184*x24);
            double x186 = pow(grad_2_chi[pp], 2);
            double x187 = x21*(2*grad2_2_2_chi[pp] - x181*x186);
            double x188 = 2*x14 - x8;
            double x189 = grad_0_chi[pp]*x181;
            double x190 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x189;
            double x191 = 2*x17 - 2*x18;
            double x192 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x189;
            double x193 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x182)*(2*x11 - 2*x12);
            double x194 = x104*x16;
            double x195 = -x114 + x13*x87 + x15*x89 - 1.0*x19*x28 - x194 - x21*x93;
            double x196 = x21*x69;
            double x197 = x13*x159 + x15*x162 - x16*x163 - x164*x23 - 1.0*x19*x58 - x196;
            double x198 = x178*x23;
            double x199 = x13*x169 + x15*x172 - x16*x175 - 1.0*x167*x19 - x173*x21 - x198;
            double x200 = x53*(-4*x4 + 4*x5);
            double x201 = x13*x53;
            double x202 = grad_1_gt5[pp]*x89;
            double x203 = x45*x87;
            double x204 = grad_2_gt3[pp]*x28;
            double x205 = x203 + x204;
            double x206 = -0.25*grad_2_gt3[pp];
            double x207 = 0.5*grad_1_gt4[pp] + x206;
            double x208 = x207*x89;
            double x209 = 0.25*grad_2_gt3[pp]*x89;
            double x210 = 0.25*grad_0_gt3[pp];
            double x211 = -0.5*grad_1_gt1[pp] + x210;
            double x212 = -x15*x45 - x85 + x86;
            double x213 = x211*x212;
            double x214 = x209 + x213;
            double x215 = x50*x89;
            double x216 = 0.25*x215;
            double x217 = x113*x98;
            double x218 = x155*x87 + x217;
            double x219 = -x84;
            double x220 = -x128*x28;
            double x221 = 0.25*grad_1_gt5[pp]*x28 + x142*x93;
            double x222 = -x148;
            double x223 = 0.25*grad_2_gt0[pp]*x15 + x13*x74 - 0.25*x27;
            double x224 = x223*x26;
            double x225 = x113*x65 + x223*x45;
            double x226 = x26*x89;
            double x227 = 0.25*x226;
            double x228 = -0.5*x102*x28 + x113*x99;
            double x229 = -x65 + x66;
            double x230 = 0.5*grad_1_gt0[pp]*x93 + x223*x50;
            double x231 = -x124;
            double x232 = (-0.5)*grad_1_gt2[pp] + x141 + x156;
            double x233 = 0.25*grad_1_gt0[pp]*x28 + x113*x157;
            double x234 = pow(chi[pp], -2);
            double x235 = -grad_0_chi[pp]*x234;
            double x236 = 4.0*x10;
            double x237 = x13*x236;
            double x238 = -x237;
            double x239 = x15*x236;
            double x240 = -x239;
            double x241 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x240 + 1.0*grad2_0_2_gt2[pp]*x10*x147 + 2.0*grad2_1_1_gt2[pp]*x10*x16 + grad2_1_2_gt2[pp]*x238 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x235;
            double x242 = x154*(x216 + x218) + x154*(x227 + x228) - x200*(x208 + x214) + x201*(x202 + x205) + x219*(x220 + x221) + x222*(x224 + x225) + x222*(x113*x229 + x230) + x231*(x113*x232 + x233) + x241;
            double x243 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x19;
            double x244 = grad_0_gt5[pp]*x58;
            double x245 = 3.0*x53;
            double x246 = x23*x245;
            double x247 = grad_1_gt5[pp]*x159;
            double x248 = 3.0*x54;
            double x249 = 6.0*x53;
            double x250 = 0.75*grad_0_gt4[pp];
            double x251 = 0.25*grad_1_gt2[pp];
            double x252 = 0.25*grad_2_gt1[pp];
            double x253 = -x252;
            double x254 = 0.25*grad_0_gt4[pp];
            double x255 = 0.75*grad_1_gt2[pp];
            double x256 = x159*x74;
            double x257 = 0.25*grad_1_gt5[pp]*x58;
            double x258 = grad_2_gt3[pp]*x93;
            double x259 = 0.25*grad_2_gt3[pp]*x28;
            double x260 = 0.5*x50;
            double x261 = grad_2_gt5[pp]*x159;
            double x262 = grad_1_gt5[pp]*x69;
            double x263 = grad_0_gt5[pp]*x69;
            double x264 = x115*x19;
            double x265 = 0.25*grad_2_gt5[pp]*x159;
            double x266 = 0.25*grad_2_gt5[pp]*x58;
            double x267 = x119*x169;
            double x268 = x26*x87;
            double x269 = 0.25*x268;
            double x270 = x173*x45;
            double x271 = x167*x45;
            double x272 = 0.25*x271;
            double x273 = x128*x212;
            double x274 = -x169*x75;
            double x275 = x72 + x77;
            double x276 = x275*x75;
            double x277 = (-0.5)*gt0[pp]*gt4[pp] + x90;
            double x278 = 2.0*x10;
            double x279 = -grad_0_chi[pp]*x199*x278 - grad_1_chi[pp]*x195*x278 - grad_2_chi[pp]*x197*x278 - x183 - x185 - x187 + x188*x190 - x191*x192 + x193;
            double x280 = -grad_0_chi[pp]*x19 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x21;
            double x281 = grad_0_chi[pp]*x34 + grad_1_chi[pp]*x16 + grad_2_chi[pp]*x40;
            double x282 = grad_0_gt3[pp]*x89;
            double x283 = grad_2_gt3[pp]*x87;
            double x284 = x21*x245;
            double x285 = -x155;
            double x286 = -x251;
            double x287 = x252 + x286;
            double x288 = 0.75*grad_2_gt1[pp];
            double x289 = x210*x87;
            double x290 = grad_2_gt3[pp]*x104;
            double x291 = grad_0_gt3[pp]*x104;
            double x292 = x15*x53;
            double x293 = 2.0*x292;
            double x294 = 0.25*grad_1_gt3[pp]*x89;
            double x295 = 0.25*grad_1_gt3[pp]*x87;
            double x296 = grad_1_gt5[pp]*x163;
            double x297 = 0.25*grad_1_gt5[pp]*x162;
            double x298 = x175*x45;
            double x299 = x155*x169;
            double x300 = x163*x50;
            double x301 = x159*x50;
            double x302 = 0.25*x301;
            double x303 = x172*x45;
            double x304 = 0.25*x303;
            double x305 = x162*x207;
            double x306 = -x169*x211;
            double x307 = x159*x207;
            double x308 = x170 + x171 + x49;
            double x309 = x211*x308;
            double x310 = (-0.5)*gt1[pp]*gt5[pp] + x105;
            double x311 = -x100 + x101;
            double x312 = -x254;
            double x313 = 0.25*grad_0_gt3[pp]*x28;
            double x314 = x155*x167;
            double x315 = x119*x172;
            double x316 = x162*x74;
            double x317 = grad_0_gt3[pp]*x113;
            double x318 = x50*x58;
            double x319 = 0.25*x318;
            double x320 = grad_0_gt5[pp]*x164;
            double x321 = 0.25*grad_0_gt0[pp]*x172;
            double x322 = 0.25*grad_0_gt0[pp]*x167;
            double x323 = x164*x50;
            double x324 = 0.5*grad_0_gt1[pp] + x285;
            double x325 = x28*x324;
            double x326 = x324*x89;
            double x327 = x145*x162;
            double x328 = x145*x58;
            double x329 = 0.25*grad_1_gt5[pp]*x87;
            double x330 = x169*x74 + x173*x232;
            double x331 = -x67*x69;
            double x332 = x167*x324;
            double x333 = x145*x172;
            double x334 = x332 + x333;
            double x335 = x207*x87;
            double x336 = 0.5*grad_1_gt3[pp]*x93;
            double x337 = 0.25*grad_2_gt3[pp]*x87 + x336;
            double x338 = -0.25*x23*x45 + 0.25*x43 - 0.25*x44;
            double x339 = x338*x45;
            double x340 = x100*x173 + x338*x50;
            double x341 = x254 + x287;
            double x342 = x169*x341 + x175*x59;
            double x343 = 0.5*grad_2_gt5[pp]*x163;
            double x344 = x128*(x138 + x158) + x343;
            double x345 = 0.25*grad_1_gt5[pp]*x89;
            double x346 = x100*x93;
            double x347 = x259 + x346;
            double x348 = 0.25*x50;
            double x349 = x348*x87;
            double x350 = x232*x69 + x256;
            double x351 = x111*x173 + x145*x169;
            double x352 = x167*x341;
            double x353 = 0.5*grad_1_gt0[pp]*x173;
            double x354 = x172*x74 + x353;
            double x355 = x157*x69;
            double x356 = -x128*x58;
            double x357 = 0.25*grad_2_gt5[pp]*x162;
            double x358 = x356 + x357;
            double x359 = grad_1_gt3[pp]*x223;
            double x360 = x289 + x359;
            double x361 = x211*x275;
            double x362 = x108*x175 + x169*x324;
            double x363 = x104*x157;
            double x364 = x207*x58;
            double x365 = x163*x59;
            double x366 = x159*x341 + x365;
            double x367 = x104*x99;
            double x368 = x157*x175 + x169*x210;
            double x369 = 0.25*grad_2_gt3[pp]*x159;
            double x370 = grad_1_gt5[pp]*x162;
            double x371 = grad_2_gt3[pp]*x58 + x370;
            double x372 = x172*x50;
            double x373 = grad_1_gt0[pp]*x169;
            double x374 = grad_0_gt3[pp]*x167 + x373;
            double x375 = grad_0_gt5[pp]*x162;
            double x376 = x26*x58;
            double x377 = x375 + x376;
            double x378 = 1.0*x53;
            double x379 = x23*x378;
            double x380 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x240 + 1.0*grad2_0_2_gt4[pp]*x10*x147 + 2.0*grad2_1_1_gt4[pp]*x10*x16 + grad2_1_2_gt4[pp]*x238 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x199*x53 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x234 + 2.0*grad_1_gt4[pp]*x195*x53 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x197*x53 + 1.0*gt4[pp]*x10*x24*x279 - x168*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x33*(grad_2_gt3[pp]*x34 + x46) + 0.5*grad_1_chi[pp]*x33*(grad_1_gt5[pp]*x40 + x34*x45 + x86) + 0.5*grad_2_chi[pp]*x33*(grad_2_gt3[pp]*x40 + x135 + x137));
            double x381 = -grad_1_chi[pp];
            double x382 = 2.0*grad_2_alpha[pp];
            double x383 = 2.0*grad_1_alpha[pp];
            double x384 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x24*x243 - 2.0*x23*x45 + 2.0*x43 - 2.0*x44) + x382*(1.0*grad_2_gt3[pp]*x10*x13 - x137*x31 - x158*x31 + x36*(1.0*gt4[pp]*x33*x41 + x381)) + x383*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x15*x45 - x31*x86 + x36*(1.0*gt4[pp]*x281*x33 + x32));
            double x385 = x167*x74;
            double x386 = -x70;
            double x387 = x108*x178;
            double x388 = 0.25*grad_2_gt0[pp]*x58;
            double x389 = -x129 + 0.5*x28*x99;
            double x390 = x142*x69 + x257;
            double x391 = x167*x348 + x353;
            double x392 = 0.25*x203;
            double x393 = -x159*x75;
            double x394 = x357 + x393;
            double x395 = x145*x167;
            double x396 = 0.5*grad_0_gt0[pp]*x173;
            double x397 = x119*x167 + x396;
            double x398 = 0.5*grad_2_gt5[pp]*x164;
            double x399 = x398 + x75*(x117 + x56);
            double x400 = 0.25*grad_0_gt0[pp]*x169;
            double x401 = x314 + x400;
            double x402 = x157*x178;
            double x403 = x324*x87;
            double x404 = x145*x159;
            double x405 = 0.5*grad_1_gt5[pp]*x164;
            double x406 = x151*x58 + x405;
            double x407 = 0.25*x372;
            double x408 = grad_2_gt0[pp]*x159;
            double x409 = grad_0_gt3[pp]*x28;
            double x410 = grad_1_gt0[pp]*x87;
            double x411 = x159*x45;
            double x412 = 1.0*x54;
            double x413 = 2.0*grad_0_gt2[pp]*x199*x53 + 2.0*grad_1_gt2[pp]*x195*x53 + 2.0*grad_2_gt2[pp]*x197*x53 + 1.0*gt2[pp]*x10*x24*x279 - x168*(0.5*grad_0_chi[pp]*x33*(x26*x34 + x71 + x76) + 0.5*grad_1_chi[pp]*x33*(grad_0_gt5[pp]*x40 + grad_2_gt0[pp]*x34 + x16*x26) + 0.5*grad_2_chi[pp]*x33*(x116 + x26*x40 + x57) + x166);
            double x414 = 2.0*grad_0_alpha[pp];
            double x415 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*x29 + x382*(1.0*x10*x13*x26 - x31*x56 - x31*x57 + x42) + x414*(1.0*x10*x15*x26 - x31*x71 - x31*x72 + x37);
            double x416 = 0.25*x376;
            double x417 = 0.25*grad_1_gt5[pp]*x159;
            double x418 = x308*x75;
            double x419 = x104*x232 + x359;
            double x420 = 0.25*grad_2_gt3[pp]*x58 + x365;
            double x421 = x167*x210;
            double x422 = 0.5*grad_2_gt0[pp]*x175;
            double x423 = grad_0_gt5[pp]*x172;
            double x424 = grad_2_gt0[pp]*x169;
            double x425 = x167*x26 + x424;
            double x426 = x19*x378;
            double x427 = x226 + x409;
            double x428 = -x128*x89;
            double x429 = x58*x74;
            double x430 = x314 + x315;
            double x431 = x142*x178 + x400;
            double x432 = x119*x159 + x405;
            double x433 = 0.25*x411;
            double x434 = x356 + x393;
            double x435 = x111*x178;
            double x436 = x119*x162 + x164*x232;
            double x437 = 0.25*grad_1_gt0[pp]*x89;
            double x438 = 0.5*x162;
            double x439 = -x163*x61 - x438*x67;
            double x440 = x104*x142 + x209;
            double x441 = x299 + x422;
            double x442 = x172*x341;
            double x443 = x315 + x400;
            double x444 = x178*x232;
            double x445 = -x164*x67 - x438*x61;
            double x446 = x217 + 0.25*x45*x89;
            double x447 = 0.25*x132 - 0.25*x160 - 0.25*x161;
            double x448 = x447*x50;
            double x449 = 0.5*grad_2_gt0[pp]*x163 + x162*x341;
            double x450 = x172*x324;
            double x451 = 0.5*grad_0_gt0[pp]*x175;
            double x452 = x155*x172 + x451;
            double x453 = 0.5*grad_2_gt3[pp]*x164 + x447*x45;
            double x454 = x113*x94;
            double x455 = x211*(-grad_1_gt0[pp]*x15 - x13*x50 + x88) + x454;
            double x456 = x172*x210;
            double x457 = 0.25*grad_2_gt3[pp]*x162 + x142*x163;
            double x458 = -x102*x104;
            double x459 = x21*x378;
            double x460 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x240 + 1.0*grad2_0_2_gt1[pp]*x10*x147 + 2.0*grad2_1_1_gt1[pp]*x10*x16 + grad2_1_2_gt1[pp]*x238 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x199*x53 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x235 + 2.0*grad_1_gt1[pp]*x195*x53 + 2.0*grad_2_gt1[pp]*x197*x53 + 1.0*gt1[pp]*x10*x24*x279 - x168*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x33*(grad_0_gt3[pp]*x34 + x51) + 0.5*grad_1_chi[pp]*x33*(grad_1_gt0[pp]*x34 + x40*x50 + x88) + 0.5*grad_2_chi[pp]*x33*(grad_0_gt3[pp]*x40 + x133));
            double x461 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x24*x280 + 2.0*x132 - 2.0*x160 - 2.0*x161) + x383*(1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x13*x50 - x31*x88 + x36*(1.0*gt1[pp]*x281*x33 + x39)) + x414*(1.0*grad_0_gt3[pp]*x10*x15 - x170*x31 - x171*x31 + x36*(1.0*gt1[pp]*x33*x35 + x381));
            double x462 = 0.25*grad_0_gt3[pp]*x89;
            _3579[pp] = At0[pp]*grad_2_beta0[pp] + At1[pp]*grad_2_beta1[pp] + 1.0*At2[pp]*grad_0_beta0[pp]*x0 - 0.66666666666666663*At2[pp]*grad_1_beta1[pp] + 1.0*At2[pp]*grad_2_beta2[pp]*x0 + At4[pp]*grad_0_beta1[pp] + At5[pp]*grad_0_beta2[pp] - alpha[pp]*(2.0*At0[pp]*x10*(At4[pp]*x15 - At5[pp]*x19 + x1*x23) + 2.0*At1[pp]*x10*(At2[pp]*x15 - At4[pp]*x16 + At5[pp]*x13) + 2.0*At2[pp]*x10*(-At2[pp]*x19 + At4[pp]*x13 - At5[pp]*x21) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_1_gt2[pp]*x115*(x104*x16 + x114 - 1.0*x13*x87 - 1.0*x15*x89 + x19*x28 + x21*x93) - gt2[pp]*x10*x36*(2.0*grad_0_chi[pp]*x10*x199 + 2.0*grad_1_chi[pp]*x10*x195 + 2.0*grad_2_chi[pp]*x10*x197 + x183 + x185 + x187 - x188*x190 + x191*x192 - x193) + x124*(1.0*grad_0_gt5[pp]*x123 + x118*x119) + x124*(0.25*grad_0_gt0[pp]*x78 + 0.5*grad_2_gt0[pp]*x126 + x108*x126) - x131*(0.25*grad_1_gt5[pp]*x118 + 0.25*grad_2_gt5[pp]*x134 + x142*x143) + x131*(-0.25*grad_2_gt5[pp]*x134 - x118*x127 + x139*x75) + x131*(-x110*x82 - 0.25*x50*x78 + x52*x75) - x131*(x128*x89 + x129 - 0.5*x28*x99) + x147*x53*(x143*x83 + x149 + x150) - x148*(x118*x75 - x149 - x150) - x148*(x126*x61 + x145*x73 - x146*x82) - x154*(x118*x151 + x152) - x154*(x119*x139 + x152) - x154*(0.25*grad_0_gt0[pp]*x47 + x126*x142 + x145*x52) - x154*(0.25*grad_2_gt0[pp]*x52 + x126*x157 + x155*x78) - x165*x53*(-1.0*x13*x159 - 1.0*x15*x162 + x16*x163 + x164*x23 + x19*x58 + x21*x69) - x168*(0.5*grad_0_chi[pp]*x10*x167 + 0.5*grad_1_chi[pp]*x10*x28 + 0.5*grad_2_chi[pp]*x10*x58 + x166) - x179*x53*(-1.0*x13*x169 - 1.0*x15*x172 + x16*x175 + x167*x19 + x173*x21 + x178*x23) + 2.0*x19*x53*(grad_0_gt5[pp]*x126 + grad_2_gt0[pp]*x78) + x200*(0.5*grad_1_gt5[pp]*x134 + x139*x151) - 1.0*x201*(grad_0_gt5[pp]*x52 + grad_2_gt0[pp]*x47 + x45*x78) + x242 + x53*x55*(-0.5*grad_2_gt5[pp]*x58 + x70) + x54*(grad_1_gt0[pp]*x47 + x45*x52 + x50*x52) - x84*(0.25*grad_0_gt5[pp]*x73 + x75*x78 - x82*x83)) - 12*grad2_0_2_alpha[pp] - 6.0*grad_0_alpha[pp]*(1.0*grad_0_gt5[pp]*x10*x19 + 1.0*grad_2_gt0[pp]*x10*x23 - x30*x31 - x37) + 6.0*grad_1_alpha[pp]*x10*x29 - 6.0*grad_2_alpha[pp]*(1.0*grad_0_gt5[pp]*x10*x21 + 1.0*grad_2_gt0[pp]*x10*x19 - x31*x38 - x42) + 1.0*gt2[pp]*x10*(-x13*(alpha[pp]*(-x124*(x314 + x334) - x124*(0.5*grad_0_gt3[pp]*x28 + x216) + 2.0*x13*x53*(grad_2_gt3[pp]*x69 + x247) + x131*(x335 + x337) + x131*(x339 + x340) + x131*(x344 + x69*x99) + x131*(x104*x65 + x337) + x131*(x173*x311 + x342) - x148*(x257 + x350) - x148*(x272 + x351) - x148*(x345 + x347) - x148*(x347 + x349) - x148*(x352 + x354) - x148*(x355 + x358) + x154*(x208 + x360) + x154*(x360 + x363) + x154*(x361 + x362) + x154*(x364 + x366) - x200*(x306 + x368) - x200*(0.5*grad_1_gt3[pp]*x87 + x367) - x200*(x163*x65 + x307 + x369) + x219*(1.0*x258 + x329) + x292*(x301 + x371) + x292*(x372 + x374) - x379*(x318 + x377) + x380 - x84*(0.5*x270 + x330) - x84*(x265 + x331 + x65*x69)) + x384) - x13*(alpha[pp]*(-x124*(x315 + x334) - x124*(x162*x59 + x416) + 2.0*x13*x53*(grad_1_gt5[pp]*x104 + x283) + x131*(x339 + x342) + x131*(x344 + x417) + x131*(-x175*x61 + x340) + x131*(x343 + x417 + x69*x98) + x131*(x104*x229 + x335 + x336) - x148*(x256 + x358) - x148*(x350 + x357) - x148*(x351 + x418) + x154*(x208 + x419) + x154*(x297 + x366) + x154*(x297 + x420) + x154*(x304 + x362) + x154*(x209 + x289 + x363) + x154*(x407 + x421 + x422) - x200*(1.0*x296 + x369) - x200*(0.5*x298 + x368) - x200*(x104*x98 + x295 + x367) + x219*(x274 + x330) + x219*(0.5*grad_2_gt3[pp]*x93 + x273 + x329) + x222*(x346 + x349 + x428) - x379*(x215 + x427) + x380 - x426*(x423 + x425) - x426*(x202 + x204 + x268) - x84*(0.5*x261 + x331)) + x384) - x15*(alpha[pp]*(-x124*(0.5*x323 + x436) - x124*(0.5*grad_1_gt0[pp]*x178 + x321 + x435) + x131*(x214 + x359) + x131*(x359 + x440) + x131*(x364 + x439) + x131*(x361 + x422 + x442) - x148*(x319 + x445) - x148*(x332 + x431) - x148*(x416 + x432) - x148*(x430 + x444) + 2.0*x15*x53*(grad_0_gt3[pp]*x178 + grad_1_gt0[pp]*x172) + x154*(x448 + x453) + x154*(x455 + x462) + x154*(x164*x99 + x449) + x154*(0.5*grad_1_gt0[pp]*x104 + x454 + x462) + x154*(x178*x311 + x450 + x451) - x200*(x305 + x457) - x200*(0.5*grad_1_gt3[pp]*x89 + x458) - x200*(0.5*grad_1_gt0[pp]*x175 + x309 + x456) + x201*(x303 + x374) + x201*(x371 + x411) + x219*(x257 + x434) + x219*(0.5*grad_2_gt3[pp]*x28 + x392) + x222*(x218 + x313) + x222*(x313 + x446) + x231*(1.0*x317 + x437) - x459*(x271 + x425) + x460) + x461) + x16*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x239 + 1.0*grad2_0_2_gt3[pp]*x10*x147 + 2.0*grad2_1_1_gt3[pp]*x10*x16 - grad2_1_2_gt3[pp]*x237 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 2.0*grad_0_gt3[pp]*x199*x53 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x194*x249 + 2.0*grad_1_gt3[pp]*x195*x53 + 2.0*grad_2_gt3[pp]*x197*x53 + 1.0*gt3[pp]*x10*x24*x279 - x124*x162*(x250 + x287) - x124*x172*(x109 + x285) + 2.0*x13*x53*(grad_0_gt3[pp]*x169 + x298) + 2.0*x13*x53*(grad_1_gt3[pp]*x87 + x290) + 2.0*x13*x53*(grad_2_gt3[pp]*x159 + x296) + x130*x53*(-2*x163*x67 + x307) + x130*x53*(x175*x26 + x306) + x131*(1.0*x290 + x295) - x148*(0.5*grad_2_gt3[pp]*x89 + x289) - x148*(x100*x87 + x209) - x148*(x111*x169 + x304) - x148*(x159*x232 + x297) - x148*(-1.0*x162*x67 + x302) - x148*(x172*x232 + x299) + 2.0*x15*x53*(grad_0_gt3[pp]*x172 + grad_1_gt0[pp]*x175) + x153*x53*(2*x111*x175 + x309) + x153*x53*(x163*x26 + x305) + x154*(1.0*x291 + x294) - x159*x84*(-x127 + x66) - x163*x200*(x97 + x98) - x168*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x33*(grad_1_gt3[pp]*x310 + x174 + x23*x311) + 1.0*grad_1_chi[pp]*x33*(x311*x34 + x40*x99 + x95) + 1.0*grad_2_chi[pp]*x33*(grad_1_gt3[pp]*x277 + x19*x311 + x21*x99)) - x169*x84*(x254 + x286 + x288) - x175*x200*(x100 + x101) - x180*x234 - x246*x282 - x283*x284 + x293*(grad_1_gt3[pp]*x89 + x291) + x293*(grad_2_gt3[pp]*x162 + x300)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x24*x243 + x175) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x99 + 1.0*x10*x96 - x103*x31 + x36*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x281*x33)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x24*x280 + x163)) + x19*(alpha[pp]*(-x124*(1.0*x320 + x388) - x124*(0.5*grad_2_gt0[pp]*x178 + x322 + x387) + x131*(x257 + x394) + x131*(x357 + x390) + x131*(x389 + x428) + x131*(x391 + x418) - x148*(x399 + x429) - x148*(0.5*grad_2_gt0[pp]*x69 + x398 + x429) - x148*(x178*x92 + x395 + x396) + x154*(x316 + x406) + x154*(x316 + x432) + x154*(x333 + x431) + x154*(x402 + x430) - x200*(0.5*grad_1_gt5[pp]*x162 + x433) + x201*(x271 + x423 + x424) + x219*(0.5*grad_2_gt5[pp]*x58 + x386) + x242 - x264*(grad_0_gt5[pp]*x178 + grad_2_gt0[pp]*x167) - x412*(x303 + x372 + x373) + x413 - x84*(0.5*grad_2_gt0[pp]*x173 + x276 + x385)) + x415) + x19*(alpha[pp]*(-x124*(x233 + x325) - x124*(0.5*grad_0_gt0[pp]*x167 + x387) - x124*(x164*x59 + x328 + x388) + x131*(x256 + x390) + x131*(x267 + x354) + x131*(x267 + x391) + x131*(x269 + x389) + x131*(x355 + x394) + x131*(x345 + x346 + x392) - x148*(x224 + x230) - x148*(x395 + x397) - x148*(x108*x69 + x399) - x148*(x111*x93 + x225) - x148*(x178*x59 + x397) + x154*(x228 + x403) + x154*(x333 + x401) + x154*(x401 + x402) + x154*(x404 + x406) - x200*(0.5*grad_1_gt0[pp]*x169 + x407) - x200*(x208 + x213 + x289) + x219*(1.0*grad_2_gt0[pp]*x173 + x385) + x241 - x264*(grad_2_gt0[pp]*x69 + x244) + x292*(x215 + x409 + x410) + x292*(x318 + x375 + x408) - x412*(x301 + x370 + x411) + x413 - x84*(x221 + x232*x93) - x84*(x266 + x386 + x59*x69)) + x415) + x21*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x239 + 1.0*grad2_0_2_gt5[pp]*x10*x147 + 2.0*grad2_1_1_gt5[pp]*x10*x16 - grad2_1_2_gt5[pp]*x237 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 2.0*grad_0_gt5[pp]*x199*x53 + 2.0*grad_1_gt5[pp]*x195*x53 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x196*x249 + 2.0*grad_2_gt5[pp]*x197*x53 + 1.0*gt5[pp]*x10*x24*x279 - x124*x167*(x107 + x144) - x124*x28*(x250 + x251 + x253) + 2.0*x13*x53*(x261 + x262) + 2.0*x13*x53*(grad_0_gt5[pp]*x169 + x270) + 2.0*x13*x53*(grad_1_gt5[pp]*x87 + x258) + x130*x53*(x273 + 2*x93*x99) + x130*x53*(x173*x50 + x274) + x131*(1.0*x262 + x265) - x148*(x220 + x50*x93) - x148*(1.0*x263 + x266) - x148*(x173*(-1.0*grad_2_gt0[pp] + x179) + x276) + x153*x53*(x269 + x28*x99) + x153*x53*(x108*x169 + x272) + x154*(x259 + x260*x87) + x154*(0.5*grad_1_gt5[pp]*x58 + x256) + x154*(x159*x59 + x257) + x154*(x167*x260 + x267) - x168*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x33*(x229*x34 + x23*x92 + x80) + 1.0*grad_1_chi[pp]*x33*(grad_2_gt5[pp]*x277 + x16*x229 + x34*x92) + 1.0*grad_2_chi[pp]*x33*(x19*x92 + x229*x40 + x63)) - x169*x200*(x253 + x254 + x255) - x173*x84*(x59 + x60) - x186*x234 - x200*x87*(x206 + x97) - x244*x246 - x247*x248 - x264*(grad_0_gt5[pp]*x167 + grad_2_gt0[pp]*x173) - x264*(grad_1_gt5[pp]*x28 + x26*x93) - x264*(grad_2_gt5[pp]*x58 + x263) - x84*x93*(x65 + x66)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x24*x243 + x173) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x24*x25 + x93) + 4*grad_2_alpha[pp]*(1.0*x10*x19*x61 - x10*x63 - x31*x68 + x36*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x33*x41))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x239 + 1.0*grad2_0_2_gt0[pp]*x10*x147 + 2.0*grad2_1_1_gt0[pp]*x10*x16 - grad2_1_2_gt0[pp]*x237 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x198*x249 + 2.0*grad_0_gt0[pp]*x199*x53 - grad_1_gt0[pp]*x172*x248 + 2.0*grad_1_gt0[pp]*x195*x53 - grad_2_gt0[pp]*x167*x284 + 2.0*grad_2_gt0[pp]*x197*x53 + 1.0*gt0[pp]*x10*x24*x279 - x113*x124*(x109 + x110) - x124*x164*(x107 + x83) + x131*(x313 + 0.5*x45*x89) + x131*(x316 + 0.5*x45*x58) + x131*(0.5*grad_1_gt0[pp]*x167 + x315) + x131*(0.5*grad_2_gt0[pp]*x172 + x314) + x131*(-1.0*x102*x28 + x227) + x131*(-1.0*x162*x61 + x319) - x148*(1.0*grad_2_gt0[pp]*x178 + x322) - x148*(x113*x45 + x325) - x148*(x164*(-grad_0_gt5[pp] + x165) + x328) + x153*x53*(-2*x102*x113 + x326) + x153*x53*(x164*x45 + x327) + x154*(1.0*grad_1_gt0[pp]*x178 + x321) - x162*x200*(x252 + x255 + x312) - x168*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x33*(x111*x34 + x125) + 1.0*grad_1_chi[pp]*x33*(grad_0_gt0[pp]*x310 + x108*x40 + x112) + 1.0*grad_2_chi[pp]*x33*(x111*x40 + x122)) - x184*x234 - x200*x89*(x101 - x210) - x264*(grad_0_gt0[pp]*x167 + grad_2_gt0[pp]*x178) - x264*(grad_1_gt0[pp]*x28 + x113*x26) - x264*(grad_2_gt0[pp]*x58 + x320) - x28*x84*(x251 + x288 + x312) + x293*(grad_0_gt0[pp]*x172 + grad_1_gt0[pp]*x178) + x293*(grad_1_gt0[pp]*x89 + x317) + x293*(grad_2_gt0[pp]*x162 + x323) - x58*x84*(x60 - x74)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x111*x15 - x10*x176 - x177*x31 + x36*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x33*x35)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x24*x25 + x113) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x24*x280 + x164)) + x34*(alpha[pp]*(-x124*(x327 + x436) - x124*(0.5*grad_0_gt0[pp]*x172 + x435) - x124*(x100*x113 + x326 + x437) + x131*(x213 + x419) + x131*(x289 + x440) + x131*(x302 + x439) + x131*(x420 + x433) + x131*(x421 + x441) + x131*(x441 + x442) - x148*(x332 + x443) - x148*(x403 + x446) - x148*(x404 + x445) - x148*(x443 + x444) + x154*(x448 + x449) + x154*(x450 + x452) + x154*(x100*x178 + x452) + x154*(x104*x111 + x455) + x154*(x108*x163 + x453) - x200*(0.5*x300 + x457) - x200*(1.0*grad_1_gt0[pp]*x175 + x456) - x200*(x100*x104 + x294 + x458) + x219*(x256 + x434) + x293*(grad_1_gt0[pp]*x104 + x282) - x426*(x377 + x408) - x426*(x410 + x427) - x459*(x205 + x268) + x460 - x84*(0.5*grad_2_gt0[pp]*x169 + x352)) + x461)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = pow(gt1[pp], 2);
            double x2 = pow(gt2[pp], 2);
            double x3 = gt0[pp]*gt3[pp];
            double x4 = gt1[pp]*gt4[pp];
            double x5 = gt0[pp]*x0 - 2*gt2[pp]*x4 + gt3[pp]*x2 + gt5[pp]*x1 - gt5[pp]*x3;
            double x6 = pow(x5, -3);
            double x7 = gt0[pp]*gt5[pp];
            double x8 = -x2 + x7;
            double x9 = gt0[pp]*gt4[pp];
            double x10 = gt1[pp]*gt2[pp];
            double x11 = -x10 + x9;
            double x12 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x13 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x14 = gt1[pp]*gt5[pp];
            double x15 = gt2[pp]*gt4[pp];
            double x16 = x14 - x15;
            double x17 = -0.5*grad_1_gt3[pp]*x8 + x11*x12 - x13*x16;
            double x18 = pow(x11, 2);
            double x19 = pow(x16, 2);
            double x20 = At1[pp]*x8;
            double x21 = At0[pp]*x19 + 2*At2[pp]*x11*x16 + At3[pp]*pow(x8, 2) - 2*At4[pp]*x11*x8 + At5[pp]*x18 - 2*x16*x20;
            double x22 = 1.0/chi[pp];
            double x23 = 1.0/x5;
            double x24 = 0.33333333333333331*alpha[pp]*x23;
            double x25 = gt2[pp]*gt3[pp];
            double x26 = -x25 + x4;
            double x27 = -x1 + x3;
            double x28 = x11*x26;
            double x29 = At3[pp]*x8;
            double x30 = x16*x26;
            double x31 = -At0[pp]*x30 + At1[pp]*x11*x16 + At1[pp]*x26*x8 - At2[pp]*x16*x27 - At2[pp]*x28 + At4[pp]*x18 + At4[pp]*x27*x8 - At5[pp]*x11*x27 - x11*x29;
            double x32 = pow(x5, -2);
            double x33 = 2*x32;
            double x34 = gt3[pp]*gt5[pp] - x0;
            double x35 = -At0[pp]*x16*x34 + At1[pp]*x19 - At2[pp]*x11*x34 - At2[pp]*x30 + At4[pp]*x11*x16 + At4[pp]*x26*x8 - At5[pp]*x28 - x16*x29 + x20*x34;
            double x36 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x37 = grad_1_gt5[pp]*x11 - grad_2_gt3[pp]*x8 + x16*x36;
            double x38 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x39 = -grad_0_gt3[pp]*x8 + grad_1_gt0[pp]*x16 + x11*x38;
            double x40 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x41 = -0.5*x10 + 0.5*x9;
            double x42 = 0.5*grad_0_gt5[pp];
            double x43 = 1.0*grad_2_gt2[pp];
            double x44 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x45 = 0.5*x14 - 0.5*x15;
            double x46 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x47 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x48 = x11*x37 + x16*x39 - x17*x8 - 1.0*x26*(grad_0_gt5[pp]*x11 + grad_2_gt0[pp]*x16 - x40*x8) - x27*(grad_2_gt5[pp]*x41 + x16*(-x42 + x43) + x44*x8) - x34*(grad_0_gt0[pp]*x45 + x11*x46 - x47*x8);
            double x49 = x42 - x43;
            double x50 = -0.5*x25 + 0.5*x4;
            double x51 = 0.33333333333333331;
            _4477[pp] = (-B1[pp])*eta + 2*alpha[pp]*x17*x21*x6 + 2.0*alpha[pp]*x31*x37*x6 + 2.0*alpha[pp]*x35*x39*x6 - grad_0_alpha[pp]*x33*x35 - grad_0_beta1[pp]*x32*(x11*(-grad_1_gt5[pp]*x26 + grad_2_gt3[pp]*x16 - x34*x36) + x16*(grad_0_gt3[pp]*x16 - grad_1_gt0[pp]*x34 - x26*x38) - 1.0*x26*(-grad_0_gt5[pp]*x26 - grad_2_gt0[pp]*x34 + x16*x40) - x27*(-grad_2_gt5[pp]*x50 - x16*x44 + x34*x49) - x34*(-0.5*grad_0_gt0[pp]*x34 + x16*x47 - x26*x46) - x8*(grad_1_gt3[pp]*x45 - x12*x26 + x13*x34)) - grad_1_beta1[pp]*x32*x48 - grad_2_alpha[pp]*x31*x33 - grad_2_beta1[pp]*x32*(x11*(-grad_1_gt5[pp]*x27 + grad_2_gt3[pp]*x11 - x26*x36) + x16*(grad_0_gt3[pp]*x11 - grad_1_gt0[pp]*x26 - x27*x38) - 1.0*x26*(-grad_0_gt5[pp]*x27 - grad_2_gt0[pp]*x26 + x11*x40) - x27*(-0.5*grad_2_gt5[pp]*x27 - x11*x44 + x26*x49) - x34*(-grad_0_gt0[pp]*x50 + x11*x47 - x27*x46) - x8*(grad_1_gt3[pp]*x41 - x12*x27 + x13*x26)) - x24*(grad_0_K[pp]*(4*x14 - 4*x15) + 9.0*grad_0_chi[pp]*x22*x23*x35) - x24*(-grad_1_K[pp]*(-4*x2 + 4*x7) + 9.0*grad_1_chi[pp]*x21*x22*x23) - x24*(grad_2_K[pp]*(-4*x10 + 4*x9) + 9.0*grad_2_chi[pp]*x22*x23*x31) + x32*x48*(2.0*grad_0_beta0[pp]*x51 + 2.0*grad_1_beta1[pp]*x51 + 2.0*grad_2_beta2[pp]*x51);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = pow(gt1[pp], 2);
            double x2 = pow(gt2[pp], 2);
            double x3 = gt0[pp]*gt3[pp];
            double x4 = gt1[pp]*gt2[pp];
            double x5 = 2*x4;
            double x6 = gt0[pp]*x0 + gt3[pp]*x2 - gt4[pp]*x5 + gt5[pp]*x1 - gt5[pp]*x3;
            double x7 = 1.0/x6;
            double x8 = 1.0/chi[pp];
            double x9 = gt0[pp]*gt4[pp];
            double x10 = -x4 + x9;
            double x11 = gt1[pp]*gt5[pp];
            double x12 = gt2[pp]*gt4[pp];
            double x13 = x11 - x12;
            double x14 = gt0[pp]*gt5[pp];
            double x15 = x14 - x2;
            double x16 = -0.5*x4 + 0.5*x9;
            double x17 = 0.5*grad_0_gt5[pp];
            double x18 = -x17;
            double x19 = 1.0*grad_2_gt2[pp];
            double x20 = 0.5*grad_1_gt5[pp];
            double x21 = -1.0*grad_2_gt4[pp];
            double x22 = x20 + x21;
            double x23 = grad_2_gt5[pp]*x16 + x13*(x18 + x19) + x15*x22;
            double x24 = pow(grad_2_chi[pp], 2);
            double x25 = gt3[pp]*gt5[pp];
            double x26 = -x0 + x25;
            double x27 = -x1 + x3;
            double x28 = gt1[pp]*gt4[pp];
            double x29 = gt2[pp]*gt3[pp];
            double x30 = 4*x28 - 4*x29;
            double x31 = 4.0*x7;
            double x32 = pow(x6, -2);
            double x33 = grad_1_gt5[pp]*x27;
            double x34 = grad_2_gt3[pp]*x10;
            double x35 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x36 = x28 - x29;
            double x37 = x33 - x34 + x35*x36;
            double x38 = grad_0_gt5[pp]*x27;
            double x39 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x40 = grad_2_gt0[pp]*x36 - x10*x39 + x38;
            double x41 = 1.0*grad_0_gt2[pp];
            double x42 = 0.25*grad_2_gt0[pp];
            double x43 = -4*x0 + 4*x25;
            double x44 = grad_0_gt5[pp]*x36;
            double x45 = grad_2_gt0[pp]*x26 - x13*x39 + x44;
            double x46 = 0.5*grad_2_gt5[pp]*x27;
            double x47 = x10*x22;
            double x48 = -x19;
            double x49 = x17 + x48;
            double x50 = x36*x49;
            double x51 = x46 + x47 - x50;
            double x52 = grad_1_gt5[pp]*x10;
            double x53 = grad_2_gt3[pp]*x15;
            double x54 = x13*x35 + x52 - x53;
            double x55 = 1.0*grad_1_gt4[pp];
            double x56 = x32*(4*x14 - 4*x2);
            double x57 = grad_1_gt5[pp]*x36;
            double x58 = grad_2_gt3[pp]*x13;
            double x59 = x26*x35 + x57 - x58;
            double x60 = -0.25*grad_2_gt1[pp];
            double x61 = grad_0_gt5[pp]*x10 + grad_2_gt0[pp]*x13 - x15*x39;
            double x62 = -4*x1 + 4*x3;
            double x63 = 0.5*x28 - 0.5*x29;
            double x64 = grad_2_gt5[pp]*x63;
            double x65 = x13*x22;
            double x66 = x26*x49 - x64 - x65;
            double x67 = 0.25*grad_0_gt5[pp];
            double x68 = 4*x11 - 4*x12;
            double x69 = x32*x68;
            double x70 = grad_0_gt5[pp]*x51;
            double x71 = 2.0*x32;
            double x72 = x36*x71;
            double x73 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x74 = 0.5*x73;
            double x75 = grad_2_gt5[pp]*x37;
            double x76 = grad_1_gt5[pp]*x51;
            double x77 = x10*x71;
            double x78 = -x26*x49 + x64 + x65;
            double x79 = -4*x4 + 4*x9;
            double x80 = x32*x79;
            double x81 = -0.5*grad_2_gt3[pp] + x55;
            double x82 = -0.5*grad_2_gt0[pp] + x41;
            double x83 = 0.25*grad_1_gt5[pp] + (-0.5)*grad_2_gt4[pp];
            double x84 = 1.0*x73;
            double x85 = -0.5*grad_2_gt2[pp] + x67;
            double x86 = -x26*x35 - x57 + x58;
            double x87 = -x46 - x47 + x50;
            double x88 = -grad_0_gt3[pp]*x15 + grad_1_gt0[pp]*x13 + x10*x73;
            double x89 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x90 = -0.5*grad_1_gt3[pp]*x15 + x10*x81 - x13*x89;
            double x91 = 0.5*x11 - 0.5*x12;
            double x92 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x93 = x26*(grad_0_gt0[pp]*x91 + x10*x82 - x15*x92);
            double x94 = -grad_2_gt0[pp]*x36 + x10*x39 - x38;
            double x95 = -x33 + x34 - x35*x36;
            double x96 = grad_0_gt3[pp]*x10 - grad_1_gt0[pp]*x36 - x27*x73;
            double x97 = grad_1_gt3[pp]*x16 - x27*x81 + x36*x89;
            double x98 = -grad_0_gt0[pp]*x63 + x10*x92 - x27*x82;
            double x99 = -grad_2_gt0[pp]*x26 + x13*x39 - x44;
            double x100 = grad_0_gt3[pp]*x13 - grad_1_gt0[pp]*x26 - x36*x73;
            double x101 = grad_1_gt3[pp]*x91 + x26*x89 - x36*x81;
            double x102 = -0.5*grad_0_gt0[pp]*x26 + x13*x92 - x36*x82;
            double x103 = 3.0*x8;
            double x104 = -x103;
            double x105 = grad_0_chi[pp]*x103;
            _4135[pp] = 3*alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x26*x7 - grad2_0_1_gt5[pp]*x13*x31 + 1.0*grad2_0_2_gt5[pp]*x30*x7 + 2.0*grad2_1_1_gt5[pp]*x15*x7 - grad2_1_2_gt5[pp]*x10*x31 + 2.0*grad2_2_2_gt5[pp]*x27*x7 + 3.0*grad_0_gt5[pp]*x26*x32*x40 - grad_0_gt5[pp]*x71*(-1.0*x10*x86 - 1.0*x100*x13 + x101*x15 + x102*x26 + x27*x66 + x36*x99) + 3.0*grad_1_gt5[pp]*x15*x32*x37 - grad_1_gt5[pp]*x71*(-1.0*x10*x54 - 1.0*x13*x88 + x15*x90 + x23*x27 + x36*x61 + x93) + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] + 6.0*grad_2_gt5[pp]*x27*x32*x51 - grad_2_gt5[pp]*x71*(-1.0*x10*x95 - 1.0*x13*x96 + x15*x97 + x26*x98 + x27*x87 + x36*x94) - 1.0*gt5[pp]*x7*x8*(2.0*grad_0_chi[pp]*x7*(x10*x86 + x100*x13 - x101*x15 - x102*x26 - x27*x66 - 1.0*x36*x99) + 2.0*grad_1_chi[pp]*x7*(x10*x54 + x13*x88 - x15*x90 - x23*x27 - 1.0*x36*x61 - x93) + 2.0*grad_2_chi[pp]*x7*(x10*x95 + x13*x96 - x15*x97 - x26*x98 - x27*x87 - 1.0*x36*x94) + x15*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x104) + x26*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x8) + x27*(2*grad2_2_2_chi[pp] - x103*x24) - (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x105)*(2*x11 - 2*x12) + (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x105)*(2*x28 - 2*x29) - (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x104)*(-x5 + 2*x9)) + 2.0*x10*x32*(grad_1_gt5[pp]*x54 + grad_2_gt3[pp]*x23) + x23*x32*x62*(-x20 + x21) + x30*x32*(0.25*grad_2_gt5[pp]*x40 + 1.0*x70) + x30*x32*(-x23*x84 + x61*x83) - x30*x32*(x45*x85 + x78*(-2.0*grad_0_gt2[pp] + 1.0*grad_2_gt0[pp])) + 2.0*x32*x36*(grad_0_gt5[pp]*x45 + grad_2_gt0[pp]*x78) + x32*x43*x45*(x41 - x42) - x32*x43*x61*(0.75*grad_0_gt4[pp] + 0.25*grad_1_gt2[pp] + x60) + x32*x62*x66*(x18 + x48) + x32*x68*(0.25*x39*x54 + x61*x81) + x32*x79*(2*x23*x81 + x83*(-x13*x35 - x52 + x53)) - x54*x56*(-0.25*grad_2_gt3[pp] + x55) + x56*x59*(0.25*grad_0_gt4[pp] + 0.75*grad_1_gt2[pp] + x60) - x69*(0.25*grad_1_gt5[pp]*x40 + x17*x37) - x69*(0.5*grad_1_gt5[pp]*x40 + x37*x67) + x69*(0.25*grad_2_gt3[pp]*x61 + x54*x74) - x69*(0.25*x35*x45 + x82*(1.0*x26*x35 + 1.0*x57 - 1.0*x58)) - x69*(x42*x59 + x45*x74) - x72*(grad_1_gt5[pp]*x61 + x23*x39) + x72*(grad_2_gt5[pp]*x40 + x70) - x77*(x75 + x76) - x77*(grad_0_gt5[pp]*x59 + x35*x78) - 2.0*x8*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x66*x7 + 1.0*grad_1_chi[pp]*x23*x7 + 1.0*grad_2_chi[pp]*x7*x87) - x80*(0.25*x75 + 1.0*x76) - x80*(-x66*x84 + x85*x86) - x24/pow(chi[pp], 2)) - 12*grad2_2_2_alpha[pp] + 12.0*grad_1_alpha[pp]*x7*(0.5*gt5[pp]*x8*(grad_0_chi[pp]*x13 - grad_1_chi[pp]*x15 + grad_2_chi[pp]*x10) + x23);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At5[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt3[pp];
            double x6 = gt5[pp]*x5;
            double x7 = gt1[pp]*gt2[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 + gt3[pp]*x4 - gt4[pp]*x8 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = x11 - x7;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = gt2[pp]*gt4[pp];
            double x15 = x13 - x14;
            double x16 = gt0[pp]*gt5[pp];
            double x17 = x16 - x4;
            double x18 = gt1[pp]*gt4[pp];
            double x19 = gt2[pp]*gt3[pp];
            double x20 = x18 - x19;
            double x21 = -x3 + x5;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = 1.0/chi[pp];
            double x25 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x17 + grad_2_chi[pp]*x12;
            double x26 = 0.5*x7;
            double x27 = 0.5*x11 - x26;
            double x28 = 0.5*grad_0_gt5[pp];
            double x29 = -x28;
            double x30 = 1.0*grad_2_gt2[pp];
            double x31 = x29 + x30;
            double x32 = 0.5*grad_1_gt5[pp];
            double x33 = 1.0*grad_2_gt4[pp];
            double x34 = -x33;
            double x35 = x32 + x34;
            double x36 = grad_2_gt5[pp]*x27 + x15*x31 + x17*x35;
            double x37 = 0.5*gt5[pp]*x24*x25 + x36;
            double x38 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x20;
            double x39 = 0.5*x18 - 0.5*x19;
            double x40 = grad_2_gt5[pp]*x39;
            double x41 = x15*x35;
            double x42 = -x30;
            double x43 = x28 + x42;
            double x44 = -x23*x43 + x40 + x41;
            double x45 = x20*x43;
            double x46 = 1.0*x10;
            double x47 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x48 = -x11 + x7;
            double x49 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x48 + grad_2_chi[pp]*x21;
            double x50 = 1.0*x24;
            double x51 = x50*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x47*x49);
            double x52 = pow(x9, -2);
            double x53 = grad_2_gt0[pp]*x20;
            double x54 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x55 = grad_0_gt5[pp]*x21;
            double x56 = -x12*x54 + x55;
            double x57 = x53 + x56;
            double x58 = grad_0_gt5[pp]*x20;
            double x59 = grad_2_gt0[pp]*x23;
            double x60 = x15*x54 - x58 - x59;
            double x61 = grad_2_gt3[pp]*x15;
            double x62 = grad_1_gt5[pp]*x20;
            double x63 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x64 = -x23*x63 + x61 - x62;
            double x65 = grad_0_gt3[pp]*x15;
            double x66 = grad_1_gt0[pp]*x23;
            double x67 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x68 = x20*x67;
            double x69 = x65 - x66 - x68;
            double x70 = x23*x43 - x40 - x41;
            double x71 = 0.5*x14;
            double x72 = 0.5*x13 - x71;
            double x73 = 0.5*grad_0_gt3[pp];
            double x74 = 1.0*grad_1_gt1[pp];
            double x75 = x73 - x74;
            double x76 = 1.0*grad_1_gt4[pp];
            double x77 = 0.5*grad_2_gt3[pp];
            double x78 = x76 - x77;
            double x79 = x20*x78;
            double x80 = grad_1_gt3[pp]*x72 + x23*x75 - x79;
            double x81 = 0.5*grad_0_gt0[pp]*x23;
            double x82 = 1.0*grad_0_gt1[pp];
            double x83 = 0.5*grad_1_gt0[pp];
            double x84 = x82 - x83;
            double x85 = 1.0*grad_0_gt2[pp];
            double x86 = 0.5*grad_2_gt0[pp];
            double x87 = x85 - x86;
            double x88 = x20*x87;
            double x89 = x15*x84 - x81 - x88;
            double x90 = 2.0*x52;
            double x91 = 0.25*grad_0_gt5[pp];
            double x92 = -0.5*grad_2_gt2[pp] + x91;
            double x93 = x67*x70;
            double x94 = 4*x11 - 4*x7;
            double x95 = x52*x94;
            double x96 = x20*x63;
            double x97 = grad_2_gt3[pp]*x12;
            double x98 = grad_1_gt5[pp]*x21;
            double x99 = -x97 + x98;
            double x100 = x96 + x99;
            double x101 = grad_2_gt5[pp]*x100;
            double x102 = 0.5*grad_2_gt5[pp]*x21;
            double x103 = x12*x35;
            double x104 = x102 + x103 - x45;
            double x105 = grad_1_gt5[pp]*x104;
            double x106 = grad_0_gt5[pp]*x104;
            double x107 = x20*x90;
            double x108 = grad_2_gt0[pp]*x23;
            double x109 = -x15*x54 + x58;
            double x110 = x108 + x109;
            double x111 = 4*x18 - 4*x19;
            double x112 = 0.25*grad_1_gt5[pp];
            double x113 = (-0.5)*grad_2_gt4[pp] + x112;
            double x114 = x17*x54;
            double x115 = grad_0_gt5[pp]*x12 + grad_2_gt0[pp]*x15 - x114;
            double x116 = x36*x67;
            double x117 = 2.0*grad_0_gt2[pp];
            double x118 = 1.0*grad_2_gt0[pp];
            double x119 = x111*x52;
            double x120 = x23*x63 + x62;
            double x121 = x120 - x61;
            double x122 = 0.25*grad_2_gt0[pp];
            double x123 = 0.5*x67;
            double x124 = 4*x13 - 4*x14;
            double x125 = x124*x52;
            double x126 = 0.25*x63;
            double x127 = -x122;
            double x128 = x127 + x85;
            double x129 = -4*x2 + 4*x22;
            double x130 = -grad2_2_2_chi[pp];
            double x131 = -x102 - x103 + x45;
            double x132 = 2.0*x24;
            double x133 = grad_1_gt5[pp]*x12;
            double x134 = grad_2_gt3[pp]*x17;
            double x135 = x133 - x134 + x15*x63;
            double x136 = grad_0_gt3[pp]*x17;
            double x137 = grad_1_gt0[pp]*x15 + x12*x67 - x136;
            double x138 = 0.5*grad_1_gt3[pp];
            double x139 = x138*x17;
            double x140 = -x139;
            double x141 = x15*x75;
            double x142 = x12*x78 + x140 - x141;
            double x143 = x17*x84;
            double x144 = grad_0_gt0[pp]*x72 + x12*x87 - x143;
            double x145 = x144*x23;
            double x146 = grad_2_gt0[pp]*x20;
            double x147 = x12*x54 - x146 - x55;
            double x148 = x20*x63;
            double x149 = -x148 + x97 - x98;
            double x150 = grad_0_gt3[pp]*x12;
            double x151 = grad_1_gt0[pp]*x20;
            double x152 = x21*x67;
            double x153 = x150 - x151 - x152;
            double x154 = grad_1_gt3[pp]*x27 + x20*x75 - x21*x78;
            double x155 = grad_0_gt0[pp]*x39;
            double x156 = x21*x87;
            double x157 = x12*x84 - x155 - x156;
            double x158 = pow(grad_1_chi[pp], 2);
            double x159 = 3.0*x24;
            double x160 = -x159;
            double x161 = x17*(2*grad2_1_1_chi[pp] + x158*x160);
            double x162 = pow(grad_0_chi[pp], 2);
            double x163 = x23*(2*grad2_0_0_chi[pp] - 3.0*x162*x24);
            double x164 = pow(grad_2_chi[pp], 2);
            double x165 = x21*(2*grad2_2_2_chi[pp] - x159*x164);
            double x166 = 2*x13 - 2*x14;
            double x167 = grad_0_chi[pp]*x159;
            double x168 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x167;
            double x169 = 2*x18 - 2*x19;
            double x170 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x167;
            double x171 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x160)*(2*x11 - x8);
            double x172 = x142*x17;
            double x173 = -1.0*x115*x20 + x12*x135 + x137*x15 - x145 - x172 - x21*x36;
            double x174 = x131*x21;
            double x175 = x12*x149 - 1.0*x147*x20 + x15*x153 - x154*x17 - x157*x23 - x174;
            double x176 = x23*x89;
            double x177 = x12*x64 + x15*x69 - x17*x80 - x176 - 1.0*x20*x60 - x21*x70;
            double x178 = x12*x52;
            double x179 = 2.0*x178;
            double x180 = 0.25*grad_0_gt4[pp];
            double x181 = 0.75*grad_1_gt2[pp];
            double x182 = 0.25*grad_2_gt1[pp];
            double x183 = -x182;
            double x184 = x52*(4*x16 - 4*x4);
            double x185 = x184*(x180 + x181 + x183);
            double x186 = -4*x3 + 4*x5;
            double x187 = -x32;
            double x188 = pow(chi[pp], -2);
            double x189 = 4.0*x10;
            double x190 = x12*x189;
            double x191 = x15*x189;
            double x192 = 0.75*grad_0_gt4[pp];
            double x193 = 0.25*grad_1_gt2[pp];
            double x194 = x129*x52;
            double x195 = -x133 + x134 - x15*x63;
            double x196 = x113*x195;
            double x197 = 0.25*grad_2_gt3[pp]*x115;
            double x198 = x135*x54;
            double x199 = 0.25*x198;
            double x200 = -0.25*grad_2_gt3[pp];
            double x201 = grad_2_gt3[pp]*x36;
            double x202 = 2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x191 + 1.0*grad2_0_2_gt5[pp]*x10*x111 + 2.0*grad2_1_1_gt5[pp]*x10*x17 - grad2_1_2_gt5[pp]*x190 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - x107*(grad_1_gt5[pp]*x115 + x36*x54) - x115*x194*(x183 + x192 + x193) + 2.0*x12*x52*(grad_1_gt5[pp]*x135 + x201) + x124*x52*(x115*x78 + x199) + x125*(x123*x135 + x197) - x135*x184*(x200 + x76) - x164*x188 + x52*x94*(x196 + 2*x36*x78);
            double x203 = 0.25*grad_2_gt5[pp]*x149;
            double x204 = grad_1_gt5[pp]*x131;
            double x205 = -x64*x92;
            double x206 = grad_0_gt5[pp]*x131;
            double x207 = 0.25*grad_2_gt5[pp]*x147;
            double x208 = -x113*x115;
            double x209 = x109 + x59;
            double x210 = x209*x92;
            double x211 = x122*x64;
            double x212 = x149*x91;
            double x213 = 0.25*grad_1_gt5[pp]*x147;
            double x214 = x60*x63;
            double x215 = 0.25*x214;
            double x216 = grad_1_gt5[pp]*x149;
            double x217 = 3.0*x52;
            double x218 = x17*x217;
            double x219 = (-0.5)*gt0[pp]*gt4[pp] + x26;
            double x220 = -x13 + x14;
            double x221 = x187 + x33;
            double x222 = 6.0*x52;
            double x223 = grad_2_gt5[pp]*x149;
            double x224 = x63*x70;
            double x225 = grad_0_gt5[pp]*x147;
            double x226 = x217*x23;
            double x227 = x186*x52;
            double x228 = 2.0*x10;
            double x229 = -grad_0_chi[pp]*x177*x228 - grad_1_chi[pp]*x173*x228 - grad_2_chi[pp]*x175*x228 - x161 - x163 - x165 + x166*x168 - x169*x170 + x171;
            double x230 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x12 - grad_2_chi[pp]*x21;
            double x231 = grad_0_chi[pp]*x220 + grad_1_chi[pp]*x17 + grad_2_chi[pp]*x48;
            double x232 = grad_0_gt3[pp]*x137;
            double x233 = grad_2_gt3[pp]*x135;
            double x234 = x21*x217;
            double x235 = 0.25*grad_1_gt0[pp];
            double x236 = -x235;
            double x237 = -x193;
            double x238 = x182 + x237;
            double x239 = 0.75*grad_2_gt1[pp];
            double x240 = 0.25*grad_0_gt3[pp];
            double x241 = x135*x240;
            double x242 = 0.25*grad_2_gt3[pp]*x137;
            double x243 = grad_2_gt3[pp]*x142;
            double x244 = grad_0_gt3[pp]*x142;
            double x245 = x15*x52;
            double x246 = 2.0*x245;
            double x247 = 0.25*grad_1_gt3[pp]*x137;
            double x248 = 0.25*grad_1_gt3[pp]*x135;
            double x249 = grad_1_gt5[pp]*x154;
            double x250 = 0.25*grad_1_gt5[pp]*x153;
            double x251 = 0.5*grad_0_gt4[pp];
            double x252 = 0.5*grad_2_gt1[pp];
            double x253 = (-0.5)*grad_1_gt2[pp] + x251 + x252;
            double x254 = x63*x80;
            double x255 = x235*x64;
            double x256 = x154*x67;
            double x257 = x149*x67;
            double x258 = 0.25*x257;
            double x259 = x63*x69;
            double x260 = 0.25*x259;
            double x261 = 0.5*grad_1_gt4[pp] + x200;
            double x262 = x153*x261;
            double x263 = -0.5*grad_1_gt1[pp] + x240;
            double x264 = -x263*x64;
            double x265 = x149*x261;
            double x266 = -x65 + x66 + x68;
            double x267 = x263*x266;
            double x268 = (-0.5)*gt1[pp]*gt5[pp] + x71;
            double x269 = -x73 + x74;
            double x270 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x220 + grad_2_chi[pp]*x20;
            double x271 = -x180;
            double x272 = 0.25*grad_0_gt3[pp]*x115;
            double x273 = x235*x60;
            double x274 = x122*x69;
            double x275 = x153*x91;
            double x276 = grad_0_gt3[pp]*x144;
            double x277 = x137*x54;
            double x278 = 0.25*x277;
            double x279 = x147*x67;
            double x280 = 0.25*x279;
            double x281 = grad_0_gt5[pp]*x157;
            double x282 = 0.25*grad_0_gt0[pp]*x69;
            double x283 = 0.25*grad_0_gt0[pp]*x60;
            double x284 = x157*x67;
            double x285 = 0.5*grad_0_gt1[pp] + x236;
            double x286 = x115*x285;
            double x287 = x137*x285;
            double x288 = 0.5*grad_0_gt2[pp] + x127;
            double x289 = x153*x288;
            double x290 = x147*x288;
            double x291 = -x227;
            double x292 = 0.25*grad_1_gt5[pp]*x135;
            double x293 = x253*x70 + x64*x91;
            double x294 = -x131*x35;
            double x295 = x285*x60;
            double x296 = x288*x69;
            double x297 = x295 + x296;
            double x298 = x137*x67;
            double x299 = 0.25*x298;
            double x300 = x135*x261;
            double x301 = 0.5*grad_1_gt3[pp]*x36;
            double x302 = 0.25*grad_2_gt3[pp]*x135 + x301;
            double x303 = -0.25*x23*x63 + 0.25*x61 - 0.25*x62;
            double x304 = x303*x63;
            double x305 = x303*x67 + x70*x73;
            double x306 = x180 + x238;
            double x307 = x28*x80 + x306*x64;
            double x308 = 0.5*grad_2_gt5[pp]*x154;
            double x309 = x113*(x148 + x99) + x308;
            double x310 = 0.25*grad_1_gt5[pp]*x137;
            double x311 = x36*x73;
            double x312 = x197 + x311;
            double x313 = 0.25*x67;
            double x314 = x135*x313;
            double x315 = x131*x253 + x212;
            double x316 = x288*x64 + x70*x84;
            double x317 = x306*x60;
            double x318 = 0.5*grad_1_gt0[pp]*x70;
            double x319 = x318 + x69*x91;
            double x320 = 0.5*grad_1_gt2[pp];
            double x321 = (-0.5)*grad_2_gt1[pp] + x251 + x320;
            double x322 = x131*x321;
            double x323 = -x113*x147;
            double x324 = 0.25*grad_2_gt5[pp]*x153;
            double x325 = x323 + x324;
            double x326 = x137*x261;
            double x327 = 0.25*grad_2_gt0[pp]*x15 - 0.25*x114 + x12*x91;
            double x328 = grad_1_gt3[pp]*x327;
            double x329 = x241 + x328;
            double x330 = x209*x263;
            double x331 = x285*x64 + x80*x87;
            double x332 = x142*x321;
            double x333 = x147*x261;
            double x334 = x154*x28;
            double x335 = x149*x306 + x334;
            double x336 = x142*x78;
            double x337 = x240*x64 + x321*x80;
            double x338 = 0.25*grad_2_gt3[pp]*x149;
            double x339 = grad_1_gt5[pp]*x153;
            double x340 = grad_2_gt3[pp]*x147 + x339;
            double x341 = x67*x69;
            double x342 = grad_1_gt0[pp]*x64;
            double x343 = grad_0_gt3[pp]*x60 + x342;
            double x344 = grad_0_gt5[pp]*x153;
            double x345 = x147*x54;
            double x346 = x344 + x345;
            double x347 = 1.0*x52;
            double x348 = x23*x347;
            double x349 = -x190;
            double x350 = -x191;
            double x351 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x350 + 1.0*grad2_0_2_gt4[pp]*x10*x111 + 2.0*grad2_1_1_gt4[pp]*x10*x17 + grad2_1_2_gt4[pp]*x349 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x177*x52 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x188 + 2.0*grad_1_gt4[pp]*x173*x52 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x175*x52 + 1.0*gt4[pp]*x10*x229*x24 - x132*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x47*(grad_2_gt3[pp]*x220 + x120) + 0.5*grad_1_chi[pp]*x47*(grad_1_gt5[pp]*x48 + x134 + x220*x63) + 0.5*grad_2_chi[pp]*x47*(grad_2_gt3[pp]*x48 + x96 + x98));
            double x352 = -grad_1_chi[pp];
            double x353 = 2.0*grad_2_alpha[pp];
            double x354 = -grad_2_chi[pp];
            double x355 = 2.0*grad_1_alpha[pp];
            double x356 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x24*x38 - 2.0*x23*x63 + 2.0*x61 - 2.0*x62) + x353*(1.0*grad_2_gt3[pp]*x10*x12 - x148*x46 - x46*x98 + x50*(1.0*gt4[pp]*x47*x49 + x352)) + x355*(1.0*grad_1_gt5[pp]*x10*x12 + 1.0*x10*x15*x63 - x134*x46 + x50*(1.0*gt4[pp]*x231*x47 + x354));
            double x357 = x60*x91;
            double x358 = (-0.5)*grad_0_gt4[pp] + x252 + x320;
            double x359 = 0.25*grad_1_gt5[pp]*x115 + x358*x36;
            double x360 = -x131*x43;
            double x361 = 0.25*grad_1_gt0[pp]*x115 + x144*x321;
            double x362 = x87*x89;
            double x363 = 0.25*grad_2_gt0[pp]*x147;
            double x364 = 0.5*x115*x78 - x36*x75;
            double x365 = x131*x358 + x213;
            double x366 = x313*x60 + x318;
            double x367 = x135*x63;
            double x368 = 0.25*x367;
            double x369 = -x149*x92;
            double x370 = x324 + x369;
            double x371 = x288*x60;
            double x372 = 0.5*grad_0_gt0[pp]*x70;
            double x373 = x122*x60 + x372;
            double x374 = x327*x54;
            double x375 = 0.5*grad_1_gt0[pp]*x36 + x327*x67;
            double x376 = x144*x32 + x327*x63;
            double x377 = 0.5*grad_2_gt5[pp]*x157;
            double x378 = x377 + x92*(x146 + x56);
            double x379 = 0.25*grad_0_gt0[pp]*x64;
            double x380 = x273 + x379;
            double x381 = x321*x89;
            double x382 = x135*x285;
            double x383 = -0.5*x115*x75 + x144*x78;
            double x384 = x149*x288;
            double x385 = 0.5*grad_1_gt5[pp]*x157;
            double x386 = x126*x147 + x385;
            double x387 = x195*x263;
            double x388 = x326 + x387;
            double x389 = 0.25*x341;
            double x390 = grad_2_gt0[pp]*x149;
            double x391 = grad_0_gt3[pp]*x115;
            double x392 = grad_1_gt0[pp]*x135;
            double x393 = x149*x63;
            double x394 = x17*x347;
            double x395 = -grad_0_chi[pp]*x188;
            double x396 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x350 + 1.0*grad2_0_2_gt2[pp]*x10*x111 + 2.0*grad2_1_1_gt2[pp]*x10*x17 + grad2_1_2_gt2[pp]*x349 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x177*x52 + 2.0*grad_1_gt2[pp]*x173*x52 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x395 + 2.0*grad_2_gt2[pp]*x175*x52 + 1.0*gt2[pp]*x10*x229*x24 - x132*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x47*(x108 + x220*x54 + x58) + 0.5*grad_1_chi[pp]*x47*(grad_0_gt5[pp]*x48 + grad_2_gt0[pp]*x220 + x17*x54) + 0.5*grad_2_chi[pp]*x47*(x48*x54 + x53 + x55));
            double x397 = -grad_0_chi[pp];
            double x398 = 2.0*grad_0_alpha[pp];
            double x399 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x24*x25 + x115) + x353*(1.0*x10*x12*x54 - x146*x46 - x46*x55 + x50*(1.0*gt2[pp]*x47*x49 + x397)) + x398*(1.0*x10*x15*x54 - x46*x58 - x46*x59 + x50*(1.0*gt2[pp]*x270*x47 + x354));
            double x400 = 0.25*x345;
            double x401 = 0.25*grad_1_gt5[pp]*x149;
            double x402 = x266*x92;
            double x403 = x142*x253;
            double x404 = 0.25*grad_2_gt3[pp]*x147 + x334;
            double x405 = x240*x60;
            double x406 = 0.5*grad_2_gt0[pp]*x80;
            double x407 = grad_0_gt5[pp]*x69;
            double x408 = grad_2_gt0[pp]*x64;
            double x409 = x408 + x54*x60;
            double x410 = x20*x347;
            double x411 = grad_1_gt5[pp]*x137;
            double x412 = grad_2_gt3[pp]*x115;
            double x413 = x198 + x412;
            double x414 = x277 + x391;
            double x415 = -x119;
            double x416 = -x113*x137;
            double x417 = x147*x91;
            double x418 = x273 + x274;
            double x419 = x358*x89 + x379;
            double x420 = x122*x149 + x385;
            double x421 = 0.25*x393;
            double x422 = x144*x77;
            double x423 = x135*x235 + x422;
            double x424 = -x194;
            double x425 = x323 + x369;
            double x426 = x84*x89;
            double x427 = x122*x153 + x157*x253;
            double x428 = 0.25*grad_1_gt0[pp]*x137;
            double x429 = 0.5*x153;
            double x430 = -x154*x43 - x35*x429;
            double x431 = x328 + x387;
            double x432 = x142*x358 + x242;
            double x433 = x255 + x406;
            double x434 = x306*x69;
            double x435 = x274 + x379;
            double x436 = x253*x89;
            double x437 = -x157*x35 - x429*x43;
            double x438 = 0.25*x137*x63 + x422;
            double x439 = 0.25*x150 - 0.25*x151 - 0.25*x152;
            double x440 = x439*x67;
            double x441 = 0.5*grad_2_gt0[pp]*x154 + x153*x306;
            double x442 = x285*x69;
            double x443 = 0.5*grad_0_gt0[pp]*x80;
            double x444 = x235*x69 + x443;
            double x445 = 0.5*grad_2_gt3[pp]*x157 + x439*x63;
            double x446 = x138*x144;
            double x447 = x263*(-grad_1_gt0[pp]*x15 - x12*x67 + x136) + x446;
            double x448 = x240*x69;
            double x449 = 0.25*grad_2_gt3[pp]*x153 + x154*x358;
            double x450 = -x142*x75;
            double x451 = x21*x347;
            double x452 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x350 + 1.0*grad2_0_2_gt1[pp]*x10*x111 + 2.0*grad2_1_1_gt1[pp]*x10*x17 + grad2_1_2_gt1[pp]*x349 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x177*x52 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x395 + 2.0*grad_1_gt1[pp]*x173*x52 + 2.0*grad_2_gt1[pp]*x175*x52 + 1.0*gt1[pp]*x10*x229*x24 - x132*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x47*(grad_0_gt3[pp]*x220 + grad_1_gt0[pp]*x23 + x20*x67) + 0.5*grad_1_chi[pp]*x47*(grad_1_gt0[pp]*x220 + x136 + x48*x67) + 0.5*grad_2_chi[pp]*x47*(grad_0_gt3[pp]*x48 + grad_1_gt0[pp]*x20 + x21*x67));
            double x453 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x230*x24 + 2.0*x150 - 2.0*x151 - 2.0*x152) + x355*(1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x12*x67 - x136*x46 + x50*(1.0*gt1[pp]*x231*x47 + x397)) + x398*(1.0*grad_0_gt3[pp]*x10*x15 - x46*x66 - x46*x68 + x50*(1.0*gt1[pp]*x270*x47 + x352));
            double x454 = 0.25*grad_0_gt3[pp]*x137;
            _4165[pp] = 2*At2[pp]*grad_2_beta0[pp] + 2*At4[pp]*grad_2_beta1[pp] - 0.66666666666666663*At5[pp]*grad_1_beta1[pp] + 4.0*At5[pp]*grad_2_beta2[pp]*x0 - alpha[pp]*(2.0*At2[pp]*x10*(-At2[pp]*x23 + At4[pp]*x15 - At5[pp]*x20) + 2.0*At4[pp]*x10*(At2[pp]*x15 - At4[pp]*x17 + At5[pp]*x12) - At5[pp]*K[pp] + 2.0*At5[pp]*x10*(-At2[pp]*x20 + At4[pp]*x12 + x1*x21)) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(3.0*grad_0_gt5[pp]*x23*x52*x57 - grad_0_gt5[pp]*x90*(-1.0*x12*x64 - 1.0*x15*x69 + x17*x80 + x20*x60 + x21*x70 + x23*x89) + 3.0*grad_1_gt5[pp]*x100*x17*x52 - grad_1_gt5[pp]*x90*(x115*x20 - 1.0*x12*x135 - 1.0*x137*x15 + x142*x17 + x145 + x21*x36) + 6.0*grad_2_gt5[pp]*x104*x21*x52 - grad_2_gt5[pp]*x90*(-1.0*x12*x149 + x131*x21 + x147*x20 - 1.0*x15*x153 + x154*x17 + x157*x23) - gt5[pp]*x10*x50*(2.0*grad_0_chi[pp]*x10*x177 + 2.0*grad_1_chi[pp]*x10*x173 + 2.0*grad_2_chi[pp]*x10*x175 + x161 + x163 + x165 - x166*x168 + x169*x170 - x171) + x107*(grad_2_gt5[pp]*x57 + x106) + x110*x128*x129*x52 + x111*x52*(0.25*grad_2_gt5[pp]*x57 + 1.0*x106) + x111*x52*(x113*x115 - 1.0*x116) - x119*(x110*x92 + x44*(-x117 + x118)) + x121*x185 - x125*(0.25*grad_1_gt5[pp]*x57 + x100*x28) - x125*(0.5*grad_1_gt5[pp]*x57 + x100*x91) - x125*(x110*x123 + x121*x122) - x125*(x110*x126 + x87*(1.0*x23*x63 - 1.0*x61 + 1.0*x62)) - x132*(1.0*grad_0_chi[pp]*x10*x70 + 1.0*grad_1_chi[pp]*x10*x36 + 1.0*grad_2_chi[pp]*x10*x131 + x130) - x179*(x101 + x105) - x179*(grad_0_gt5[pp]*x121 + x44*x63) + x186*x36*x52*(x187 + x34) + x186*x52*x70*(x29 + x42) + 2.0*x20*x52*(grad_0_gt5[pp]*x110 + grad_2_gt0[pp]*x44) + x202 - x95*(0.25*x101 + 1.0*x105) - x95*(x64*x92 - 1.0*x93)) - 12*grad2_2_2_alpha[pp] - 12.0*grad_0_alpha[pp]*x10*(-0.5*gt5[pp]*x24*x38 + x44) + 12.0*grad_1_alpha[pp]*x10*x37 - 12*grad_2_alpha[pp]*(0.5*grad_2_gt5[pp]*x10*x21 + 1.0*x10*x12*x35 - x45*x46 - x51) + 1.0*gt5[pp]*x10*(-x12*(alpha[pp]*(-x119*(x212 + x325) - x119*(x315 + x324) - x119*(x316 + x402) + 2.0*x12*x52*(grad_1_gt5[pp]*x142 + x233) + x125*(x250 + x335) + x125*(x250 + x404) + x125*(x260 + x331) + x125*(x241 + x242 + x332) + x125*(x326 + x328 + x403) + x125*(x389 + x405 + x406) - x184*(1.0*x249 + x338) - x184*(0.5*x254 + x337) - x184*(x142*x77 + x248 + x336) - x194*(x274 + x297) - x194*(x153*x28 + x400) - x227*(0.5*x223 + x294) + x291*(x205 + x293) + x291*(0.5*grad_2_gt3[pp]*x36 + x196 + x292) - x348*(x298 + x414) + x351 - x410*(x407 + x409) - x410*(x411 + x413) + x415*(x311 + x314 + x416) + x95*(x304 + x307) + x95*(x305 - x43*x80) + x95*(x309 + x401) + x95*(x131*x77 + x308 + x401) + x95*(x142*x221 + x300 + x301)) + x356) - x12*(alpha[pp]*(-x119*(x213 + x315) - x119*(x215 + x316) - x119*(x310 + x312) - x119*(x312 + x314) - x119*(x317 + x319) - x119*(x322 + x325) + 2.0*x12*x52*(grad_2_gt3[pp]*x131 + x216) + x125*(x326 + x329) + x125*(x329 + x332) + x125*(x330 + x331) + x125*(x333 + x335) - x184*(x264 + x337) - x184*(0.5*grad_1_gt3[pp]*x135 + x336) - x184*(x154*x32 + x265 + x338) - x194*(x273 + x297) - x194*(0.5*grad_0_gt3[pp]*x115 + x299) - x227*(0.5*x224 + x293) - x227*(x131*x32 + x203 + x294) + x245*(x257 + x340) + x245*(x341 + x343) + x291*(1.0*x201 + x292) - x348*(x279 + x346) + x351 + x95*(x300 + x302) + x95*(x304 + x305) + x95*(x131*x78 + x309) + x95*(x142*x32 + x302) + x95*(x269*x70 + x307)) + x356) - x15*(alpha[pp]*(-x119*(x280 + x437) - x119*(x295 + x419) - x119*(x400 + x420) - x119*(x418 + x436) + x125*(x440 + x445) + x125*(x447 + x454) + x125*(x157*x78 + x441) + x125*(0.5*grad_1_gt0[pp]*x142 + x446 + x454) + x125*(x269*x89 + x442 + x443) + 2.0*x15*x52*(grad_0_gt3[pp]*x89 + grad_1_gt0[pp]*x69) + x178*(x259 + x343) + x178*(x340 + x393) - x184*(x262 + x449) - x184*(0.5*grad_1_gt3[pp]*x137 + x450) - x184*(0.5*grad_1_gt0[pp]*x80 + x267 + x448) - x194*(0.5*x284 + x427) - x194*(0.5*grad_1_gt0[pp]*x89 + x282 + x426) + x291*(x213 + x425) + x291*(0.5*grad_2_gt3[pp]*x115 + x368) + x415*(x272 + x423) + x415*(x272 + x438) + x424*(1.0*x276 + x428) - x451*(x214 + x409) + x452 + x95*(x242 + x431) + x95*(x328 + x432) + x95*(x333 + x430) + x95*(x330 + x406 + x434)) + x453) + x17*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x191 + 1.0*grad2_0_2_gt3[pp]*x10*x111 + 2.0*grad2_1_1_gt3[pp]*x10*x17 - grad2_1_2_gt3[pp]*x190 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 2.0*grad_0_gt3[pp]*x177*x52 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x172*x222 + 2.0*grad_1_gt3[pp]*x173*x52 + 2.0*grad_2_gt3[pp]*x175*x52 + 1.0*gt3[pp]*x10*x229*x24 - x119*(x260 + x64*x84) - x119*(0.5*grad_2_gt3[pp]*x137 + x241) - x119*(x135*x73 + x242) - x119*(x149*x253 + x250) - x119*(-1.0*x153*x35 + x258) - x119*(x253*x69 + x255) + 2.0*x12*x52*(grad_0_gt3[pp]*x64 + x254) + 2.0*x12*x52*(grad_1_gt3[pp]*x135 + x243) + 2.0*x12*x52*(grad_2_gt3[pp]*x149 + x249) + x124*x52*(x267 + 2*x80*x84) + x124*x52*(x154*x54 + x262) + x125*(1.0*x244 + x247) - x132*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x47*(grad_1_gt3[pp]*x268 + x23*x269 + x79) + 1.0*grad_1_chi[pp]*x47*(x139 + x220*x269 + x48*x78) + 1.0*grad_2_chi[pp]*x47*(grad_1_gt3[pp]*x219 + x20*x269 + x21*x78)) - x149*x227*(-x112 + x33) + 2.0*x15*x52*(grad_0_gt3[pp]*x69 + grad_1_gt0[pp]*x80) - x153*x194*(x192 + x238) - x154*x184*(x76 + x77) - x158*x188 - x184*x80*(x73 + x74) - x194*x69*(x236 + x82) - x226*x232 - x227*x64*(x180 + x237 + x239) - x233*x234 + x246*(grad_1_gt3[pp]*x137 + x244) + x246*(grad_2_gt3[pp]*x153 + x256) + x52*x94*(x264 + x54*x80) + x52*x94*(-2*x154*x35 + x265) + x95*(1.0*x243 + x248)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x24*x38 + x80) + 4*grad_1_alpha[pp]*(1.0*x10*x12*x78 + 1.0*x10*x140 - x141*x46 + x50*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x231*x47)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x230*x24 + x154)) + x20*(alpha[pp]*(-x107*(grad_0_gt5[pp]*x89 + grad_2_gt0[pp]*x60) - x119*(x378 + x417) - x119*(0.5*grad_2_gt0[pp]*x131 + x377 + x417) - x119*(x31*x89 + x371 + x372) + x125*(x275 + x386) + x125*(x275 + x420) + x125*(x278 + x383) + x125*(x296 + x419) + x125*(x299 + x423) + x125*(x381 + x418) + x178*(x214 + x407 + x408) + x178*(x367 + x411 + x412) - x184*(x242 + x388) - x184*(0.5*grad_1_gt5[pp]*x153 + x421) - x194*(1.0*x281 + x363) - x194*(0.5*grad_2_gt0[pp]*x89 + x283 + x362) - x227*(0.5*grad_2_gt0[pp]*x70 + x210 + x357) + x291*(x208 + x359) + x291*(0.5*grad_2_gt5[pp]*x147 + x360) - x394*(x259 + x341 + x342) + x396 + x415*(x374 + x376) + x415*(x144*x221 + x375) + x424*(x144*x253 + x361) + x95*(x213 + x370) + x95*(x324 + x365) + x95*(x364 + x416) + x95*(x366 + x402)) + x399) + x20*(alpha[pp]*(-x107*(grad_2_gt0[pp]*x131 + x225) - x119*(x371 + x373) - x119*(x374 + x375) - x119*(x131*x87 + x378) - x119*(x28*x89 + x373) - x119*(x36*x84 + x376) + x125*(x296 + x380) + x125*(x380 + x381) + x125*(x382 + x383) + x125*(x384 + x386) - x184*(x241 + x388) - x184*(0.5*grad_1_gt0[pp]*x64 + x389) - x194*(x286 + x361) - x194*(0.5*grad_0_gt0[pp]*x60 + x362) - x194*(x157*x28 + x290 + x363) - x227*(x253*x36 + x359) - x227*(x131*x28 + x207 + x360) + x245*(x279 + x344 + x390) + x245*(x298 + x391 + x392) + x291*(1.0*grad_2_gt0[pp]*x70 + x357) - x394*(x257 + x339 + x393) + x396 + x95*(x199 + x364) + x95*(x211 + x319) + x95*(x211 + x366) + x95*(x212 + x365) + x95*(x322 + x370) + x95*(x310 + x311 + x368)) + x399) + x21*(alpha[pp]*(2.0*grad_0_gt5[pp]*x177*x52 + 2.0*grad_1_gt5[pp]*x173*x52 - grad_2_gt5[pp]*x174*x222 + 2.0*grad_2_gt5[pp]*x175*x52 + 1.0*gt5[pp]*x10*x229*x24 - x107*(grad_0_gt5[pp]*x60 + grad_2_gt0[pp]*x70) - x107*(grad_2_gt5[pp]*x147 + x206) - x119*(x116 + x208) - x119*(1.0*x206 + x207) - x119*(x210 + x70*(x117 - x118)) + 2.0*x12*x52*(x204 + x223) + 2.0*x12*x52*(grad_0_gt5[pp]*x64 + x224) + x124*x52*(x215 + x64*x87) + x125*(0.5*grad_1_gt5[pp]*x147 + x212) + x125*(x123*x60 + x211) + x125*(x149*x28 + x213) - x128*x194*x60 - x132*(1.0*grad_0_chi[pp]*x47*(x220*x221 + x23*x31 + x40) + 1.0*grad_1_chi[pp]*x47*(grad_2_gt5[pp]*x219 + x17*x221 + x220*x31) + 1.0*grad_2_chi[pp]*x47*(x102 + x20*x31 + x221*x48) + x130) - x185*x64 + x202 - x216*x218 - x225*x226 - x227*x36*(x32 + x33) - x227*x70*(x28 + x30) + x52*x94*(x205 + x93) + x95*(x203 + 1.0*x204)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x24*x38 + x70) + 4.0*grad_1_alpha[pp]*x10*x37 + 4*grad_2_alpha[pp]*(-x10*x102 + 1.0*x10*x20*x43 - x103*x46 + x51)) + x220*(alpha[pp]*(-x119*(x295 + x435) - x119*(x382 + x438) - x119*(x384 + x437) - x119*(x435 + x436) + x125*(x440 + x441) + x125*(x442 + x444) + x125*(x444 + x73*x89) + x125*(x142*x84 + x447) + x125*(x154*x87 + x445) - x184*(0.5*x256 + x449) - x184*(1.0*grad_1_gt0[pp]*x80 + x448) - x184*(x142*x73 + x247 + x450) - x194*(x289 + x427) - x194*(0.5*grad_0_gt0[pp]*x69 + x426) - x194*(x144*x73 + x287 + x428) - x227*(0.5*grad_2_gt0[pp]*x64 + x317) + x246*(grad_1_gt0[pp]*x142 + x232) + x291*(x212 + x425) - x410*(x346 + x390) - x410*(x392 + x414) - x451*(x367 + x413) + x452 + x95*(x241 + x432) + x95*(x258 + x430) + x95*(x403 + x431) + x95*(x404 + x421) + x95*(x405 + x433) + x95*(x433 + x434)) + x453) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x191 + 1.0*grad2_0_2_gt0[pp]*x10*x111 + 2.0*grad2_1_1_gt0[pp]*x10*x17 - grad2_1_2_gt0[pp]*x190 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x176*x222 + 2.0*grad_0_gt0[pp]*x177*x52 + 2.0*grad_1_gt0[pp]*x173*x52 - grad_1_gt0[pp]*x218*x69 + 2.0*grad_2_gt0[pp]*x175*x52 - grad_2_gt0[pp]*x234*x60 + 1.0*gt0[pp]*x10*x229*x24 - x107*(grad_0_gt0[pp]*x60 + grad_2_gt0[pp]*x89) - x107*(grad_1_gt0[pp]*x115 + x144*x54) - x107*(grad_2_gt0[pp]*x147 + x281) - x115*x227*(x193 + x239 + x271) - x119*(1.0*grad_2_gt0[pp]*x89 + x283) - x119*(x144*x63 + x286) - x119*(x157*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp]) + x290) + x124*x52*(-2*x144*x75 + x287) + x124*x52*(x157*x63 + x289) + x125*(1.0*grad_1_gt0[pp]*x89 + x282) - x132*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x47*(0.5*grad_0_gt0[pp]*x23 + x20*x87 + x220*x84) + 1.0*grad_1_chi[pp]*x47*(grad_0_gt0[pp]*x268 + x143 + x48*x87) + 1.0*grad_2_chi[pp]*x47*(x155 + x156 + x48*x84)) - x137*x184*(-x240 + x74) - x144*x194*(x82 + x83) - x147*x227*(x30 - x91) - x153*x184*(x181 + x182 + x271) - x157*x194*(x85 + x86) - x162*x188 + x246*(grad_0_gt0[pp]*x69 + grad_1_gt0[pp]*x89) + x246*(grad_1_gt0[pp]*x137 + x276) + x246*(grad_2_gt0[pp]*x153 + x284) + x95*(0.5*grad_1_gt0[pp]*x60 + x274) + x95*(0.5*grad_2_gt0[pp]*x69 + x273) + x95*(-1.0*x115*x75 + x278) + x95*(0.5*x137*x63 + x272) + x95*(0.5*x147*x63 + x275) + x95*(-1.0*x153*x43 + x280)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x15*x84 - x10*x81 - x46*x88 + x50*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x270*x47)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x24*x25 + x144) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x230*x24 + x157)))) + 2.0*grad_0_beta0[pp]*x0*x1;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt3[pp]*gt5[pp];
            double x1 = pow(gt4[pp], 2);
            double x2 = x0 - x1;
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*x0;
            double x6 = gt1[pp]*gt4[pp];
            double x7 = 2*x6;
            double x8 = gt0[pp]*x1 - gt2[pp]*x7 + gt3[pp]*x4 + gt5[pp]*x3 - x5;
            double x9 = 1.0/x8;
            double x10 = 1.0*grad_0_gt2[pp];
            double x11 = 0.5*grad_2_gt0[pp];
            double x12 = x10 - x11;
            double x13 = gt2[pp]*gt3[pp];
            double x14 = -x13 + x6;
            double x15 = 1.0*grad_0_gt1[pp];
            double x16 = 0.5*grad_1_gt0[pp];
            double x17 = x15 - x16;
            double x18 = gt1[pp]*gt5[pp];
            double x19 = gt2[pp]*gt4[pp];
            double x20 = x18 - x19;
            double x21 = x17*x20;
            double x22 = 1.0/chi[pp];
            double x23 = 1.0*x22;
            double x24 = pow(grad_0_chi[pp], 2);
            double x25 = gt0[pp]*gt5[pp];
            double x26 = x25 - x4;
            double x27 = gt0[pp]*gt3[pp];
            double x28 = x27 - x3;
            double x29 = -4*x13 + 4*x6;
            double x30 = gt0[pp]*gt4[pp];
            double x31 = gt1[pp]*gt2[pp];
            double x32 = x30 - x31;
            double x33 = 4.0*x9;
            double x34 = pow(x8, -2);
            double x35 = grad_0_gt3[pp]*x20;
            double x36 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x37 = grad_1_gt0[pp]*x2 + x14*x36 - x35;
            double x38 = grad_0_gt5[pp]*x14;
            double x39 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x40 = grad_2_gt0[pp]*x2 - x20*x39 + x38;
            double x41 = -1.0*grad_1_gt1[pp];
            double x42 = 4*x25 - 4*x4;
            double x43 = -grad_0_gt3[pp]*x26 + grad_1_gt0[pp]*x20 + x32*x36;
            double x44 = 0.25*grad_0_gt5[pp];
            double x45 = 1.0*grad_2_gt2[pp];
            double x46 = -x45;
            double x47 = 4*x27 - 4*x3;
            double x48 = -grad_2_gt0[pp]*x14;
            double x49 = grad_0_gt5[pp]*x28;
            double x50 = x32*x39 + x48 - x49;
            double x51 = -0.25*grad_0_gt4[pp];
            double x52 = grad_0_gt3[pp]*x32;
            double x53 = grad_1_gt0[pp]*x14 + x28*x36 - x52;
            double x54 = grad_0_gt5[pp]*x32 + grad_2_gt0[pp]*x20 - x26*x39;
            double x55 = 0.5*grad_0_gt0[pp]*x2 + x12*x14 - x21;
            double x56 = 4*x0 - 4*x1;
            double x57 = -0.5*x13 + 0.5*x6;
            double x58 = grad_0_gt0[pp]*x57;
            double x59 = x12*x28;
            double x60 = -x17*x32 + x58 + x59;
            double x61 = 0.5*x18 - 0.5*x19;
            double x62 = grad_0_gt0[pp]*x61 + x12*x32 - x17*x26;
            double x63 = 0.25*grad_1_gt0[pp];
            double x64 = x34*(4*x30 - 4*x31);
            double x65 = x32*x39;
            double x66 = grad_2_gt0[pp]*x14 + x49 - x65;
            double x67 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x68 = 2.0*x34;
            double x69 = x14*x68;
            double x70 = 2.0*x20*x34;
            double x71 = 4*x18 - 4*x19;
            double x72 = x34*x71;
            double x73 = 0.5*grad_0_gt3[pp] + x41;
            double x74 = 0.5*grad_0_gt5[pp];
            double x75 = x46 + x74;
            double x76 = -grad_1_gt0[pp]*x14 - x28*x36 + x52;
            double x77 = 0.5*grad_0_gt2[pp] - 0.25*grad_2_gt0[pp];
            double x78 = 0.5*grad_0_gt1[pp] - x63;
            double x79 = x29*x34;
            double x80 = -0.5*grad_0_gt0[pp]*x2 - x12*x14 + x17*x20;
            double x81 = x17*x32 - x58 - x59;
            double x82 = grad_1_gt5[pp]*x32 - grad_2_gt3[pp]*x26 + x20*x67;
            double x83 = 0.5*x30 - 0.5*x31;
            double x84 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x85 = grad_2_gt5[pp]*x83 + x20*(x45 - x74) + x26*x84;
            double x86 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x87 = -0.5*grad_1_gt3[pp]*x26 - x20*x73 + x32*x86;
            double x88 = x2*x62;
            double x89 = -grad_1_gt5[pp]*x28 + grad_2_gt3[pp]*x32 - x14*x67;
            double x90 = -0.5*grad_2_gt5[pp]*x28 + x14*x75 - x32*x84;
            double x91 = grad_1_gt3[pp]*x83 + x14*x73 - x28*x86;
            double x92 = -grad_2_gt0[pp]*x2 + x20*x39 - x38;
            double x93 = -grad_1_gt5[pp]*x14 + grad_2_gt3[pp]*x20 - x2*x67;
            double x94 = -grad_1_gt0[pp]*x2 - x14*x36 + x35;
            double x95 = -grad_2_gt5[pp]*x57 + x2*x75 - x20*x84;
            double x96 = grad_1_gt3[pp]*x61 - x14*x86 + x2*x73;
            double x97 = 3.0*x22;
            double x98 = -x97;
            double x99 = grad_0_chi[pp]*x97;
            _3108[pp] = 3*alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x2*x9 - grad2_0_1_gt0[pp]*x20*x33 + 1.0*grad2_0_2_gt0[pp]*x29*x9 + 2.0*grad2_1_1_gt0[pp]*x26*x9 - grad2_1_2_gt0[pp]*x32*x33 + 2.0*grad2_2_2_gt0[pp]*x28*x9 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] + 6.0*grad_0_gt0[pp]*x2*x34*x55 - grad_0_gt0[pp]*x68*(x14*x92 + x2*x80 - 1.0*x20*x94 + x26*x96 + x28*x95 - 1.0*x32*x93) + 3.0*grad_1_gt0[pp]*x26*x34*x37 - grad_1_gt0[pp]*x68*(x14*x54 - 1.0*x20*x43 + x26*x87 + x28*x85 - 1.0*x32*x82 + x88) + 3.0*grad_2_gt0[pp]*x28*x34*x40 - grad_2_gt0[pp]*x68*(x14*x50 + x2*x81 - 1.0*x20*x76 + x26*x91 + x28*x90 - 1.0*x32*x89) - gt0[pp]*x23*x9*(2.0*grad_0_chi[pp]*x9*(-1.0*x14*x92 - x2*x80 + x20*x94 - x26*x96 - x28*x95 + x32*x93) + 2.0*grad_1_chi[pp]*x9*(-1.0*x14*x54 + x20*x43 - x26*x87 - x28*x85 + x32*x82 - x88) + 2.0*grad_2_chi[pp]*x9*(-1.0*x14*x50 - x2*x81 + x20*x76 - x26*x91 - x28*x90 + x32*x89) + x2*(2*grad2_0_0_chi[pp] - 3.0*x22*x24) + x26*(2*grad2_1_1_chi[pp] + pow(grad_1_chi[pp], 2)*x98) + x28*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x97) - (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x99)*(2*x18 - 2*x19) + (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x99)*(-2*x13 + x7) - (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x98)*(2*x30 - 2*x31)) - 2.0*x22*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x80*x9 + 1.0*grad_1_chi[pp]*x62*x9 + 1.0*grad_2_chi[pp]*x81*x9) + x29*x34*(0.25*grad_0_gt0[pp]*x40 + 1.0*grad_2_gt0[pp]*x55) + x34*x42*x43*(0.25*grad_0_gt3[pp] + x41) + x34*x42*x53*(0.75*grad_1_gt2[pp] + 0.25*grad_2_gt1[pp] + x51) + x34*x47*x50*(x44 + x46) - x34*x47*x54*(0.25*grad_1_gt2[pp] + 0.75*grad_2_gt1[pp] + x51) + x34*x56*x60*(x10 + x11) - x34*x56*x62*(x15 + x16) + x34*x71*(x43*x78 - 2*x62*x73) + x64*(0.25*grad_0_gt3[pp]*x54 + 0.5*x43*x67) - x64*(0.5*grad_1_gt0[pp]*x40 + 0.25*grad_2_gt0[pp]*x37) - x64*(0.5*grad_2_gt0[pp]*x37 + x40*x63) - x64*(-0.25*x36*x50 + x75*x76) - x64*(-0.25*x39*x43 + x54*x73) - x64*(x44*x53 + 0.5*x66*x67) + x69*(grad_0_gt0[pp]*x40 + grad_2_gt0[pp]*x55) + x69*(grad_0_gt5[pp]*x60 + grad_2_gt0[pp]*x66) - x69*(grad_1_gt0[pp]*x54 + x39*x62) - x70*(grad_0_gt0[pp]*x37 + grad_1_gt0[pp]*x55) + x70*(grad_0_gt3[pp]*x62 + grad_1_gt0[pp]*x43) - x70*(grad_2_gt0[pp]*x53 + x36*x60) - x72*(0.25*grad_0_gt0[pp]*x37 + 1.0*grad_1_gt0[pp]*x55) - x72*(x53*x77 + 1.0*x60*x67) - x79*(x54*x78 + x62*x67) - x79*(x60*(grad_0_gt5[pp] - 2.0*grad_2_gt2[pp]) + x77*(x48 - x49 + x65)) - x24/pow(chi[pp], 2)) - 12*grad2_0_0_alpha[pp] - 12*grad_0_alpha[pp]*(0.5*grad_0_gt0[pp]*x2*x9 + 1.0*x12*x14*x9 - 1.0*x21*x9 - x23*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*(grad_0_chi[pp]*x2 + grad_1_chi[pp]*(-x18 + x19) + grad_2_chi[pp]*x14)/(-gt0[pp]*x1 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x5)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.66666666666666663*At0[pp];
            double x1 = -At0[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt3[pp]*gt5[pp];
            double x6 = gt0[pp]*x5;
            double x7 = gt1[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt2[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = gt2[pp]*gt4[pp];
            double x16 = x14 - x15;
            double x17 = gt0[pp]*gt5[pp];
            double x18 = x17 - x4;
            double x19 = gt2[pp]*gt3[pp];
            double x20 = -x19 + x7;
            double x21 = -x2 + x5;
            double x22 = gt0[pp]*gt3[pp];
            double x23 = x22 - x3;
            double x24 = 1.0/chi[pp];
            double x25 = grad_0_chi[pp]*x16 - grad_1_chi[pp]*x18 + grad_2_chi[pp]*x13;
            double x26 = 0.5*x15;
            double x27 = 0.5*x14 - x26;
            double x28 = 1.0*grad_0_gt2[pp];
            double x29 = 0.5*grad_2_gt0[pp];
            double x30 = x28 - x29;
            double x31 = 1.0*grad_0_gt1[pp];
            double x32 = 0.5*grad_1_gt0[pp];
            double x33 = x31 - x32;
            double x34 = x18*x33;
            double x35 = grad_0_gt0[pp]*x27 + x13*x30 - x34;
            double x36 = 0.5*gt0[pp]*x24*x25 + x35;
            double x37 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x23;
            double x38 = -0.5*x19 + 0.5*x7;
            double x39 = grad_0_gt0[pp]*x38;
            double x40 = x23*x30;
            double x41 = x39 + x40;
            double x42 = -x13*x33 + x41;
            double x43 = x16*x33;
            double x44 = 1.0*x10;
            double x45 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x46 = -x14 + x15;
            double x47 = grad_0_chi[pp]*x21 + grad_1_chi[pp]*x46 + grad_2_chi[pp]*x20;
            double x48 = 1.0*x24;
            double x49 = x48*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x45*x47);
            double x50 = pow(x9, -2);
            double x51 = x16*x50;
            double x52 = 2.0*x51;
            double x53 = grad_0_gt3[pp]*x16;
            double x54 = -x53;
            double x55 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x56 = grad_1_gt0[pp]*x21 + x20*x55;
            double x57 = x54 + x56;
            double x58 = 0.5*grad_0_gt0[pp]*x21 + x20*x30;
            double x59 = -x43 + x58;
            double x60 = grad_0_gt3[pp]*x13;
            double x61 = grad_1_gt0[pp]*x20 + x23*x55;
            double x62 = -x60 + x61;
            double x63 = 0.25*grad_0_gt5[pp];
            double x64 = grad_2_gt0[pp]*x20;
            double x65 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x66 = x13*x65;
            double x67 = grad_0_gt5[pp]*x23;
            double x68 = -x66 + x67;
            double x69 = x64 + x68;
            double x70 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x71 = 0.5*x70;
            double x72 = 4*x11 - 4*x12;
            double x73 = x50*x72;
            double x74 = 0.5*grad_0_gt3[pp];
            double x75 = 1.0*grad_1_gt1[pp];
            double x76 = -x75;
            double x77 = x74 + x76;
            double x78 = grad_0_gt5[pp]*x13;
            double x79 = x18*x65;
            double x80 = grad_2_gt0[pp]*x16 + x78 - x79;
            double x81 = grad_0_gt3[pp]*x18;
            double x82 = grad_1_gt0[pp]*x16 + x13*x55 - x81;
            double x83 = x65*x82;
            double x84 = 0.25*x83;
            double x85 = grad_2_gt0[pp]*x20;
            double x86 = -x85;
            double x87 = x13*x65 - x67 + x86;
            double x88 = x55*x87;
            double x89 = 0.25*x88;
            double x90 = 0.5*grad_0_gt5[pp];
            double x91 = 1.0*grad_2_gt2[pp];
            double x92 = -x91;
            double x93 = x90 + x92;
            double x94 = grad_1_gt0[pp]*x20;
            double x95 = x23*x55;
            double x96 = x60 - x94 - x95;
            double x97 = x93*x96;
            double x98 = grad_2_gt0[pp]*x21;
            double x99 = grad_0_gt5[pp]*x20;
            double x100 = -x16*x65 + x99;
            double x101 = x100 + x98;
            double x102 = 0.25*grad_1_gt0[pp];
            double x103 = 2.0*x50;
            double x104 = x103*x20;
            double x105 = -4*x19 + 4*x7;
            double x106 = 0.25*grad_2_gt0[pp];
            double x107 = -x106;
            double x108 = 0.5*grad_0_gt2[pp] + x107;
            double x109 = 2.0*grad_2_gt2[pp];
            double x110 = x105*x50;
            double x111 = 4*x14 - 4*x15;
            double x112 = x111*x50;
            double x113 = 0.25*grad_0_gt3[pp];
            double x114 = 4*x17 - 4*x4;
            double x115 = 4*x22 - 4*x3;
            double x116 = 0.25*grad_0_gt4[pp];
            double x117 = -x116;
            double x118 = 0.75*grad_1_gt2[pp];
            double x119 = 0.25*grad_2_gt1[pp];
            double x120 = x117 + x118 + x119;
            double x121 = x28 + x29;
            double x122 = -4*x2 + 4*x5;
            double x123 = -grad2_0_0_chi[pp];
            double x124 = 0.5*grad_0_gt0[pp]*x21;
            double x125 = x20*x30;
            double x126 = -x124 - x125 + x16*x33;
            double x127 = x13*x33 - x39 - x40;
            double x128 = 2.0*x24;
            double x129 = grad_1_gt5[pp]*x13;
            double x130 = grad_2_gt3[pp]*x18;
            double x131 = x129 - x130 + x16*x70;
            double x132 = 0.5*x12;
            double x133 = 0.5*x11 - x132;
            double x134 = -x90 + x91;
            double x135 = 0.5*grad_1_gt5[pp];
            double x136 = 1.0*grad_2_gt4[pp];
            double x137 = x135 - x136;
            double x138 = grad_2_gt5[pp]*x133 + x134*x16 + x137*x18;
            double x139 = 0.5*grad_1_gt3[pp];
            double x140 = x139*x18;
            double x141 = -x140;
            double x142 = 1.0*grad_1_gt4[pp];
            double x143 = 0.5*grad_2_gt3[pp];
            double x144 = x142 - x143;
            double x145 = x16*x77;
            double x146 = x13*x144 + x141 - x145;
            double x147 = x21*x35;
            double x148 = grad_2_gt3[pp]*x13;
            double x149 = grad_1_gt5[pp]*x23;
            double x150 = x20*x70;
            double x151 = x148 - x149 - x150;
            double x152 = 0.5*grad_2_gt5[pp]*x23;
            double x153 = x13*x137;
            double x154 = -x152 - x153 + x20*x93;
            double x155 = grad_1_gt3[pp]*x133 - x144*x23 + x20*x77;
            double x156 = grad_2_gt0[pp]*x21;
            double x157 = -x156 + x16*x65 - x99;
            double x158 = grad_2_gt3[pp]*x16;
            double x159 = grad_1_gt5[pp]*x20;
            double x160 = x158 - x159 - x21*x70;
            double x161 = grad_1_gt0[pp]*x21;
            double x162 = x20*x55;
            double x163 = -x161 - x162 + x53;
            double x164 = grad_2_gt5[pp]*x38;
            double x165 = -x137*x16 - x164 + x21*x93;
            double x166 = x144*x20;
            double x167 = grad_1_gt3[pp]*x27 - x166 + x21*x77;
            double x168 = pow(grad_1_chi[pp], 2);
            double x169 = 3.0*x24;
            double x170 = -x169;
            double x171 = x18*(2*grad2_1_1_chi[pp] + x168*x170);
            double x172 = pow(grad_0_chi[pp], 2);
            double x173 = x21*(2*grad2_0_0_chi[pp] - 3.0*x172*x24);
            double x174 = pow(grad_2_chi[pp], 2);
            double x175 = x23*(2*grad2_2_2_chi[pp] - x169*x174);
            double x176 = 2*x14 - 2*x15;
            double x177 = grad_0_chi[pp]*x169;
            double x178 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x177;
            double x179 = -2*x19 + x8;
            double x180 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x177;
            double x181 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x170)*(2*x11 - 2*x12);
            double x182 = x146*x18;
            double x183 = x13*x131 - x138*x23 - x147 + x16*x82 - x182 - 1.0*x20*x80;
            double x184 = x154*x23;
            double x185 = -x127*x21 + x13*x151 - x155*x18 + x16*x96 - x184 - 1.0*x20*x87;
            double x186 = x126*x21;
            double x187 = x13*x160 - 1.0*x157*x20 + x16*x163 - x165*x23 - x167*x18 - x186;
            double x188 = pow(chi[pp], -2);
            double x189 = 4.0*x10;
            double x190 = x13*x189;
            double x191 = x16*x189;
            double x192 = 0.25*grad_1_gt2[pp];
            double x193 = 0.75*grad_2_gt1[pp];
            double x194 = x115*x50;
            double x195 = x122*x50;
            double x196 = grad_0_gt3[pp]*x35;
            double x197 = 0.25*grad_0_gt3[pp]*x80;
            double x198 = -x102;
            double x199 = 0.5*grad_0_gt1[pp] + x198;
            double x200 = x199*x80;
            double x201 = x199*x82;
            double x202 = 2.0*grad2_0_0_gt0[pp]*x10*x21 - grad2_0_1_gt0[pp]*x191 + 1.0*grad2_0_2_gt0[pp]*x10*x105 + 2.0*grad2_1_1_gt0[pp]*x10*x18 - grad2_1_2_gt0[pp]*x190 + 2.0*grad2_2_2_gt0[pp]*x10*x23 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - x104*(grad_1_gt0[pp]*x80 + x35*x65) - x110*(x200 + x35*x70) + x111*x50*(x201 - 2*x35*x77) - x172*x188 - x194*x80*(x117 + x192 + x193) - x195*x35*(x31 + x32) + x52*(grad_1_gt0[pp]*x82 + x196) + x73*(x197 + 0.5*x70*x82);
            double x203 = -grad_0_chi[pp]*x21 + grad_1_chi[pp]*x16 - grad_2_chi[pp]*x20;
            double x204 = -x11 + x12;
            double x205 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x204 + grad_2_chi[pp]*x23;
            double x206 = grad_0_gt5[pp]*x87;
            double x207 = 3.0*x50;
            double x208 = x207*x21;
            double x209 = grad_1_gt5[pp]*x151;
            double x210 = x18*x207;
            double x211 = -0.25*grad_2_gt3[pp];
            double x212 = x114*x50;
            double x213 = 6.0*x50;
            double x214 = 0.75*grad_0_gt4[pp];
            double x215 = -x119;
            double x216 = x151*x63;
            double x217 = 0.25*grad_1_gt5[pp]*x87;
            double x218 = grad_2_gt3[pp]*x138;
            double x219 = 0.25*grad_2_gt3[pp]*x80;
            double x220 = 0.5*x55;
            double x221 = grad_2_gt5[pp]*x151;
            double x222 = grad_1_gt5[pp]*x154;
            double x223 = grad_0_gt5[pp]*x154;
            double x224 = 0.25*grad_2_gt5[pp]*x151;
            double x225 = 0.25*grad_2_gt5[pp]*x87;
            double x226 = x106*x160;
            double x227 = x131*x65;
            double x228 = 0.25*x227;
            double x229 = x165*x70;
            double x230 = x157*x70;
            double x231 = 0.25*x230;
            double x232 = 0.25*grad_1_gt5[pp];
            double x233 = (-0.5)*grad_2_gt4[pp] + x232;
            double x234 = -x233*x80;
            double x235 = -x129 + x130 - x16*x70;
            double x236 = x233*x235;
            double x237 = -0.5*grad_2_gt2[pp] + x63;
            double x238 = -x160*x237;
            double x239 = x100 + x156;
            double x240 = x237*x239;
            double x241 = (-0.5)*gt0[pp]*gt4[pp] + x132;
            double x242 = -x135 + x136;
            double x243 = 2.0*x10;
            double x244 = -grad_0_chi[pp]*x187*x243 - grad_1_chi[pp]*x183*x243 - grad_2_chi[pp]*x185*x243 - x171 - x173 - x175 + x176*x178 - x179*x180 + x181;
            double x245 = grad_0_chi[pp]*x46 + grad_1_chi[pp]*x18 + grad_2_chi[pp]*x204;
            double x246 = grad_0_gt3[pp]*x82;
            double x247 = grad_2_gt3[pp]*x131;
            double x248 = x207*x23;
            double x249 = -x192;
            double x250 = x119 + x249;
            double x251 = x113*x131;
            double x252 = 0.25*grad_2_gt3[pp]*x82;
            double x253 = grad_2_gt3[pp]*x146;
            double x254 = grad_0_gt3[pp]*x146;
            double x255 = 0.25*grad_1_gt3[pp]*x82;
            double x256 = 0.25*grad_1_gt3[pp]*x131;
            double x257 = grad_1_gt5[pp]*x155;
            double x258 = 0.25*grad_1_gt5[pp]*x96;
            double x259 = 0.5*grad_0_gt4[pp];
            double x260 = 0.5*grad_2_gt1[pp];
            double x261 = (-0.5)*grad_1_gt2[pp] + x259 + x260;
            double x262 = x167*x70;
            double x263 = x102*x160;
            double x264 = x155*x55;
            double x265 = x151*x55;
            double x266 = 0.25*x265;
            double x267 = x163*x70;
            double x268 = 0.25*x267;
            double x269 = 0.5*grad_1_gt4[pp] + x211;
            double x270 = x269*x96;
            double x271 = -0.5*grad_1_gt1[pp] + x113;
            double x272 = -x160*x271;
            double x273 = x151*x269;
            double x274 = x161 + x162 + x54;
            double x275 = x271*x274;
            double x276 = (-0.5)*gt1[pp]*gt5[pp] + x26;
            double x277 = -x74 + x75;
            double x278 = x127*x55;
            double x279 = x63*x96;
            double x280 = x106*x163;
            double x281 = x102*x157;
            double x282 = grad_0_gt5[pp]*x127;
            double x283 = 0.25*grad_0_gt0[pp]*x157;
            double x284 = x108*x87;
            double x285 = 0.25*grad_0_gt0[pp]*x163;
            double x286 = x108*x96;
            double x287 = -x194;
            double x288 = 0.25*grad_1_gt5[pp]*x131;
            double x289 = x160*x63 + x165*x261;
            double x290 = -x137*x154;
            double x291 = x157*x199;
            double x292 = x108*x163;
            double x293 = x291 + x292;
            double x294 = x55*x82;
            double x295 = 0.25*x294;
            double x296 = x131*x269;
            double x297 = 0.5*grad_1_gt3[pp]*x138;
            double x298 = 0.25*grad_2_gt3[pp]*x131 + x297;
            double x299 = 0.25*x158 - 0.25*x159 - 0.25*x21*x70;
            double x300 = x299*x70;
            double x301 = x165*x74 + x299*x55;
            double x302 = x116 + x250;
            double x303 = x160*x302 + x167*x90;
            double x304 = 0.5*grad_2_gt5[pp]*x155;
            double x305 = x233*(-x148 + x149 + x150) + x304;
            double x306 = 0.25*grad_1_gt5[pp]*x82;
            double x307 = x138*x74;
            double x308 = x219 + x307;
            double x309 = 0.25*x55;
            double x310 = x131*x309;
            double x311 = x154*x261 + x216;
            double x312 = x108*x160 + x165*x33;
            double x313 = x157*x302;
            double x314 = 0.5*grad_1_gt0[pp]*x165;
            double x315 = x163*x63 + x314;
            double x316 = 0.5*grad_1_gt2[pp];
            double x317 = (-0.5)*grad_2_gt1[pp] + x259 + x316;
            double x318 = x154*x317;
            double x319 = -x233*x87;
            double x320 = 0.25*grad_2_gt5[pp]*x96;
            double x321 = x319 + x320;
            double x322 = x269*x82;
            double x323 = 0.25*grad_2_gt0[pp]*x16 + 0.25*x78 - 0.25*x79;
            double x324 = grad_1_gt3[pp]*x323;
            double x325 = x251 + x324;
            double x326 = x239*x271;
            double x327 = x160*x199 + x167*x30;
            double x328 = x146*x317;
            double x329 = x269*x87;
            double x330 = x155*x90;
            double x331 = x151*x302 + x330;
            double x332 = x144*x146;
            double x333 = x113*x160 + x167*x317;
            double x334 = 0.25*grad_2_gt3[pp]*x151;
            double x335 = grad_1_gt5[pp]*x96;
            double x336 = grad_2_gt3[pp]*x87 + x335;
            double x337 = x163*x55;
            double x338 = grad_1_gt0[pp]*x160;
            double x339 = grad_0_gt3[pp]*x157 + x338;
            double x340 = grad_0_gt5[pp]*x96;
            double x341 = x65*x87;
            double x342 = x340 + x341;
            double x343 = 1.0*x50;
            double x344 = x21*x343;
            double x345 = -x190;
            double x346 = -x191;
            double x347 = 2.0*grad2_0_0_gt4[pp]*x10*x21 + grad2_0_1_gt4[pp]*x346 + 1.0*grad2_0_2_gt4[pp]*x10*x105 + 2.0*grad2_1_1_gt4[pp]*x10*x18 + grad2_1_2_gt4[pp]*x345 + 2.0*grad2_2_2_gt4[pp]*x10*x23 + 2.0*grad_0_gt4[pp]*x187*x50 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x188 + 2.0*grad_1_gt4[pp]*x183*x50 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x185*x50 + 1.0*gt4[pp]*x10*x24*x244 - x128*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x45*(grad_2_gt3[pp]*x46 + x159 + x21*x70) + 0.5*grad_1_chi[pp]*x45*(grad_1_gt5[pp]*x204 + x130 + x46*x70) + 0.5*grad_2_chi[pp]*x45*(grad_2_gt3[pp]*x204 + x149 + x20*x70));
            double x348 = -grad_1_chi[pp];
            double x349 = 2.0*grad_2_alpha[pp];
            double x350 = -grad_2_chi[pp];
            double x351 = 2.0*grad_1_alpha[pp];
            double x352 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x203*x24 + 2.0*x158 - 2.0*x159 - 2.0*x21*x70) + x349*(1.0*grad_2_gt3[pp]*x10*x13 - x149*x44 - x150*x44 + x48*(1.0*gt4[pp]*x205*x45 + x348)) + x351*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x16*x70 - x130*x44 + x48*(1.0*gt4[pp]*x245*x45 + x350));
            double x353 = x157*x63;
            double x354 = (-0.5)*grad_0_gt4[pp] + x260 + x316;
            double x355 = 0.25*grad_1_gt5[pp]*x80 + x138*x354;
            double x356 = -x154*x93;
            double x357 = 0.25*grad_1_gt0[pp]*x80 + x317*x35;
            double x358 = x126*x30;
            double x359 = 0.25*grad_2_gt0[pp]*x87;
            double x360 = -x138*x77 + 0.5*x144*x80;
            double x361 = x154*x354 + x217;
            double x362 = x157*x309 + x314;
            double x363 = x131*x70;
            double x364 = 0.25*x363;
            double x365 = -x151*x237;
            double x366 = x320 + x365;
            double x367 = x108*x157;
            double x368 = 0.5*grad_0_gt0[pp]*x165;
            double x369 = x106*x157 + x368;
            double x370 = x323*x65;
            double x371 = 0.5*grad_1_gt0[pp]*x138 + x323*x55;
            double x372 = x135*x35 + x323*x70;
            double x373 = 0.5*grad_2_gt5[pp]*x127;
            double x374 = x237*(x68 + x85) + x373;
            double x375 = 0.25*grad_0_gt0[pp]*x160;
            double x376 = x281 + x375;
            double x377 = x126*x317;
            double x378 = x131*x199;
            double x379 = x144*x35 - 0.5*x77*x80;
            double x380 = x108*x151;
            double x381 = 0.5*grad_1_gt5[pp]*x127;
            double x382 = x381 + 0.25*x70*x87;
            double x383 = x235*x271;
            double x384 = x322 + x383;
            double x385 = 0.25*x337;
            double x386 = grad_2_gt0[pp]*x151;
            double x387 = grad_0_gt3[pp]*x80;
            double x388 = grad_1_gt0[pp]*x131;
            double x389 = x151*x70;
            double x390 = x18*x343;
            double x391 = -grad_0_chi[pp]*x188;
            double x392 = 2.0*grad2_0_0_gt2[pp]*x10*x21 + grad2_0_1_gt2[pp]*x346 + 1.0*grad2_0_2_gt2[pp]*x10*x105 + 2.0*grad2_1_1_gt2[pp]*x10*x18 + grad2_1_2_gt2[pp]*x345 + 2.0*grad2_2_2_gt2[pp]*x10*x23 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x187*x50 + 2.0*grad_1_gt2[pp]*x183*x50 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x391 + 2.0*grad_2_gt2[pp]*x185*x50 + 1.0*gt2[pp]*x10*x24*x244 - x128*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x45*(x46*x65 + x98 + x99) + 0.5*grad_1_chi[pp]*x45*(grad_0_gt5[pp]*x204 + grad_2_gt0[pp]*x46 + x18*x65) + 0.5*grad_2_chi[pp]*x45*(x204*x65 + x64 + x67));
            double x393 = -grad_0_chi[pp];
            double x394 = 2.0*grad_0_alpha[pp];
            double x395 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x24*x25 + x80) + x349*(1.0*x10*x13*x65 - x44*x67 - x44*x85 + x48*(1.0*gt2[pp]*x205*x45 + x393)) + x394*(1.0*x10*x16*x65 - x156*x44 - x44*x99 + x48*(1.0*gt2[pp]*x45*x47 + x350));
            double x396 = 0.25*x341;
            double x397 = 0.25*grad_1_gt5[pp]*x151;
            double x398 = x237*x274;
            double x399 = x146*x261;
            double x400 = 0.25*grad_2_gt3[pp]*x87 + x330;
            double x401 = x113*x157;
            double x402 = 0.5*grad_2_gt0[pp]*x167;
            double x403 = grad_0_gt5[pp]*x163;
            double x404 = grad_2_gt0[pp]*x160;
            double x405 = x157*x65 + x404;
            double x406 = x20*x343;
            double x407 = grad_1_gt5[pp]*x82;
            double x408 = grad_2_gt3[pp]*x80;
            double x409 = x227 + x408;
            double x410 = x387 + x83;
            double x411 = -x110;
            double x412 = -x233*x82;
            double x413 = x63*x87;
            double x414 = x280 + x281;
            double x415 = x126*x354 + x375;
            double x416 = x106*x151 + x381;
            double x417 = 0.25*x389;
            double x418 = x13*x50;
            double x419 = x143*x35;
            double x420 = x102*x131 + x419;
            double x421 = -x195;
            double x422 = x319 + x365;
            double x423 = x126*x33;
            double x424 = x106*x96 + x127*x261;
            double x425 = 0.25*grad_1_gt0[pp]*x82;
            double x426 = -0.5*x137*x96 - x155*x93;
            double x427 = x324 + x383;
            double x428 = x146*x354 + x252;
            double x429 = x263 + x402;
            double x430 = x163*x302;
            double x431 = x280 + x375;
            double x432 = x126*x261;
            double x433 = -x127*x137 - 0.5*x97;
            double x434 = x419 + 0.25*x70*x82;
            double x435 = 0.25*x60 - 0.25*x94 - 0.25*x95;
            double x436 = x435*x55;
            double x437 = 0.5*grad_2_gt0[pp]*x155 + x302*x96;
            double x438 = x163*x199;
            double x439 = 0.5*grad_0_gt0[pp]*x167;
            double x440 = x102*x163 + x439;
            double x441 = 0.5*grad_2_gt3[pp]*x127 + x435*x70;
            double x442 = x139*x35;
            double x443 = x271*(-grad_1_gt0[pp]*x16 - x13*x55 + x81) + x442;
            double x444 = x113*x163;
            double x445 = 0.25*grad_2_gt3[pp]*x96 + x155*x354;
            double x446 = -x146*x77;
            double x447 = x23*x343;
            double x448 = 2.0*grad2_0_0_gt1[pp]*x10*x21 + grad2_0_1_gt1[pp]*x346 + 1.0*grad2_0_2_gt1[pp]*x10*x105 + 2.0*grad2_1_1_gt1[pp]*x10*x18 + grad2_1_2_gt1[pp]*x345 + 2.0*grad2_2_2_gt1[pp]*x10*x23 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x187*x50 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x391 + 2.0*grad_1_gt1[pp]*x183*x50 + 2.0*grad_2_gt1[pp]*x185*x50 + 1.0*gt1[pp]*x10*x24*x244 - x128*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x45*(grad_0_gt3[pp]*x46 + x56) + 0.5*grad_1_chi[pp]*x45*(grad_1_gt0[pp]*x46 + x204*x55 + x81) + 0.5*grad_2_chi[pp]*x45*(grad_0_gt3[pp]*x204 + x61));
            double x449 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x24*x37 + 2.0*x60 - 2.0*x94 - 2.0*x95) + x351*(1.0*grad_1_gt0[pp]*x10*x16 + 1.0*x10*x13*x55 - x44*x81 + x48*(1.0*gt1[pp]*x245*x45 + x393)) + x394*(1.0*grad_0_gt3[pp]*x10*x16 - x161*x44 - x162*x44 + x48*(1.0*gt1[pp]*x45*x47 + x348));
            double x450 = 0.25*grad_0_gt3[pp]*x82;
            _3144[pp] = 1.3333333333333333*At0[pp]*grad_0_beta0[pp] + 2*At1[pp]*grad_0_beta1[pp] + 2*At2[pp]*grad_0_beta2[pp] - alpha[pp]*(2.0*At0[pp]*x10*(At1[pp]*x16 - At2[pp]*x20 + x1*x21) + 2.0*At1[pp]*x10*(At0[pp]*x16 - At1[pp]*x18 + At2[pp]*x13) + 2.0*At2[pp]*x10*(-At0[pp]*x20 + At1[pp]*x13 - At2[pp]*x23) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt0[pp]*x103*(x126*x21 - 1.0*x13*x160 + x157*x20 - 1.0*x16*x163 + x165*x23 + x167*x18) + 6.0*grad_0_gt0[pp]*x21*x50*x59 - grad_1_gt0[pp]*x103*(-1.0*x13*x131 + x138*x23 + x146*x18 + x147 - 1.0*x16*x82 + x20*x80) + 3.0*grad_1_gt0[pp]*x18*x50*x57 + 3.0*grad_2_gt0[pp]*x101*x23*x50 - grad_2_gt0[pp]*x103*(x127*x21 - 1.0*x13*x151 + x154*x23 + x155*x18 - 1.0*x16*x96 + x20*x87) - gt0[pp]*x10*x48*(2.0*grad_0_chi[pp]*x10*x187 + 2.0*grad_1_chi[pp]*x10*x183 + 2.0*grad_2_chi[pp]*x10*x185 + x171 + x173 + x175 - x176*x178 + x179*x180 - x181) + x104*(grad_0_gt0[pp]*x101 + grad_2_gt0[pp]*x59) + x104*(grad_0_gt5[pp]*x42 + grad_2_gt0[pp]*x69) + x105*x50*(0.25*grad_0_gt0[pp]*x101 + 1.0*grad_2_gt0[pp]*x59) - x110*(x108*(x66 - x67 + x86) + x42*(grad_0_gt5[pp] - x109)) - x112*(0.25*grad_0_gt0[pp]*x57 + 1.0*grad_1_gt0[pp]*x59) - x112*(x108*x62 + 1.0*x42*x70) + x114*x120*x50*x62 + x114*x50*x82*(x113 + x76) + x115*x50*x87*(x63 + x92) + x121*x122*x42*x50 - x128*(1.0*grad_0_chi[pp]*x10*x126 + 1.0*grad_1_chi[pp]*x10*x35 + 1.0*grad_2_chi[pp]*x10*x127 + x123) + x202 - x52*(grad_0_gt0[pp]*x57 + grad_1_gt0[pp]*x59) - x52*(grad_2_gt0[pp]*x62 + x42*x55) - x73*(-x89 + x97) - x73*(0.5*grad_1_gt0[pp]*x101 + 0.25*grad_2_gt0[pp]*x57) - x73*(0.5*grad_2_gt0[pp]*x57 + x101*x102) - x73*(x62*x63 + x69*x71) - x73*(x77*x80 - x84)) - 12*grad2_0_0_alpha[pp] - 12*grad_0_alpha[pp]*(0.5*grad_0_gt0[pp]*x10*x21 + 1.0*x10*x20*x30 - x43*x44 - x49) + 12.0*grad_1_alpha[pp]*x10*x36 - 12.0*grad_2_alpha[pp]*x10*(-0.5*gt0[pp]*x24*x37 + x42) + 1.0*gt0[pp]*x10*(-x13*(alpha[pp]*(-x110*(x216 + x321) - x110*(x311 + x320) - x110*(x312 + x398) + x112*(x258 + x331) + x112*(x258 + x400) + x112*(x268 + x327) + x112*(x251 + x252 + x328) + x112*(x322 + x324 + x399) + x112*(x385 + x401 + x402) + 2.0*x13*x50*(grad_1_gt5[pp]*x146 + x247) - x194*(0.5*x221 + x290) - x195*(x280 + x293) - x195*(x396 + x90*x96) - x212*(1.0*x257 + x334) - x212*(0.5*x262 + x333) - x212*(x143*x146 + x256 + x332) + x287*(x238 + x289) + x287*(0.5*grad_2_gt3[pp]*x138 + x236 + x288) - x344*(x294 + x410) + x347 - x406*(x403 + x405) - x406*(x407 + x409) + x411*(x307 + x310 + x412) + x73*(x300 + x303) + x73*(x305 + x397) + x73*(-x167*x93 + x301) + x73*(x143*x154 + x304 + x397) + x73*(x146*x242 + x296 + x297)) + x352) - x13*(alpha[pp]*(-x110*(x217 + x311) - x110*(x231 + x312) - x110*(x306 + x308) - x110*(x308 + x310) - x110*(x313 + x315) - x110*(x318 + x321) + x112*(x322 + x325) + x112*(x325 + x328) + x112*(x326 + x327) + x112*(x329 + x331) + 2.0*x13*x50*(grad_2_gt3[pp]*x154 + x209) - x194*(0.5*x229 + x289) - x194*(x135*x154 + x224 + x290) - x195*(x281 + x293) - x195*(0.5*grad_0_gt3[pp]*x80 + x295) - x212*(x272 + x333) - x212*(0.5*grad_1_gt3[pp]*x131 + x332) - x212*(x135*x155 + x273 + x334) + x287*(1.0*x218 + x288) - x344*(x342 + x88) + x347 + x51*(x265 + x336) + x51*(x337 + x339) + x73*(x296 + x298) + x73*(x300 + x301) + x73*(x135*x146 + x298) + x73*(x144*x154 + x305) + x73*(x165*x277 + x303)) + x352) - x16*(alpha[pp]*(-x110*(x291 + x415) - x110*(x396 + x416) - x110*(x414 + x432) - x110*(x433 + x89) + x112*(x436 + x441) + x112*(x443 + x450) + x112*(x127*x144 + x437) + x112*(0.5*grad_1_gt0[pp]*x146 + x442 + x450) + x112*(x126*x277 + x438 + x439) + 2.0*x16*x50*(grad_0_gt3[pp]*x126 + grad_1_gt0[pp]*x163) - x195*(0.5*x278 + x424) - x195*(0.5*grad_1_gt0[pp]*x126 + x285 + x423) - x212*(x270 + x445) - x212*(0.5*grad_1_gt3[pp]*x82 + x446) - x212*(0.5*grad_1_gt0[pp]*x167 + x275 + x444) + x287*(x217 + x422) + x287*(0.5*grad_2_gt3[pp]*x80 + x364) + x411*(x197 + x420) + x411*(x197 + x434) + x418*(x267 + x339) + x418*(x336 + x389) + x421*(1.0*x196 + x425) - x447*(x230 + x405) + x448 + x73*(x252 + x427) + x73*(x324 + x428) + x73*(x329 + x426) + x73*(x326 + x402 + x430)) + x449) + x18*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x21 - grad2_0_1_gt3[pp]*x191 + 1.0*grad2_0_2_gt3[pp]*x10*x105 + 2.0*grad2_1_1_gt3[pp]*x10*x18 - grad2_1_2_gt3[pp]*x190 + 2.0*grad2_2_2_gt3[pp]*x10*x23 + 2.0*grad_0_gt3[pp]*x187*x50 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x182*x213 + 2.0*grad_1_gt3[pp]*x183*x50 + 2.0*grad_2_gt3[pp]*x185*x50 + 1.0*gt3[pp]*x10*x24*x244 - x110*(0.5*grad_2_gt3[pp]*x82 + x251) - x110*(x131*x74 + x252) - x110*(-1.0*x137*x96 + x266) - x110*(x151*x261 + x258) - x110*(x160*x33 + x268) - x110*(x163*x261 + x263) + x111*x50*(x155*x65 + x270) + x111*x50*(2*x167*x33 + x275) + x112*(1.0*x254 + x255) - x128*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x45*(grad_1_gt3[pp]*x276 + x166 + x21*x277) + 1.0*grad_1_chi[pp]*x45*(x140 + x144*x204 + x277*x46) + 1.0*grad_2_chi[pp]*x45*(grad_1_gt3[pp]*x241 + x144*x23 + x20*x277)) + 2.0*x13*x50*(grad_0_gt3[pp]*x160 + x262) + 2.0*x13*x50*(grad_1_gt3[pp]*x131 + x253) + 2.0*x13*x50*(grad_2_gt3[pp]*x151 + x257) - x151*x194*(x136 - x232) - x155*x212*(x142 + x143) + 2.0*x16*x50*(grad_0_gt3[pp]*x163 + grad_1_gt0[pp]*x167) - x160*x194*(x116 + x193 + x249) - x163*x195*(x198 + x31) - x167*x212*(x74 + x75) - x168*x188 - x195*x96*(x214 + x250) - x208*x246 - x247*x248 + x50*x72*(-2*x137*x155 + x273) + x50*x72*(x167*x65 + x272) + x52*(grad_1_gt3[pp]*x82 + x254) + x52*(grad_2_gt3[pp]*x96 + x264) + x73*(1.0*x253 + x256)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x203*x24 + x167) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x144 + 1.0*x10*x141 - x145*x44 + x48*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x245*x45)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x24*x37 + x155)) + x20*(alpha[pp]*(-x104*(grad_0_gt5[pp]*x126 + grad_2_gt0[pp]*x157) - x110*(x374 + x413) - x110*(0.5*grad_2_gt0[pp]*x154 + x373 + x413) - x110*(x126*x134 + x367 + x368) + x112*(x279 + x382) + x112*(x279 + x416) + x112*(x292 + x415) + x112*(x295 + x420) + x112*(x377 + x414) + x112*(x379 + x84) - x194*(0.5*grad_2_gt0[pp]*x165 + x240 + x353) - x195*(1.0*x282 + x359) - x195*(0.5*grad_2_gt0[pp]*x126 + x283 + x358) - x212*(x252 + x384) - x212*(0.5*grad_1_gt5[pp]*x96 + x417) + x287*(x234 + x355) + x287*(0.5*grad_2_gt5[pp]*x87 + x356) - x390*(x267 + x337 + x338) + x392 + x411*(x370 + x372) + x411*(x242*x35 + x371) + x418*(x230 + x403 + x404) + x418*(x363 + x407 + x408) + x421*(x261*x35 + x357) + x73*(x217 + x366) + x73*(x320 + x361) + x73*(x360 + x412) + x73*(x362 + x398)) + x395) + x20*(alpha[pp]*(-x104*(grad_2_gt0[pp]*x154 + x206) - x110*(x367 + x369) - x110*(x370 + x371) - x110*(x126*x90 + x369) - x110*(x138*x33 + x372) - x110*(x154*x30 + x374) + x112*(x292 + x376) + x112*(x376 + x377) + x112*(x378 + x379) + x112*(x380 + x382) - x194*(x138*x261 + x355) - x194*(x154*x90 + x225 + x356) - x195*(x200 + x357) - x195*(0.5*grad_0_gt0[pp]*x157 + x358) - x195*(x127*x90 + x284 + x359) - x212*(x251 + x384) - x212*(0.5*grad_1_gt0[pp]*x160 + x385) + x287*(1.0*grad_2_gt0[pp]*x165 + x353) - x390*(x265 + x335 + x389) + x392 + x51*(x294 + x387 + x388) + x51*(x340 + x386 + x88) + x73*(x216 + x361) + x73*(x226 + x315) + x73*(x226 + x362) + x73*(x228 + x360) + x73*(x318 + x366) + x73*(x306 + x307 + x364)) + x395) + x21*(alpha[pp]*(-grad_0_gt0[pp]*x186*x213 + 2.0*grad_0_gt0[pp]*x187*x50 - grad_1_gt0[pp]*x163*x210 + 2.0*grad_1_gt0[pp]*x183*x50 - grad_2_gt0[pp]*x157*x248 + 2.0*grad_2_gt0[pp]*x185*x50 + 1.0*gt0[pp]*x10*x24*x244 - x104*(grad_0_gt0[pp]*x157 + grad_2_gt0[pp]*x126) - x104*(grad_2_gt0[pp]*x87 + x282) - x110*(1.0*grad_2_gt0[pp]*x126 + x283) - x110*(x127*(-grad_0_gt5[pp] + x109) + x284) + x111*x50*(x127*x70 + x286) + x112*(1.0*grad_1_gt0[pp]*x126 + x285) - x120*x212*x96 - x121*x127*x195 - x128*(1.0*grad_0_chi[pp]*x45*(x33*x46 + x58) + 1.0*grad_1_chi[pp]*x45*(grad_0_gt0[pp]*x276 + x204*x30 + x34) + 1.0*grad_2_chi[pp]*x45*(x204*x33 + x41) + x123) - x194*x87*(-x63 + x91) + x202 - x212*x82*(-x113 + x75) + x52*(grad_0_gt0[pp]*x163 + grad_1_gt0[pp]*x126) + x52*(grad_2_gt0[pp]*x96 + x278) + x73*(x279 + x71*x87) + x73*(x89 - 1.0*x93*x96) + x73*(0.5*grad_1_gt0[pp]*x157 + x280) + x73*(0.5*grad_2_gt0[pp]*x163 + x281) + x73*(-1.0*x77*x80 + x84)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(-x10*x124 + 1.0*x10*x16*x33 - x125*x44 + x49) + 4.0*grad_1_alpha[pp]*x10*x36 + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x24*x37 + x127)) + x23*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x21 - grad2_0_1_gt5[pp]*x191 + 1.0*grad2_0_2_gt5[pp]*x10*x105 + 2.0*grad2_1_1_gt5[pp]*x10*x18 - grad2_1_2_gt5[pp]*x190 + 2.0*grad2_2_2_gt5[pp]*x10*x23 + 2.0*grad_0_gt5[pp]*x187*x50 + 2.0*grad_1_gt5[pp]*x183*x50 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x184*x213 + 2.0*grad_2_gt5[pp]*x185*x50 + 1.0*gt5[pp]*x10*x24*x244 - x104*(grad_0_gt5[pp]*x157 + grad_2_gt0[pp]*x165) - x104*(grad_1_gt5[pp]*x80 + x138*x65) - x104*(grad_2_gt5[pp]*x87 + x223) - x110*(1.0*x223 + x225) - x110*(x138*x55 + x234) - x110*(x165*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp]) + x240) + x111*x50*(x144*x80 + x228) + x111*x50*(x160*x30 + x231) + x112*(0.5*grad_1_gt5[pp]*x87 + x216) + x112*(x131*x220 + x219) + x112*(x151*x90 + x217) + x112*(x157*x220 + x226) - x128*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x45*(x134*x21 + x164 + x242*x46) + 1.0*grad_1_chi[pp]*x45*(grad_2_gt5[pp]*x241 + x134*x46 + x18*x242) + 1.0*grad_2_chi[pp]*x45*(x134*x20 + x152 + x204*x242)) + 2.0*x13*x50*(x221 + x222) + 2.0*x13*x50*(grad_0_gt5[pp]*x160 + x229) + 2.0*x13*x50*(grad_1_gt5[pp]*x131 + x218) - x131*x212*(x142 + x211) - x138*x194*(x135 + x136) - x157*x195*(x107 + x28) - x160*x212*(x116 + x118 + x215) - x165*x194*(x90 + x91) - x174*x188 - x195*x80*(x192 + x214 + x215) - x206*x208 - x209*x210 + x50*x72*(2*x138*x144 + x236) + x50*x72*(x165*x55 + x238) + x73*(1.0*x222 + x224)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x203*x24 + x165) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x24*x25 + x138) + 4*grad_2_alpha[pp]*(-x10*x152 + 1.0*x10*x20*x93 - x153*x44 + x48*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x205*x45))) + x46*(alpha[pp]*(-x110*(x291 + x431) - x110*(x378 + x434) - x110*(x380 + x433) - x110*(x431 + x432) + x112*(x436 + x437) + x112*(x438 + x440) + x112*(x126*x74 + x440) + x112*(x146*x33 + x443) + x112*(x155*x30 + x441) - x194*(0.5*grad_2_gt0[pp]*x160 + x313) - x195*(x286 + x424) - x195*(0.5*grad_0_gt0[pp]*x163 + x423) - x195*(x201 + x35*x74 + x425) - x212*(0.5*x264 + x445) - x212*(1.0*grad_1_gt0[pp]*x167 + x444) - x212*(x146*x74 + x255 + x446) + x287*(x216 + x422) - x406*(x342 + x386) - x406*(x388 + x410) - x447*(x363 + x409) + x448 + x52*(grad_1_gt0[pp]*x146 + x246) + x73*(x251 + x428) + x73*(x266 + x426) + x73*(x399 + x427) + x73*(x400 + x417) + x73*(x401 + x429) + x73*(x429 + x430)) + x449))) - grad_1_beta1[pp]*x0 - grad_2_beta2[pp]*x0;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = gt3[pp]*gt5[pp] - x0;
            double x2 = pow(gt1[pp], 2);
            double x3 = pow(gt2[pp], 2);
            double x4 = gt0[pp]*gt3[pp];
            double x5 = gt1[pp]*gt4[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x0 - gt2[pp]*x6 + gt3[pp]*x3 + gt5[pp]*x2 - gt5[pp]*x4;
            double x8 = 1.0/x7;
            double x9 = 1.0*x8;
            double x10 = -x2 + x4;
            double x11 = 0.33333333333333331;
            double x12 = gt0[pp]*gt4[pp];
            double x13 = gt1[pp]*gt2[pp];
            double x14 = x12 - x13;
            double x15 = gt2[pp]*gt3[pp];
            double x16 = gt1[pp]*gt5[pp];
            double x17 = gt2[pp]*gt4[pp];
            double x18 = x16 - x17;
            double x19 = gt0[pp]*gt5[pp];
            double x20 = x19 - x3;
            double x21 = 0.33333333333333331*x8;
            double x22 = x20*x21;
            double x23 = pow(x14, 2);
            double x24 = pow(x18, 2);
            double x25 = 2*x14;
            double x26 = 2*At1[pp];
            double x27 = At0[pp]*x24 + 2*At2[pp]*x14*x18 + At3[pp]*pow(x20, 2) - At4[pp]*x20*x25 + At5[pp]*x23 - x18*x20*x26;
            double x28 = pow(x7, -2);
            double x29 = 2*x28;
            double x30 = pow(x7, -3);
            double x31 = 0.5*x12 - 0.5*x13;
            double x32 = 0.5*grad_0_gt5[pp];
            double x33 = 1.0*grad_2_gt2[pp];
            double x34 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x35 = grad_2_gt5[pp]*x31 + x18*(-x32 + x33) + x20*x34;
            double x36 = -x15 + x5;
            double x37 = pow(x36, 2);
            double x38 = x14*x36;
            double x39 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x40 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x41 = -0.5*grad_1_gt3[pp]*x20 + x14*x39 - x18*x40;
            double x42 = 0.5*x16 - 0.5*x17;
            double x43 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x44 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x45 = grad_0_gt0[pp]*x42 + x14*x43 - x20*x44;
            double x46 = At1[pp]*x1;
            double x47 = x18*x36;
            double x48 = 1.0/chi[pp];
            double x49 = alpha[pp]*x21;
            double x50 = At3[pp]*x20;
            double x51 = x10*x18;
            double x52 = -At0[pp]*x47 + At1[pp]*x14*x18 + At1[pp]*x20*x36 - At2[pp]*x38 - At2[pp]*x51 + At4[pp]*x10*x20 + At4[pp]*x23 - At5[pp]*x10*x14 - x14*x50;
            double x53 = -At0[pp]*x1*x18 + At1[pp]*x24 - At2[pp]*x1*x14 - At2[pp]*x47 + At4[pp]*x14*x18 + At4[pp]*x20*x36 - At5[pp]*x38 - x18*x50 + x20*x46;
            double x54 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x55 = grad_0_gt5[pp]*x14 + grad_2_gt0[pp]*x18 - x20*x54;
            double x56 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x57 = grad_1_gt5[pp]*x14 - grad_2_gt3[pp]*x20 + x18*x56;
            double x58 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x59 = -grad_0_gt3[pp]*x20 + grad_1_gt0[pp]*x18 + x14*x58;
            double x60 = -x1*x45 - x10*x35 + x14*x57 + x18*x59 - x20*x41 - 1.0*x36*x55;
            double x61 = x32 - x33;
            double x62 = -0.5*x15 + 0.5*x5;
            _4478[pp] = (-B1[pp])*eta + agrad_0_Gt1[pp]*beta0[pp] + agrad_1_Gt1[pp]*beta1[pp] + agrad_2_Gt1[pp]*beta2[pp] + 2*alpha[pp]*x27*x30*x41 + 2*alpha[pp]*x30*x35*(At0[pp]*x37 + 2*At2[pp]*x10*x36 + At3[pp]*x23 - At4[pp]*x10*x25 + At5[pp]*pow(x10, 2) - x26*x38) + 2*alpha[pp]*x30*x45*(At0[pp]*pow(x1, 2) + 2*At2[pp]*x1*x36 + At3[pp]*x24 - 2*At4[pp]*x47 + At5[pp]*x37 - 2*x18*x46) + 2.0*alpha[pp]*x30*x52*x57 + 2.0*alpha[pp]*x30*x53*x59 + 2.0*alpha[pp]*x30*x55*(At0[pp]*x1*x36 - At1[pp]*x47 + At2[pp]*x1*x10 + At2[pp]*x37 + At3[pp]*x14*x18 - At4[pp]*x38 - At4[pp]*x51 + At5[pp]*x10*x36 - x14*x46) + 1.0*grad2_0_0_beta0[pp]*x11*x18*x8 - grad2_0_0_beta1[pp]*x1*x9 - grad2_0_1_beta0[pp]*x22 + 7.0*grad2_0_1_beta1[pp]*x11*x18*x8 + 1.0*grad2_0_2_beta0[pp]*x11*x14*x8 - grad2_0_2_beta1[pp]*x9*(-2*x15 + x6) + 1.0*grad2_0_2_beta2[pp]*x11*x18*x8 - 1.3333333333333333*grad2_1_1_beta1[pp]*x20*x8 + 7.0*grad2_1_2_beta1[pp]*x11*x14*x8 - grad2_1_2_beta2[pp]*x22 - grad2_2_2_beta1[pp]*x10*x9 + 1.0*grad2_2_2_beta2[pp]*x11*x14*x8 - grad_0_alpha[pp]*x29*x53 - grad_0_beta1[pp]*x28*(-x1*(-0.5*grad_0_gt0[pp]*x1 + x18*x44 - x36*x43) - x10*(-grad_2_gt5[pp]*x62 + x1*x61 - x18*x34) + x14*(-grad_1_gt5[pp]*x36 + grad_2_gt3[pp]*x18 - x1*x56) + x18*(grad_0_gt3[pp]*x18 - grad_1_gt0[pp]*x1 - x36*x58) - x20*(grad_1_gt3[pp]*x42 + x1*x40 - x36*x39) - 1.0*x36*(-grad_0_gt5[pp]*x36 - grad_2_gt0[pp]*x1 + x18*x54)) - grad_1_alpha[pp]*x27*x29 - grad_1_beta1[pp]*x28*x60 - grad_2_alpha[pp]*x29*x52 - grad_2_beta1[pp]*x28*(-x1*(-grad_0_gt0[pp]*x62 - x10*x43 + x14*x44) - x10*(-0.5*grad_2_gt5[pp]*x10 - x14*x34 + x36*x61) + x14*(-grad_1_gt5[pp]*x10 + grad_2_gt3[pp]*x14 - x36*x56) + x18*(grad_0_gt3[pp]*x14 - grad_1_gt0[pp]*x36 - x10*x58) - x20*(grad_1_gt3[pp]*x31 - x10*x39 + x36*x40) - 1.0*x36*(-grad_0_gt5[pp]*x10 - grad_2_gt0[pp]*x36 + x14*x54)) + x28*x60*(2.0*grad_0_beta0[pp]*x11 + 2.0*grad_1_beta1[pp]*x11 + 2.0*grad_2_beta2[pp]*x11) - x49*(grad_0_K[pp]*(4*x16 - 4*x17) + 9.0*grad_0_chi[pp]*x48*x53*x8) - x49*(-grad_1_K[pp]*(4*x19 - 4*x3) + 9.0*grad_1_chi[pp]*x27*x48*x8) - x49*(grad_2_K[pp]*(4*x12 - 4*x13) + 9.0*grad_2_chi[pp]*x48*x52*x8);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = gt0[pp]*gt5[pp];
            double x1 = pow(gt2[pp], 2);
            double x2 = x0 - x1;
            double x3 = 0.5*grad_1_gt3[pp]*x2;
            double x4 = -x3;
            double x5 = pow(gt4[pp], 2);
            double x6 = pow(gt1[pp], 2);
            double x7 = gt2[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x5 - gt1[pp]*x8 - gt3[pp]*x0 + gt3[pp]*x1 + gt5[pp]*x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = 1.0*grad_1_gt4[pp];
            double x15 = 0.5*grad_2_gt3[pp];
            double x16 = x14 - x15;
            double x17 = 0.5*grad_0_gt3[pp];
            double x18 = -1.0*grad_1_gt1[pp];
            double x19 = x17 + x18;
            double x20 = gt1[pp]*gt5[pp];
            double x21 = x20 - x7;
            double x22 = x19*x21;
            double x23 = 1.0/chi[pp];
            double x24 = 1.0*x23;
            double x25 = pow(grad_1_chi[pp], 2);
            double x26 = gt3[pp]*gt5[pp];
            double x27 = x26 - x5;
            double x28 = gt0[pp]*gt3[pp];
            double x29 = x28 - x6;
            double x30 = gt1[pp]*gt4[pp];
            double x31 = gt2[pp]*gt3[pp];
            double x32 = 4*x30 - 4*x31;
            double x33 = 4.0*x10;
            double x34 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x35 = -grad_0_gt3[pp]*x2 + grad_1_gt0[pp]*x21 + x13*x34;
            double x36 = pow(x9, -2);
            double x37 = 3.0*x36;
            double x38 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x39 = grad_1_gt5[pp]*x13 - grad_2_gt3[pp]*x2 + x21*x38;
            double x40 = 1.0*grad_0_gt1[pp];
            double x41 = 0.25*grad_1_gt0[pp];
            double x42 = 4*x26 - 4*x5;
            double x43 = grad_0_gt3[pp]*x21;
            double x44 = x30 - x31;
            double x45 = grad_1_gt0[pp]*x27 + x34*x44 - x43;
            double x46 = -1.0*grad_2_gt4[pp];
            double x47 = 4*x28 - 4*x6;
            double x48 = grad_2_gt3[pp]*x13;
            double x49 = grad_1_gt5[pp]*x29;
            double x50 = -x38*x44 + x48 - x49;
            double x51 = -0.25*grad_1_gt2[pp];
            double x52 = grad_0_gt3[pp]*x13;
            double x53 = grad_1_gt0[pp]*x44 + x29*x34 - x52;
            double x54 = grad_1_gt5[pp]*x44;
            double x55 = grad_2_gt3[pp]*x21;
            double x56 = x27*x38 + x54 - x55;
            double x57 = x13*x16;
            double x58 = x22 + x3 - x57;
            double x59 = 4*x0 - 4*x1;
            double x60 = 0.5*x20 - 0.5*x7;
            double x61 = grad_1_gt3[pp]*x60 - x16*x44 + x19*x27;
            double x62 = 0.5*x11 - 0.5*x12;
            double x63 = grad_1_gt3[pp]*x62 - x16*x29 + x19*x44;
            double x64 = 0.25*grad_0_gt3[pp];
            double x65 = x32*x36;
            double x66 = 0.5*grad_0_gt4[pp] + (-0.5)*grad_1_gt2[pp] + 0.5*grad_2_gt1[pp];
            double x67 = x38*x44 - x48 + x49;
            double x68 = grad_2_gt3[pp]*x58;
            double x69 = grad_0_gt3[pp]*x58;
            double x70 = 2.0*x36;
            double x71 = x21*x70;
            double x72 = -grad_0_gt3[pp];
            double x73 = x36*(4*x11 - 4*x12);
            double x74 = 4*x20 - 4*x7;
            double x75 = grad_1_gt0[pp]*x44;
            double x76 = x29*x34;
            double x77 = x52 - x75 - x76;
            double x78 = -0.5*grad_1_gt0[pp] + x40;
            double x79 = 0.5*grad_1_gt5[pp] + x46;
            double x80 = x52 - x75 - x76;
            double x81 = 0.5*grad_1_gt4[pp] - 0.25*grad_2_gt3[pp];
            double x82 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x83 = -0.5*grad_1_gt1[pp] + x64;
            double x84 = -x27*x38 - x54 + x55;
            double x85 = -x22 + x4 + x57;
            double x86 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x21 - x2*x82;
            double x87 = 0.5*grad_0_gt5[pp];
            double x88 = 1.0*grad_2_gt2[pp];
            double x89 = grad_2_gt5[pp]*x62 + x2*x79 + x21*(-x87 + x88);
            double x90 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x91 = x27*(grad_0_gt0[pp]*x60 + x13*x90 - x2*x78);
            double x92 = -grad_0_gt5[pp]*x29 - grad_2_gt0[pp]*x44 + x13*x82;
            double x93 = x87 - x88;
            double x94 = -0.5*grad_2_gt5[pp]*x29 - x13*x79 + x44*x93;
            double x95 = 0.5*x30 - 0.5*x31;
            double x96 = -grad_0_gt0[pp]*x95 + x13*x78 - x29*x90;
            double x97 = -grad_0_gt5[pp]*x44 - grad_2_gt0[pp]*x27 + x21*x82;
            double x98 = -grad_1_gt0[pp]*x27 - x34*x44 + x43;
            double x99 = -grad_2_gt5[pp]*x95 - x21*x79 + x27*x93;
            double x100 = -0.5*grad_0_gt0[pp]*x27 + x21*x78 - x44*x90;
            double x101 = 3.0*x23;
            double x102 = -x101;
            double x103 = grad_0_chi[pp]*x101;
            _3720[pp] = 3*alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x27 - grad2_0_1_gt3[pp]*x21*x33 + 1.0*grad2_0_2_gt3[pp]*x10*x32 + 2.0*grad2_1_1_gt3[pp]*x10*x2 - grad2_1_2_gt3[pp]*x13*x33 + 2.0*grad2_2_2_gt3[pp]*x10*x29 - grad_0_gt3[pp]*x27*x35*x37 - grad_0_gt3[pp]*x70*(x100*x27 - 1.0*x13*x84 + x2*x61 - 1.0*x21*x98 + x29*x99 + x44*x97) + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] + 6.0*grad_1_gt3[pp]*x2*x36*x58 - grad_1_gt3[pp]*x70*(-1.0*x13*x39 + x2*x85 - 1.0*x21*x35 + x29*x89 + x44*x86 + x91) - grad_2_gt3[pp]*x29*x37*x39 - grad_2_gt3[pp]*x70*(-1.0*x13*x50 + x2*x63 - 1.0*x21*x80 + x27*x96 + x29*x94 + x44*x92) - gt3[pp]*x10*x24*(2.0*grad_0_chi[pp]*x10*(-x100*x27 + x13*x84 - x2*x61 + x21*x98 - x29*x99 - 1.0*x44*x97) + 2.0*grad_1_chi[pp]*x10*(x13*x39 - x2*x85 + x21*x35 - x29*x89 - 1.0*x44*x86 - x91) + 2.0*grad_2_chi[pp]*x10*(x13*x50 - x2*x63 + x21*x80 - x27*x96 - x29*x94 - 1.0*x44*x92) + x2*(2*grad2_1_1_chi[pp] + x102*x25) + x27*(2*grad2_0_0_chi[pp] - 3.0*pow(grad_0_chi[pp], 2)*x23) + x29*(2*grad2_2_2_chi[pp] - pow(grad_2_chi[pp], 2)*x101) - (2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x103)*(2*x20 - x8) + (2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x103)*(2*x30 - 2*x31) - (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x102)*(2*x11 - 2*x12)) + 2.0*x13*x36*(grad_1_gt3[pp]*x39 - x68) + 2.0*x13*x36*(grad_1_gt5[pp]*x63 - grad_2_gt3[pp]*x67) + 2.0*x13*x36*(x38*x61 + x56*x72) + 2.0*x21*x36*(grad_2_gt3[pp]*x77 + x34*x63) - 2.0*x23*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x10*x61 + 1.0*grad_1_chi[pp]*x10*x85 + 1.0*grad_2_chi[pp]*x10*x63) + x32*x36*(0.25*grad_1_gt5[pp]*x53 + x66*x67) + x32*x36*(-0.25*x34*x50 + x79*x80) + x32*x36*(0.25*x38*x45 + x78*(1.0*x27*x38 + 1.0*x54 - 1.0*x55)) + x32*x36*(x41*x56 + x45*x66) + x36*x42*x45*(x40 - x41) + x36*x42*x53*(0.75*grad_0_gt4[pp] + 0.25*grad_2_gt1[pp] + x51) + x36*x47*x50*(0.25*grad_1_gt5[pp] + x46) + x36*x47*x56*(0.25*grad_0_gt4[pp] + 0.75*grad_2_gt1[pp] + x51) + x36*x59*x61*(-x17 + x18) - x36*x59*x63*(x14 + x15) + x36*x74*(0.25*grad_1_gt3[pp]*x35 - 1.0*x69) + x36*x74*(x45*x83 + 2*x61*x78) + x36*x74*(x63*x82 + x77*x81) - x65*(0.25*grad_2_gt3[pp]*x35 + x17*x39) - x65*(0.5*grad_2_gt3[pp]*x35 + x39*x64) + x71*(grad_1_gt0[pp]*x61 + x45*x72) + x71*(grad_1_gt3[pp]*x35 - x69) + x73*(0.25*grad_1_gt3[pp]*x39 - 1.0*x68) - x73*(-1.0*x61*x82 + x83*x84) - x73*(2*x63*x79 + x67*x81) - x25/pow(chi[pp], 2)) - 12*grad2_1_1_alpha[pp] + 12*grad_1_alpha[pp]*(1.0*x10*x13*x16 - 1.0*x10*x22 + 1.0*x10*x4 + x24*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x10*(grad_0_chi[pp]*x21 - grad_1_chi[pp]*x2 + grad_2_chi[pp]*x13)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At3[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt5[pp];
            double x6 = gt3[pp]*x5;
            double x7 = gt2[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt1[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x14 - x7;
            double x16 = -x4 + x5;
            double x17 = gt1[pp]*gt4[pp];
            double x18 = gt2[pp]*gt3[pp];
            double x19 = x17 - x18;
            double x20 = gt0[pp]*gt3[pp];
            double x21 = x20 - x3;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = grad_0_chi[pp]*x19 + grad_2_chi[pp]*x21;
            double x25 = 1.0/chi[pp];
            double x26 = 0.5*gt3[pp]*x25;
            double x27 = 0.5*x12;
            double x28 = 0.5*x11 - x27;
            double x29 = 0.5*grad_0_gt3[pp];
            double x30 = 1.0*grad_1_gt1[pp];
            double x31 = -x30;
            double x32 = x29 + x31;
            double x33 = 1.0*grad_1_gt4[pp];
            double x34 = 0.5*grad_2_gt3[pp];
            double x35 = x33 - x34;
            double x36 = grad_1_gt3[pp]*x28 + x19*x32 - x21*x35;
            double x37 = grad_0_chi[pp]*x23 + grad_2_chi[pp]*x19;
            double x38 = 0.5*x7;
            double x39 = 0.5*x14 - x38;
            double x40 = x19*x35;
            double x41 = grad_1_gt3[pp]*x39 + x23*x32 - x40;
            double x42 = -1.0*grad_1_chi[pp];
            double x43 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x16 + grad_2_chi[pp]*x13;
            double x44 = 1.0*x25;
            double x45 = 0.5*grad_1_gt3[pp];
            double x46 = x16*x45;
            double x47 = -x46;
            double x48 = x15*x32;
            double x49 = 1.0*x10;
            double x50 = 1.0*x10*x13*x35 + 1.0*x10*x47 - x48*x49;
            double x51 = grad_0_gt3[pp]*x16;
            double x52 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x53 = grad_1_gt0[pp]*x15 + x13*x52 - x51;
            double x54 = grad_1_gt3[pp]*x53;
            double x55 = x13*x35;
            double x56 = x46 + x48 - x55;
            double x57 = grad_0_gt3[pp]*x56;
            double x58 = pow(x9, -2);
            double x59 = x15*x58;
            double x60 = 2.0*x59;
            double x61 = -grad_0_gt3[pp];
            double x62 = grad_0_gt3[pp]*x15;
            double x63 = -x62;
            double x64 = grad_1_gt0[pp]*x23 + x19*x52;
            double x65 = x63 + x64;
            double x66 = grad_1_gt0[pp]*x41;
            double x67 = grad_0_gt3[pp]*x13;
            double x68 = grad_1_gt0[pp]*x19;
            double x69 = x21*x52;
            double x70 = x67 - x68 - x69;
            double x71 = x36*x52;
            double x72 = grad_0_gt5[pp]*x19;
            double x73 = grad_2_gt0[pp]*x23;
            double x74 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x75 = x15*x74 - x72 - x73;
            double x76 = grad_2_gt3[pp]*x15;
            double x77 = grad_1_gt5[pp]*x19;
            double x78 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x79 = -x23*x78 + x76 - x77;
            double x80 = grad_1_gt0[pp]*x23;
            double x81 = x19*x52;
            double x82 = x62 - x80 - x81;
            double x83 = 0.5*x17 - 0.5*x18;
            double x84 = grad_2_gt5[pp]*x83;
            double x85 = 0.5*grad_0_gt5[pp];
            double x86 = 1.0*grad_2_gt2[pp];
            double x87 = x85 - x86;
            double x88 = 0.5*grad_1_gt5[pp];
            double x89 = 1.0*grad_2_gt4[pp];
            double x90 = -x89;
            double x91 = x88 + x90;
            double x92 = -x15*x91 + x23*x87 - x84;
            double x93 = 0.5*grad_0_gt0[pp]*x23;
            double x94 = 1.0*grad_0_gt1[pp];
            double x95 = 0.5*grad_1_gt0[pp];
            double x96 = x94 - x95;
            double x97 = 1.0*grad_0_gt2[pp];
            double x98 = 0.5*grad_2_gt0[pp];
            double x99 = x97 - x98;
            double x100 = x19*x99;
            double x101 = -x100 + x15*x96 - x93;
            double x102 = 2.0*x58;
            double x103 = grad_1_gt5[pp]*x13;
            double x104 = grad_2_gt3[pp]*x16;
            double x105 = x103 - x104 + x15*x78;
            double x106 = 0.25*grad_1_gt3[pp]*x105;
            double x107 = grad_2_gt3[pp]*x56;
            double x108 = 4*x11 - 4*x12;
            double x109 = x108*x58;
            double x110 = 0.25*grad_0_gt3[pp];
            double x111 = -0.5*grad_1_gt1[pp] + x110;
            double x112 = x41*x74;
            double x113 = -0.25*grad_2_gt3[pp];
            double x114 = 0.5*grad_1_gt4[pp] + x113;
            double x115 = x19*x78;
            double x116 = grad_2_gt3[pp]*x13;
            double x117 = grad_1_gt5[pp]*x21;
            double x118 = -x116 + x117;
            double x119 = x115 + x118;
            double x120 = 2*x36*x91;
            double x121 = 4*x17 - 4*x18;
            double x122 = x67 - x68 - x69;
            double x123 = x19*x78;
            double x124 = x116 - x117 - x123;
            double x125 = x124*x52;
            double x126 = 0.25*x125;
            double x127 = x23*x78 + x77;
            double x128 = x127 - x76;
            double x129 = 0.25*grad_1_gt0[pp];
            double x130 = 0.5*grad_0_gt4[pp];
            double x131 = 0.5*grad_2_gt1[pp];
            double x132 = (-0.5)*grad_1_gt2[pp] + x130 + x131;
            double x133 = grad_1_gt0[pp]*x19 + x21*x52;
            double x134 = x133 - x67;
            double x135 = 0.25*x78;
            double x136 = 0.25*grad_1_gt3[pp]*x53;
            double x137 = 4*x14 - 4*x7;
            double x138 = x137*x58;
            double x139 = 2*x41*x96;
            double x140 = x36*x74;
            double x141 = -x129;
            double x142 = x141 + x94;
            double x143 = -4*x2 + 4*x22;
            double x144 = 0.75*grad_0_gt4[pp];
            double x145 = 0.25*grad_2_gt1[pp];
            double x146 = 0.25*grad_1_gt2[pp];
            double x147 = -x146;
            double x148 = x145 + x147;
            double x149 = x144 + x148;
            double x150 = -grad2_1_1_chi[pp];
            double x151 = x47 - x48 + x55;
            double x152 = 2.0*x25;
            double x153 = grad_2_gt0[pp]*x19;
            double x154 = grad_0_gt5[pp]*x21;
            double x155 = x13*x74 - x153 - x154;
            double x156 = 0.5*grad_2_gt5[pp]*x21;
            double x157 = x13*x91;
            double x158 = -x156 - x157 + x19*x87;
            double x159 = grad_0_gt0[pp]*x83;
            double x160 = x21*x99;
            double x161 = x13*x96 - x159 - x160;
            double x162 = grad_0_gt5[pp]*x13;
            double x163 = x16*x74;
            double x164 = grad_2_gt0[pp]*x15 + x162 - x163;
            double x165 = -x85 + x86;
            double x166 = grad_2_gt5[pp]*x28 + x15*x165 + x16*x91;
            double x167 = x16*x96;
            double x168 = grad_0_gt0[pp]*x39 + x13*x99 - x167;
            double x169 = x168*x23;
            double x170 = pow(grad_1_chi[pp], 2);
            double x171 = 3.0*x25;
            double x172 = -x171;
            double x173 = x16*(2*grad2_1_1_chi[pp] + x170*x172);
            double x174 = pow(grad_0_chi[pp], 2);
            double x175 = x23*(2*grad2_0_0_chi[pp] - 3.0*x174*x25);
            double x176 = pow(grad_2_chi[pp], 2);
            double x177 = x21*(2*grad2_2_2_chi[pp] - x171*x176);
            double x178 = 2*x14 - x8;
            double x179 = grad_0_chi[pp]*x171;
            double x180 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x179;
            double x181 = 2*x17 - 2*x18;
            double x182 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x179;
            double x183 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x172)*(2*x11 - 2*x12);
            double x184 = x151*x16;
            double x185 = x105*x13 + x15*x53 - 1.0*x164*x19 - x166*x21 - x169 - x184;
            double x186 = x158*x21;
            double x187 = x122*x15 + x124*x13 - 1.0*x155*x19 - x16*x36 - x161*x23 - x186;
            double x188 = x101*x23;
            double x189 = x13*x79 + x15*x82 - x16*x41 - x188 - 1.0*x19*x75 - x21*x92;
            double x190 = grad_1_gt3[pp]*x105;
            double x191 = x41*x78;
            double x192 = grad_1_gt5[pp]*x36;
            double x193 = 0.25*grad_1_gt5[pp];
            double x194 = 4*x20 - 4*x3;
            double x195 = 0.25*grad_0_gt4[pp];
            double x196 = 0.75*grad_2_gt1[pp];
            double x197 = x147 + x195 + x196;
            double x198 = -x29;
            double x199 = -4*x4 + 4*x5;
            double x200 = pow(chi[pp], -2);
            double x201 = 4.0*x10;
            double x202 = x13*x201;
            double x203 = x15*x201;
            double x204 = x105*x110;
            double x205 = x121*x58;
            double x206 = 0.25*grad_2_gt3[pp]*x53;
            double x207 = grad_2_gt3[pp]*x105;
            double x208 = 3.0*x58;
            double x209 = x208*x21;
            double x210 = x199*x58;
            double x211 = grad_0_gt3[pp]*x53;
            double x212 = x208*x23;
            double x213 = 2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x203 + 1.0*grad2_0_2_gt3[pp]*x10*x121 + 2.0*grad2_1_1_gt3[pp]*x10*x16 - grad2_1_2_gt3[pp]*x202 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - x170*x200 - x205*(0.5*grad_2_gt3[pp]*x53 + x204) - x205*(x105*x29 + x206) - x207*x209 - x210*x36*(x33 + x34) - x211*x212;
            double x214 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x19;
            double x215 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x216 = -x11 + x12;
            double x217 = grad_1_chi[pp]*x216 + x24;
            double x218 = grad_0_gt5[pp]*x155;
            double x219 = grad_1_gt5[pp]*x124;
            double x220 = x16*x208;
            double x221 = 6.0*x58;
            double x222 = 0.25*grad_2_gt0[pp];
            double x223 = -x222;
            double x224 = x143*x58;
            double x225 = -x145;
            double x226 = 0.75*grad_1_gt2[pp];
            double x227 = x194*x58;
            double x228 = 0.25*grad_0_gt5[pp];
            double x229 = x124*x228;
            double x230 = 0.25*grad_1_gt5[pp]*x155;
            double x231 = grad_2_gt3[pp]*x166;
            double x232 = 0.25*grad_2_gt3[pp]*x164;
            double x233 = 0.5*x52;
            double x234 = grad_2_gt5[pp]*x124;
            double x235 = grad_1_gt5[pp]*x158;
            double x236 = grad_0_gt5[pp]*x158;
            double x237 = x102*x19;
            double x238 = 0.25*grad_2_gt5[pp]*x124;
            double x239 = 0.25*grad_2_gt5[pp]*x155;
            double x240 = x222*x79;
            double x241 = x105*x74;
            double x242 = 0.25*x241;
            double x243 = x78*x92;
            double x244 = x75*x78;
            double x245 = 0.25*x244;
            double x246 = (-0.5)*grad_2_gt4[pp] + x193;
            double x247 = -x164*x246;
            double x248 = -x103 + x104 - x15*x78;
            double x249 = x246*x248;
            double x250 = -0.5*grad_2_gt2[pp] + x228;
            double x251 = -x250*x79;
            double x252 = -x15*x74 + x72 + x73;
            double x253 = x250*x252;
            double x254 = (-0.5)*gt0[pp]*gt4[pp] + x27;
            double x255 = -x14 + x7;
            double x256 = -x88 + x89;
            double x257 = 2.0*x10;
            double x258 = -grad_0_chi[pp]*x189*x257 - grad_1_chi[pp]*x185*x257 - grad_2_chi[pp]*x187*x257 - x173 - x175 - x177 + x178*x180 - x181*x182 + x183;
            double x259 = -grad_0_chi[pp]*x19 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x21;
            double x260 = grad_0_chi[pp]*x255 + grad_1_chi[pp]*x16 + grad_2_chi[pp]*x216;
            double x261 = grad_0_gt3[pp]*x151;
            double x262 = grad_2_gt3[pp]*x151;
            double x263 = -x111*x79;
            double x264 = x114*x124;
            double x265 = 0.25*grad_1_gt5[pp]*x122;
            double x266 = x78*x82;
            double x267 = 0.25*x266;
            double x268 = x129*x79;
            double x269 = x63 + x80 + x81;
            double x270 = x111*x269;
            double x271 = x114*x122;
            double x272 = (-0.5)*gt1[pp]*gt5[pp] + x38;
            double x273 = x198 + x30;
            double x274 = grad_1_chi[pp]*x255 + x37;
            double x275 = -x195;
            double x276 = 0.25*grad_0_gt3[pp]*x164;
            double x277 = x129*x75;
            double x278 = x222*x82;
            double x279 = x122*x228;
            double x280 = grad_0_gt3[pp]*x168;
            double x281 = x53*x74;
            double x282 = 0.25*x281;
            double x283 = x155*x52;
            double x284 = 0.25*x283;
            double x285 = grad_0_gt5[pp]*x161;
            double x286 = 0.25*grad_0_gt0[pp]*x82;
            double x287 = 0.25*grad_0_gt0[pp]*x75;
            double x288 = x161*x52;
            double x289 = 0.5*grad_0_gt1[pp] + x141;
            double x290 = x164*x289;
            double x291 = x289*x53;
            double x292 = 0.5*grad_0_gt2[pp] + x223;
            double x293 = x122*x292;
            double x294 = x155*x292;
            double x295 = -x227;
            double x296 = 0.25*grad_1_gt5[pp]*x105;
            double x297 = x132*x92 + x228*x79;
            double x298 = -x158*x91;
            double x299 = x289*x75;
            double x300 = x292*x82;
            double x301 = x299 + x300;
            double x302 = x52*x53;
            double x303 = 0.25*x302;
            double x304 = x105*x114;
            double x305 = 0.5*grad_1_gt3[pp]*x166;
            double x306 = 0.25*grad_2_gt3[pp]*x105 + x305;
            double x307 = -0.25*x23*x78 + 0.25*x76 - 0.25*x77;
            double x308 = x307*x78;
            double x309 = x29*x92 + x307*x52;
            double x310 = x148 + x195;
            double x311 = x310*x79 + x41*x85;
            double x312 = 0.5*grad_2_gt5[pp]*x36;
            double x313 = x246*(x118 + x123) + x312;
            double x314 = 0.25*grad_1_gt5[pp]*x53;
            double x315 = x166*x29;
            double x316 = x232 + x315;
            double x317 = 0.25*x52;
            double x318 = x105*x317;
            double x319 = x132*x158 + x229;
            double x320 = x292*x79 + x92*x96;
            double x321 = x310*x75;
            double x322 = 0.5*grad_1_gt0[pp]*x92;
            double x323 = x228*x82 + x322;
            double x324 = 0.5*grad_1_gt2[pp];
            double x325 = (-0.5)*grad_2_gt1[pp] + x130 + x324;
            double x326 = x158*x325;
            double x327 = -x155*x246;
            double x328 = 0.25*grad_2_gt5[pp]*x122;
            double x329 = x327 + x328;
            double x330 = x114*x53;
            double x331 = 0.25*grad_2_gt0[pp]*x15 + 0.25*x162 - 0.25*x163;
            double x332 = grad_1_gt3[pp]*x331;
            double x333 = x204 + x332;
            double x334 = x111*x252;
            double x335 = x289*x79 + x41*x99;
            double x336 = x151*x325;
            double x337 = x114*x155;
            double x338 = x36*x85;
            double x339 = x124*x310 + x338;
            double x340 = x151*x35;
            double x341 = x110*x79 + x325*x41;
            double x342 = 0.25*grad_2_gt3[pp]*x124;
            double x343 = grad_1_gt5[pp]*x122;
            double x344 = grad_2_gt3[pp]*x155 + x343;
            double x345 = x52*x82;
            double x346 = grad_1_gt0[pp]*x79;
            double x347 = grad_0_gt3[pp]*x75 + x346;
            double x348 = grad_0_gt5[pp]*x122;
            double x349 = x155*x74;
            double x350 = x348 + x349;
            double x351 = 1.0*x58;
            double x352 = x23*x351;
            double x353 = -x202;
            double x354 = -x203;
            double x355 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x354 + 1.0*grad2_0_2_gt4[pp]*x10*x121 + 2.0*grad2_1_1_gt4[pp]*x10*x16 + grad2_1_2_gt4[pp]*x353 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x189*x58 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x200 + 2.0*grad_1_gt4[pp]*x185*x58 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x187*x58 + 1.0*gt4[pp]*x10*x25*x258 - x152*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x215*(grad_2_gt3[pp]*x255 + x127) + 0.5*grad_1_chi[pp]*x215*(grad_1_gt5[pp]*x216 + x104 + x255*x78) + 0.5*grad_2_chi[pp]*x215*(grad_2_gt3[pp]*x216 + x115 + x117));
            double x356 = -grad_1_chi[pp];
            double x357 = 2.0*grad_2_alpha[pp];
            double x358 = -grad_2_chi[pp];
            double x359 = 2.0*grad_1_alpha[pp];
            double x360 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x214*x25 - 2.0*x23*x78 + 2.0*x76 - 2.0*x77) + x357*(1.0*grad_2_gt3[pp]*x10*x13 - x117*x49 - x123*x49 + x44*(1.0*gt4[pp]*x215*x217 + x356)) + x359*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x15*x78 - x104*x49 + x44*(1.0*gt4[pp]*x215*x260 + x358));
            double x361 = x228*x75;
            double x362 = (-0.5)*grad_0_gt4[pp] + x131 + x324;
            double x363 = 0.25*grad_1_gt5[pp]*x164 + x166*x362;
            double x364 = -x158*x87;
            double x365 = 0.25*grad_1_gt0[pp]*x164 + x168*x325;
            double x366 = x101*x99;
            double x367 = 0.25*grad_2_gt0[pp]*x155;
            double x368 = 0.5*x164*x35 - x166*x32;
            double x369 = x158*x362 + x230;
            double x370 = x317*x75 + x322;
            double x371 = x105*x78;
            double x372 = 0.25*x371;
            double x373 = -x124*x250;
            double x374 = x328 + x373;
            double x375 = x292*x75;
            double x376 = 0.5*grad_0_gt0[pp]*x92;
            double x377 = x222*x75 + x376;
            double x378 = x331*x74;
            double x379 = 0.5*grad_1_gt0[pp]*x166 + x331*x52;
            double x380 = x168*x88 + x331*x78;
            double x381 = 0.5*grad_2_gt5[pp]*x161;
            double x382 = x250*(-x13*x74 + x153 + x154) + x381;
            double x383 = 0.25*grad_0_gt0[pp]*x79;
            double x384 = x277 + x383;
            double x385 = x101*x325;
            double x386 = x105*x289;
            double x387 = -0.5*x164*x32 + x168*x35;
            double x388 = x124*x292;
            double x389 = 0.5*grad_1_gt5[pp]*x161;
            double x390 = x135*x155 + x389;
            double x391 = x111*x248;
            double x392 = x330 + x391;
            double x393 = 0.25*x345;
            double x394 = grad_2_gt0[pp]*x124;
            double x395 = grad_0_gt3[pp]*x164;
            double x396 = grad_1_gt0[pp]*x105;
            double x397 = x124*x78;
            double x398 = x16*x351;
            double x399 = -grad_0_chi[pp]*x200;
            double x400 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x354 + 1.0*grad2_0_2_gt2[pp]*x10*x121 + 2.0*grad2_1_1_gt2[pp]*x10*x16 + grad2_1_2_gt2[pp]*x353 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x189*x58 + 2.0*grad_1_gt2[pp]*x185*x58 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x399 + 2.0*grad_2_gt2[pp]*x187*x58 + 1.0*gt2[pp]*x10*x25*x258 - x152*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x215*(grad_2_gt0[pp]*x23 + x255*x74 + x72) + 0.5*grad_1_chi[pp]*x215*(grad_0_gt5[pp]*x216 + grad_2_gt0[pp]*x255 + x16*x74) + 0.5*grad_2_chi[pp]*x215*(grad_2_gt0[pp]*x19 + x154 + x216*x74));
            double x401 = -grad_0_chi[pp];
            double x402 = 2.0*grad_0_alpha[pp];
            double x403 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x25*x43 + x164) + x357*(1.0*x10*x13*x74 - x153*x49 - x154*x49 + x44*(1.0*gt2[pp]*x215*x217 + x401)) + x402*(1.0*x10*x15*x74 + x44*(1.0*gt2[pp]*x215*x274 + x358) - x49*x72 - x49*x73);
            double x404 = 0.25*x349;
            double x405 = 0.25*grad_1_gt5[pp]*x124;
            double x406 = x250*x269;
            double x407 = x132*x151;
            double x408 = 0.25*grad_2_gt3[pp]*x155 + x338;
            double x409 = x110*x75;
            double x410 = 0.5*grad_2_gt0[pp]*x41;
            double x411 = grad_0_gt5[pp]*x82;
            double x412 = grad_2_gt0[pp]*x79;
            double x413 = x412 + x74*x75;
            double x414 = x19*x351;
            double x415 = grad_1_gt5[pp]*x53;
            double x416 = grad_2_gt3[pp]*x164;
            double x417 = x241 + x416;
            double x418 = x281 + x395;
            double x419 = -x205;
            double x420 = -x246*x53;
            double x421 = x155*x228;
            double x422 = x277 + x278;
            double x423 = x101*x362 + x383;
            double x424 = x124*x222 + x389;
            double x425 = 0.25*x397;
            double x426 = x13*x58;
            double x427 = x168*x34;
            double x428 = x105*x129 + x427;
            double x429 = -x224;
            double x430 = x327 + x373;
            double x431 = x101*x96;
            double x432 = x122*x222 + x132*x161;
            double x433 = 0.25*grad_1_gt0[pp]*x53;
            double x434 = -0.5*x122*x91 - x36*x87;
            double x435 = x332 + x391;
            double x436 = x151*x362 + x206;
            double x437 = x268 + x410;
            double x438 = x310*x82;
            double x439 = x278 + x383;
            double x440 = x101*x132;
            double x441 = -0.5*x122*x87 - x161*x91;
            double x442 = x427 + 0.25*x53*x78;
            double x443 = 0.25*x67 - 0.25*x68 - 0.25*x69;
            double x444 = x443*x52;
            double x445 = 0.5*grad_2_gt0[pp]*x36 + x122*x310;
            double x446 = x289*x82;
            double x447 = 0.5*grad_0_gt0[pp]*x41;
            double x448 = x129*x82 + x447;
            double x449 = 0.5*grad_2_gt3[pp]*x161 + x443*x78;
            double x450 = x168*x45;
            double x451 = x111*(-grad_1_gt0[pp]*x15 - x13*x52 + x51) + x450;
            double x452 = x110*x82;
            double x453 = 0.25*grad_2_gt3[pp]*x122 + x36*x362;
            double x454 = -x151*x32;
            double x455 = x21*x351;
            double x456 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x354 + 1.0*grad2_0_2_gt1[pp]*x10*x121 + 2.0*grad2_1_1_gt1[pp]*x10*x16 + grad2_1_2_gt1[pp]*x353 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x189*x58 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x399 + 2.0*grad_1_gt1[pp]*x185*x58 + 2.0*grad_2_gt1[pp]*x187*x58 + 1.0*gt1[pp]*x10*x25*x258 - x152*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x215*(grad_0_gt3[pp]*x255 + x64) + 0.5*grad_1_chi[pp]*x215*(grad_1_gt0[pp]*x255 + x216*x52 + x51) + 0.5*grad_2_chi[pp]*x215*(grad_0_gt3[pp]*x216 + x133));
            double x457 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x25*x259 + 2.0*x67 - 2.0*x68 - 2.0*x69) + x359*(1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x13*x52 + x44*(1.0*gt1[pp]*x215*x260 + x401) - x49*x51) + x402*(1.0*grad_0_gt3[pp]*x10*x15 + x44*(1.0*gt1[pp]*x215*x274 + x356) - x49*x80 - x49*x81);
            double x458 = 0.25*grad_0_gt3[pp]*x53;
            _3748[pp] = 2*At1[pp]*grad_1_beta0[pp] + 4.0*At3[pp]*grad_1_beta1[pp]*x0 - 0.66666666666666663*At3[pp]*grad_2_beta2[pp] + 2*At4[pp]*grad_1_beta2[pp] - alpha[pp]*(2.0*At1[pp]*x10*(-At1[pp]*x23 + At3[pp]*x15 - At4[pp]*x19) + 2.0*At3[pp]*x10*(At1[pp]*x15 + At4[pp]*x13 + x1*x16) + 2.0*At4[pp]*x10*(-At1[pp]*x19 + At3[pp]*x13 - At4[pp]*x21) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt3[pp]*x102*(x101*x23 - 1.0*x13*x79 - 1.0*x15*x82 + x16*x41 + x19*x75 + x21*x92) - grad_1_gt3[pp]*x102*(-1.0*x105*x13 - 1.0*x15*x53 + x151*x16 + x164*x19 + x166*x21 + x169) + 6.0*grad_1_gt3[pp]*x16*x56*x58 - grad_2_gt3[pp]*x102*(-1.0*x122*x15 - 1.0*x124*x13 + x155*x19 + x158*x21 + x16*x36 + x161*x23) - gt3[pp]*x10*x44*(2.0*grad_0_chi[pp]*x10*x189 + 2.0*grad_1_chi[pp]*x10*x185 + 2.0*grad_2_chi[pp]*x10*x187 + x173 + x175 + x177 - x178*x180 + x181*x182 - x183) + x109*(x106 - 1.0*x107) - x109*(x111*x79 - 1.0*x112) - x109*(x114*x119 + x120) + x121*x58*(0.25*grad_1_gt5[pp]*x134 + x119*x132) + x121*x58*(x122*x91 - x126) + x121*x58*(x128*x129 + x132*x65) + x121*x58*(x135*x65 + x96*(1.0*x23*x78 - 1.0*x76 + 1.0*x77)) + x124*x194*x58*(x193 + x90) + x128*x194*x197*x58 + 2.0*x13*x58*(-x107 + x190) + 2.0*x13*x58*(-grad_2_gt3[pp]*x119 + x192) + 2.0*x13*x58*(x128*x61 + x191) + x134*x143*x149*x58 + x137*x58*(x111*x65 + x139) + x137*x58*(x114*x70 + x140) + x138*(x136 - 1.0*x57) + x142*x143*x58*x65 + 2.0*x15*x58*(grad_2_gt3[pp]*x70 + x71) - x152*(1.0*grad_0_chi[pp]*x10*x41 + 1.0*grad_1_chi[pp]*x10*x151 + 1.0*grad_2_chi[pp]*x10*x36 + x150) + x199*x41*x58*(x198 + x31) + x213 + x60*(x54 - x57) + x60*(x61*x65 + x66)) - 12*grad2_1_1_alpha[pp] + 12.0*grad_0_alpha[pp]*x10*(-x26*(-grad_1_chi[pp]*x15 + x37) + x41) + 12*grad_1_alpha[pp]*(x44*(0.5*gt3[pp]*x10*x43 + x42) + x50) + 12.0*grad_2_alpha[pp]*x10*(-x26*(-grad_1_chi[pp]*x13 + x24) + x36) + 1.0*gt3[pp]*x10*(-x13*(alpha[pp]*(x109*(x304 + x306) + x109*(x308 + x309) + x109*(x151*x88 + x306) + x109*(x158*x35 + x313) + x109*(x273*x92 + x311) + 2.0*x13*x58*(grad_2_gt3[pp]*x158 + x219) + x138*(x330 + x333) + x138*(x333 + x336) + x138*(x334 + x335) + x138*(x337 + x339) - x205*(x230 + x319) - x205*(x245 + x320) - x205*(x314 + x316) - x205*(x316 + x318) - x205*(x321 + x323) - x205*(x326 + x329) - x210*(x263 + x341) - x210*(0.5*grad_1_gt3[pp]*x105 + x340) - x210*(x264 + x342 + x36*x88) - x224*(x277 + x301) - x224*(0.5*grad_0_gt3[pp]*x164 + x303) - x227*(0.5*x243 + x297) - x227*(x158*x88 + x238 + x298) + x295*(1.0*x231 + x296) - x352*(x283 + x350) + x355 + x59*(x125 + x344) + x59*(x345 + x347)) + x360) - x13*(alpha[pp]*(x109*(x308 + x311) + x109*(x309 - x41*x87) + x109*(x313 + x405) + x109*(x151*x256 + x304 + x305) + x109*(x158*x34 + x312 + x405) + 2.0*x13*x58*(grad_1_gt5[pp]*x151 + x207) + x138*(x265 + x339) + x138*(x265 + x408) + x138*(x267 + x335) + x138*(x204 + x206 + x336) + x138*(x330 + x332 + x407) + x138*(x393 + x409 + x410) - x205*(x229 + x329) - x205*(x319 + x328) - x205*(x320 + x406) - x210*(0.5*x191 + x341) - x210*(1.0*x192 + x342) - x210*(x106 + x151*x34 + x340) - x224*(x278 + x301) - x224*(x122*x85 + x404) - x227*(0.5*x234 + x298) + x295*(x251 + x297) + x295*(0.5*grad_2_gt3[pp]*x166 + x249 + x296) - x352*(x302 + x418) + x355 - x414*(x411 + x413) - x414*(x415 + x417) + x419*(x315 + x318 + x420)) + x360) - x15*(alpha[pp]*(x109*(x206 + x435) + x109*(x332 + x436) + x109*(x337 + x434) + x109*(x334 + x410 + x438) + x138*(x444 + x449) + x138*(x451 + x458) + x138*(x161*x35 + x445) + x138*(0.5*grad_1_gt0[pp]*x151 + x450 + x458) + x138*(x101*x273 + x446 + x447) + 2.0*x15*x58*(grad_0_gt3[pp]*x101 + grad_1_gt0[pp]*x82) - x205*(x284 + x441) - x205*(x299 + x423) - x205*(x404 + x424) - x205*(x422 + x440) - x210*(x271 + x453) - x210*(0.5*grad_1_gt3[pp]*x53 + x454) - x210*(0.5*grad_1_gt0[pp]*x41 + x270 + x452) - x224*(0.5*x288 + x432) - x224*(0.5*grad_1_gt0[pp]*x101 + x286 + x431) + x295*(x230 + x430) + x295*(0.5*grad_2_gt3[pp]*x164 + x372) + x419*(x276 + x428) + x419*(x276 + x442) + x426*(x266 + x347) + x426*(x344 + x397) + x429*(1.0*x280 + x433) - x455*(x244 + x413) + x456) + x457) + x16*(alpha[pp]*(2.0*grad_0_gt3[pp]*x189*x58 - grad_1_gt3[pp]*x184*x221 + 2.0*grad_1_gt3[pp]*x185*x58 + 2.0*grad_2_gt3[pp]*x187*x58 + 1.0*gt3[pp]*x10*x25*x258 + x108*x58*(x112 + x263) + x108*x58*(-x120 + x264) + x109*(x106 + 1.0*x262) - x122*x149*x224 - x124*x227*(-x193 + x89) + 2.0*x13*x58*(x190 + x262) + 2.0*x13*x58*(grad_0_gt3[pp]*x79 + x191) + 2.0*x13*x58*(grad_2_gt3[pp]*x124 + x192) + x137*x58*(x139 + x270) + x137*x58*(x140 + x271) + x138*(x136 + 1.0*x261) - x142*x224*x82 + 2.0*x15*x58*(grad_0_gt3[pp]*x82 + x66) - x152*(1.0*grad_0_chi[pp]*x215*(grad_1_gt3[pp]*x272 + x23*x273 + x40) + 1.0*grad_1_chi[pp]*x215*(x216*x35 + x255*x273 + x46) + 1.0*grad_2_chi[pp]*x215*(grad_1_gt3[pp]*x254 + x19*x273 + x21*x35) + x150) - x197*x227*x79 - x205*(x267 + x79*x96) - x205*(-1.0*x122*x91 + x126) - x205*(x124*x132 + x265) - x205*(x132*x82 + x268) - x210*x41*(x29 + x30) + x213 + x60*(x261 + x54) + x60*(grad_2_gt3[pp]*x122 + x71)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x214*x25 + x41) + 4*grad_1_alpha[pp]*(x44*(0.5*gt3[pp]*x215*x260 + x42) + x50) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x25*x259 + x36)) + x19*(alpha[pp]*(x109*(x229 + x369) + x109*(x240 + x323) + x109*(x240 + x370) + x109*(x242 + x368) + x109*(x326 + x374) + x109*(x314 + x315 + x372) + x138*(x300 + x384) + x138*(x384 + x385) + x138*(x386 + x387) + x138*(x388 + x390) - x205*(x375 + x377) - x205*(x378 + x379) - x205*(x101*x85 + x377) - x205*(x158*x99 + x382) - x205*(x166*x96 + x380) - x210*(x204 + x392) - x210*(0.5*grad_1_gt0[pp]*x79 + x393) - x224*(x290 + x365) - x224*(0.5*grad_0_gt0[pp]*x75 + x366) - x224*(x161*x85 + x294 + x367) - x227*(x132*x166 + x363) - x227*(x158*x85 + x239 + x364) - x237*(grad_2_gt0[pp]*x158 + x218) + x295*(1.0*grad_2_gt0[pp]*x92 + x361) - x398*(x125 + x343 + x397) + x400 + x59*(x283 + x348 + x394) + x59*(x302 + x395 + x396)) + x403) + x19*(alpha[pp]*(x109*(x230 + x374) + x109*(x328 + x369) + x109*(x368 + x420) + x109*(x370 + x406) + x138*(x279 + x390) + x138*(x279 + x424) + x138*(x282 + x387) + x138*(x300 + x423) + x138*(x303 + x428) + x138*(x385 + x422) - x205*(x382 + x421) - x205*(0.5*grad_2_gt0[pp]*x158 + x381 + x421) - x205*(x101*x165 + x375 + x376) - x210*(x206 + x392) - x210*(0.5*grad_1_gt5[pp]*x122 + x425) - x224*(1.0*x285 + x367) - x224*(0.5*grad_2_gt0[pp]*x101 + x287 + x366) - x227*(0.5*grad_2_gt0[pp]*x92 + x253 + x361) - x237*(grad_0_gt5[pp]*x101 + grad_2_gt0[pp]*x75) + x295*(x247 + x363) + x295*(0.5*grad_2_gt5[pp]*x155 + x364) - x398*(x266 + x345 + x346) + x400 + x419*(x378 + x380) + x419*(x168*x256 + x379) + x426*(x244 + x411 + x412) + x426*(x371 + x415 + x416) + x429*(x132*x168 + x365)) + x403) + x21*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x203 + 1.0*grad2_0_2_gt5[pp]*x10*x121 + 2.0*grad2_1_1_gt5[pp]*x10*x16 - grad2_1_2_gt5[pp]*x202 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 2.0*grad_0_gt5[pp]*x189*x58 + 2.0*grad_1_gt5[pp]*x185*x58 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x186*x221 + 2.0*grad_2_gt5[pp]*x187*x58 + 1.0*gt5[pp]*x10*x25*x258 - x105*x210*(x113 + x33) + x108*x58*(x251 + x52*x92) + x108*x58*(2*x166*x35 + x249) + x109*(1.0*x235 + x238) + 2.0*x13*x58*(x234 + x235) + 2.0*x13*x58*(grad_0_gt5[pp]*x79 + x243) + 2.0*x13*x58*(grad_1_gt5[pp]*x105 + x231) + x137*x58*(x245 + x79*x99) + x137*x58*(x164*x35 + x242) + x138*(0.5*grad_1_gt5[pp]*x155 + x229) + x138*(x105*x233 + x232) + x138*(x124*x85 + x230) + x138*(x233*x75 + x240) - x152*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x215*(x165*x23 + x255*x256 + x84) + 1.0*grad_1_chi[pp]*x215*(grad_2_gt5[pp]*x254 + x16*x256 + x165*x255) + 1.0*grad_2_chi[pp]*x215*(x156 + x165*x19 + x216*x256)) - x164*x224*(x144 + x146 + x225) - x166*x227*(x88 + x89) - x176*x200 - x205*(1.0*x236 + x239) - x205*(x253 + x92*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp])) - x205*(x166*x52 + x247) - x210*x79*(x195 + x225 + x226) - x212*x218 - x219*x220 - x224*x75*(x223 + x97) - x227*x92*(x85 + x86) - x237*(grad_0_gt5[pp]*x75 + grad_2_gt0[pp]*x92) - x237*(grad_1_gt5[pp]*x164 + x166*x74) - x237*(grad_2_gt5[pp]*x155 + x236)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x214*x25 + x92) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x25*x43 + x166) + 4*grad_2_alpha[pp]*(-x10*x156 + 1.0*x10*x19*x87 - x157*x49 + x44*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x215*x217))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x203 + 1.0*grad2_0_2_gt0[pp]*x10*x121 + 2.0*grad2_1_1_gt0[pp]*x10*x16 - grad2_1_2_gt0[pp]*x202 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x188*x221 + 2.0*grad_0_gt0[pp]*x189*x58 + 2.0*grad_1_gt0[pp]*x185*x58 - grad_1_gt0[pp]*x220*x82 + 2.0*grad_2_gt0[pp]*x187*x58 - grad_2_gt0[pp]*x209*x75 + 1.0*gt0[pp]*x10*x25*x258 + x109*(x276 + 0.5*x53*x78) + x109*(0.5*grad_1_gt0[pp]*x75 + x278) + x109*(0.5*grad_2_gt0[pp]*x82 + x277) + x109*(-1.0*x122*x87 + x284) + x109*(0.5*x155*x78 + x279) + x109*(-1.0*x164*x32 + x282) - x122*x210*(x145 + x226 + x275) + x137*x58*(x161*x78 + x293) + x137*x58*(-2*x168*x32 + x291) + x138*(1.0*grad_1_gt0[pp]*x101 + x286) - x152*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x215*(0.5*grad_0_gt0[pp]*x23 + x19*x99 + x255*x96) + 1.0*grad_1_chi[pp]*x215*(grad_0_gt0[pp]*x272 + x167 + x216*x99) + 1.0*grad_2_chi[pp]*x215*(x159 + x160 + x216*x96)) - x155*x227*(-x228 + x86) - x161*x224*(x97 + x98) - x164*x227*(x146 + x196 + x275) - x168*x224*(x94 + x95) - x174*x200 - x205*(1.0*grad_2_gt0[pp]*x101 + x287) - x205*(x161*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp]) + x294) - x205*(x168*x78 + x290) - x210*x53*(-x110 + x30) - x237*(grad_0_gt0[pp]*x75 + grad_2_gt0[pp]*x101) - x237*(grad_1_gt0[pp]*x164 + x168*x74) - x237*(grad_2_gt0[pp]*x155 + x285) + x60*(grad_0_gt0[pp]*x82 + grad_1_gt0[pp]*x101) + x60*(grad_1_gt0[pp]*x53 + x280) + x60*(grad_2_gt0[pp]*x122 + x288)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x15*x96 - x10*x93 - x100*x49 + x44*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x215*x274)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x25*x43 + x168) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x25*x259 + x161)) + x255*(alpha[pp]*(x109*(x126 + x434) + x109*(x204 + x436) + x109*(x407 + x435) + x109*(x408 + x425) + x109*(x409 + x437) + x109*(x437 + x438) + x138*(x444 + x445) + x138*(x446 + x448) + x138*(x101*x29 + x448) + x138*(x151*x96 + x451) + x138*(x36*x99 + x449) - x205*(x299 + x439) - x205*(x386 + x442) - x205*(x388 + x441) - x205*(x439 + x440) - x210*(x453 + 0.5*x71) - x210*(1.0*grad_1_gt0[pp]*x41 + x452) - x210*(x136 + x151*x29 + x454) - x224*(x293 + x432) - x224*(0.5*grad_0_gt0[pp]*x82 + x431) - x224*(x168*x29 + x291 + x433) - x227*(0.5*grad_2_gt0[pp]*x79 + x321) + x295*(x229 + x430) - x414*(x350 + x394) - x414*(x396 + x418) - x455*(x371 + x417) + x456 + x60*(grad_1_gt0[pp]*x151 + x211)) + x457))) + 2.0*grad_0_beta0[pp]*x0*x1;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = gt3[pp]*gt5[pp] - x0;
            double x2 = pow(gt1[pp], 2);
            double x3 = pow(gt2[pp], 2);
            double x4 = gt0[pp]*gt5[pp];
            double x5 = gt1[pp]*gt2[pp];
            double x6 = gt0[pp]*x0 + gt3[pp]*x3 - gt3[pp]*x4 - 2*gt4[pp]*x5 + gt5[pp]*x2;
            double x7 = 1.0/x6;
            double x8 = 1.0*x7;
            double x9 = gt0[pp]*gt3[pp] - x2;
            double x10 = 0.33333333333333331;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = x11 - x5;
            double x13 = gt1[pp]*gt4[pp];
            double x14 = gt2[pp]*gt3[pp];
            double x15 = gt1[pp]*gt5[pp];
            double x16 = gt2[pp]*gt4[pp];
            double x17 = x15 - x16;
            double x18 = -x3 + x4;
            double x19 = x18*x7;
            double x20 = 0.33333333333333331*x19;
            double x21 = pow(x12, 2);
            double x22 = pow(x17, 2);
            double x23 = At4[pp]*x12;
            double x24 = 2*x23;
            double x25 = 2*x17;
            double x26 = pow(x6, -3);
            double x27 = x13 - x14;
            double x28 = pow(x27, 2);
            double x29 = At1[pp]*x27;
            double x30 = At1[pp]*x1;
            double x31 = At4[pp]*x17;
            DENDRO_979[pp] = agrad_0_Gt1[pp]*beta0[pp] + agrad_1_Gt1[pp]*beta1[pp] + agrad_2_Gt1[pp]*beta2[pp] + 2*alpha[pp]*x26*(grad_0_gt0[pp]*(0.5*x15 - 0.5*x16) + x12*(1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp]) - x18*(1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp]))*(At0[pp]*pow(x1, 2) + 2*At2[pp]*x1*x27 + At3[pp]*x22 + At5[pp]*x28 - x25*x30 - 2*x27*x31) + 2.0*alpha[pp]*x26*(grad_0_gt5[pp]*x12 + grad_2_gt0[pp]*x17 - x18*(grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp]))*(At0[pp]*x1*x27 + At2[pp]*x1*x9 + At2[pp]*x28 + At3[pp]*x12*x17 + At5[pp]*x27*x9 - x12*x30 - x17*x29 - x23*x27 - x31*x9) + 2*alpha[pp]*x26*(grad_2_gt5[pp]*(0.5*x11 - 0.5*x5) + x17*(-0.5*grad_0_gt5[pp] + 1.0*grad_2_gt2[pp]) + x18*(0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp]))*(At0[pp]*x28 + 2*At2[pp]*x27*x9 + At3[pp]*x21 + At5[pp]*pow(x9, 2) - 2*x12*x29 - x24*x9) + 1.0*grad2_0_0_beta0[pp]*x10*x17*x7 - grad2_0_0_beta1[pp]*x1*x8 - grad2_0_1_beta0[pp]*x20 + 7.0*grad2_0_1_beta1[pp]*x10*x17*x7 + 1.0*grad2_0_2_beta0[pp]*x10*x12*x7 - grad2_0_2_beta1[pp]*x8*(2*x13 - 2*x14) + 1.0*grad2_0_2_beta2[pp]*x10*x17*x7 - 1.3333333333333333*grad2_1_1_beta1[pp]*x19 + 7.0*grad2_1_2_beta1[pp]*x10*x12*x7 - grad2_1_2_beta2[pp]*x20 - grad2_2_2_beta1[pp]*x8*x9 + 1.0*grad2_2_2_beta2[pp]*x10*x12*x7 - 2*grad_1_alpha[pp]*(At0[pp]*x22 - At1[pp]*x18*x25 + 2*At2[pp]*x12*x17 + At3[pp]*pow(x18, 2) + At5[pp]*x21 - x18*x24)/pow(x6, 2);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At5[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt3[pp];
            double x6 = gt5[pp]*x5;
            double x7 = gt1[pp]*gt2[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 + gt3[pp]*x4 - gt4[pp]*x8 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = x11 - x7;
            double x13 = gt1[pp]*gt5[pp];
            double x14 = gt2[pp]*gt4[pp];
            double x15 = x13 - x14;
            double x16 = gt0[pp]*gt5[pp];
            double x17 = x16 - x4;
            double x18 = gt1[pp]*gt4[pp];
            double x19 = gt2[pp]*gt3[pp];
            double x20 = x18 - x19;
            double x21 = -x3 + x5;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = 1.0/chi[pp];
            double x25 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x17 + grad_2_chi[pp]*x12;
            double x26 = 0.5*x7;
            double x27 = 0.5*x11 - x26;
            double x28 = 0.5*grad_0_gt5[pp];
            double x29 = -x28;
            double x30 = 1.0*grad_2_gt2[pp];
            double x31 = x29 + x30;
            double x32 = 0.5*grad_1_gt5[pp];
            double x33 = 1.0*grad_2_gt4[pp];
            double x34 = -x33;
            double x35 = x32 + x34;
            double x36 = grad_2_gt5[pp]*x27 + x15*x31 + x17*x35;
            double x37 = 0.5*gt5[pp]*x24*x25 + x36;
            double x38 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x20;
            double x39 = 0.5*x18 - 0.5*x19;
            double x40 = grad_2_gt5[pp]*x39;
            double x41 = x15*x35;
            double x42 = -x30;
            double x43 = x28 + x42;
            double x44 = -x23*x43 + x40 + x41;
            double x45 = x20*x43;
            double x46 = 1.0*x10;
            double x47 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x48 = -x11 + x7;
            double x49 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x48 + grad_2_chi[pp]*x21;
            double x50 = 1.0*x24;
            double x51 = x50*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x47*x49);
            double x52 = pow(x9, -2);
            double x53 = grad_2_gt0[pp]*x20;
            double x54 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x55 = grad_0_gt5[pp]*x21;
            double x56 = -x12*x54 + x55;
            double x57 = x53 + x56;
            double x58 = grad_0_gt5[pp]*x20;
            double x59 = grad_2_gt0[pp]*x23;
            double x60 = x15*x54 - x58 - x59;
            double x61 = grad_2_gt3[pp]*x15;
            double x62 = grad_1_gt5[pp]*x20;
            double x63 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x64 = -x23*x63 + x61 - x62;
            double x65 = grad_0_gt3[pp]*x15;
            double x66 = grad_1_gt0[pp]*x23;
            double x67 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x68 = x20*x67;
            double x69 = x65 - x66 - x68;
            double x70 = x23*x43 - x40 - x41;
            double x71 = 0.5*x14;
            double x72 = 0.5*x13 - x71;
            double x73 = 0.5*grad_0_gt3[pp];
            double x74 = 1.0*grad_1_gt1[pp];
            double x75 = x73 - x74;
            double x76 = 1.0*grad_1_gt4[pp];
            double x77 = 0.5*grad_2_gt3[pp];
            double x78 = x76 - x77;
            double x79 = x20*x78;
            double x80 = grad_1_gt3[pp]*x72 + x23*x75 - x79;
            double x81 = 0.5*grad_0_gt0[pp]*x23;
            double x82 = 1.0*grad_0_gt1[pp];
            double x83 = 0.5*grad_1_gt0[pp];
            double x84 = x82 - x83;
            double x85 = 1.0*grad_0_gt2[pp];
            double x86 = 0.5*grad_2_gt0[pp];
            double x87 = x85 - x86;
            double x88 = x20*x87;
            double x89 = x15*x84 - x81 - x88;
            double x90 = 2.0*x52;
            double x91 = 0.25*grad_0_gt5[pp];
            double x92 = -0.5*grad_2_gt2[pp] + x91;
            double x93 = x67*x70;
            double x94 = 4*x11 - 4*x7;
            double x95 = x52*x94;
            double x96 = x20*x63;
            double x97 = grad_2_gt3[pp]*x12;
            double x98 = grad_1_gt5[pp]*x21;
            double x99 = -x97 + x98;
            double x100 = x96 + x99;
            double x101 = grad_2_gt5[pp]*x100;
            double x102 = 0.5*grad_2_gt5[pp]*x21;
            double x103 = x12*x35;
            double x104 = x102 + x103 - x45;
            double x105 = grad_1_gt5[pp]*x104;
            double x106 = grad_0_gt5[pp]*x104;
            double x107 = x20*x90;
            double x108 = grad_2_gt0[pp]*x23;
            double x109 = -x15*x54 + x58;
            double x110 = x108 + x109;
            double x111 = 4*x18 - 4*x19;
            double x112 = 0.25*grad_1_gt5[pp];
            double x113 = (-0.5)*grad_2_gt4[pp] + x112;
            double x114 = x17*x54;
            double x115 = grad_0_gt5[pp]*x12 + grad_2_gt0[pp]*x15 - x114;
            double x116 = x36*x67;
            double x117 = 2.0*grad_0_gt2[pp];
            double x118 = 1.0*grad_2_gt0[pp];
            double x119 = x111*x52;
            double x120 = x23*x63 + x62;
            double x121 = x120 - x61;
            double x122 = 0.25*grad_2_gt0[pp];
            double x123 = 0.5*x67;
            double x124 = 4*x13 - 4*x14;
            double x125 = x124*x52;
            double x126 = 0.25*x63;
            double x127 = -x122;
            double x128 = x127 + x85;
            double x129 = -4*x2 + 4*x22;
            double x130 = -grad2_2_2_chi[pp];
            double x131 = -x102 - x103 + x45;
            double x132 = 2.0*x24;
            double x133 = grad_1_gt5[pp]*x12;
            double x134 = grad_2_gt3[pp]*x17;
            double x135 = x133 - x134 + x15*x63;
            double x136 = grad_0_gt3[pp]*x17;
            double x137 = grad_1_gt0[pp]*x15 + x12*x67 - x136;
            double x138 = 0.5*grad_1_gt3[pp];
            double x139 = x138*x17;
            double x140 = -x139;
            double x141 = x15*x75;
            double x142 = x12*x78 + x140 - x141;
            double x143 = x17*x84;
            double x144 = grad_0_gt0[pp]*x72 + x12*x87 - x143;
            double x145 = x144*x23;
            double x146 = grad_2_gt0[pp]*x20;
            double x147 = x12*x54 - x146 - x55;
            double x148 = x20*x63;
            double x149 = -x148 + x97 - x98;
            double x150 = grad_0_gt3[pp]*x12;
            double x151 = grad_1_gt0[pp]*x20;
            double x152 = x21*x67;
            double x153 = x150 - x151 - x152;
            double x154 = grad_1_gt3[pp]*x27 + x20*x75 - x21*x78;
            double x155 = grad_0_gt0[pp]*x39;
            double x156 = x21*x87;
            double x157 = x12*x84 - x155 - x156;
            double x158 = pow(grad_1_chi[pp], 2);
            double x159 = 3.0*x24;
            double x160 = -x159;
            double x161 = x17*(2*grad2_1_1_chi[pp] + x158*x160);
            double x162 = pow(grad_0_chi[pp], 2);
            double x163 = x23*(2*grad2_0_0_chi[pp] - 3.0*x162*x24);
            double x164 = pow(grad_2_chi[pp], 2);
            double x165 = x21*(2*grad2_2_2_chi[pp] - x159*x164);
            double x166 = 2*x13 - 2*x14;
            double x167 = grad_0_chi[pp]*x159;
            double x168 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x167;
            double x169 = 2*x18 - 2*x19;
            double x170 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x167;
            double x171 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x160)*(2*x11 - x8);
            double x172 = x142*x17;
            double x173 = -1.0*x115*x20 + x12*x135 + x137*x15 - x145 - x172 - x21*x36;
            double x174 = x131*x21;
            double x175 = x12*x149 - 1.0*x147*x20 + x15*x153 - x154*x17 - x157*x23 - x174;
            double x176 = x23*x89;
            double x177 = x12*x64 + x15*x69 - x17*x80 - x176 - 1.0*x20*x60 - x21*x70;
            double x178 = x12*x52;
            double x179 = 2.0*x178;
            double x180 = 0.25*grad_0_gt4[pp];
            double x181 = 0.75*grad_1_gt2[pp];
            double x182 = 0.25*grad_2_gt1[pp];
            double x183 = -x182;
            double x184 = x52*(4*x16 - 4*x4);
            double x185 = x184*(x180 + x181 + x183);
            double x186 = -4*x3 + 4*x5;
            double x187 = -x32;
            double x188 = pow(chi[pp], -2);
            double x189 = 4.0*x10;
            double x190 = x12*x189;
            double x191 = x15*x189;
            double x192 = 0.75*grad_0_gt4[pp];
            double x193 = 0.25*grad_1_gt2[pp];
            double x194 = x129*x52;
            double x195 = -x133 + x134 - x15*x63;
            double x196 = x113*x195;
            double x197 = 0.25*grad_2_gt3[pp]*x115;
            double x198 = x135*x54;
            double x199 = 0.25*x198;
            double x200 = -0.25*grad_2_gt3[pp];
            double x201 = grad_2_gt3[pp]*x36;
            double x202 = 2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x191 + 1.0*grad2_0_2_gt5[pp]*x10*x111 + 2.0*grad2_1_1_gt5[pp]*x10*x17 - grad2_1_2_gt5[pp]*x190 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - x107*(grad_1_gt5[pp]*x115 + x36*x54) - x115*x194*(x183 + x192 + x193) + 2.0*x12*x52*(grad_1_gt5[pp]*x135 + x201) + x124*x52*(x115*x78 + x199) + x125*(x123*x135 + x197) - x135*x184*(x200 + x76) - x164*x188 + x52*x94*(x196 + 2*x36*x78);
            double x203 = 0.25*grad_2_gt5[pp]*x149;
            double x204 = grad_1_gt5[pp]*x131;
            double x205 = -x64*x92;
            double x206 = grad_0_gt5[pp]*x131;
            double x207 = 0.25*grad_2_gt5[pp]*x147;
            double x208 = -x113*x115;
            double x209 = x109 + x59;
            double x210 = x209*x92;
            double x211 = x122*x64;
            double x212 = x149*x91;
            double x213 = 0.25*grad_1_gt5[pp]*x147;
            double x214 = x60*x63;
            double x215 = 0.25*x214;
            double x216 = grad_1_gt5[pp]*x149;
            double x217 = 3.0*x52;
            double x218 = x17*x217;
            double x219 = (-0.5)*gt0[pp]*gt4[pp] + x26;
            double x220 = -x13 + x14;
            double x221 = x187 + x33;
            double x222 = 6.0*x52;
            double x223 = grad_2_gt5[pp]*x149;
            double x224 = x63*x70;
            double x225 = grad_0_gt5[pp]*x147;
            double x226 = x217*x23;
            double x227 = x186*x52;
            double x228 = 2.0*x10;
            double x229 = -grad_0_chi[pp]*x177*x228 - grad_1_chi[pp]*x173*x228 - grad_2_chi[pp]*x175*x228 - x161 - x163 - x165 + x166*x168 - x169*x170 + x171;
            double x230 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x12 - grad_2_chi[pp]*x21;
            double x231 = grad_0_chi[pp]*x220 + grad_1_chi[pp]*x17 + grad_2_chi[pp]*x48;
            double x232 = grad_0_gt3[pp]*x137;
            double x233 = grad_2_gt3[pp]*x135;
            double x234 = x21*x217;
            double x235 = 0.25*grad_1_gt0[pp];
            double x236 = -x235;
            double x237 = -x193;
            double x238 = x182 + x237;
            double x239 = 0.75*grad_2_gt1[pp];
            double x240 = 0.25*grad_0_gt3[pp];
            double x241 = x135*x240;
            double x242 = 0.25*grad_2_gt3[pp]*x137;
            double x243 = grad_2_gt3[pp]*x142;
            double x244 = grad_0_gt3[pp]*x142;
            double x245 = x15*x52;
            double x246 = 2.0*x245;
            double x247 = 0.25*grad_1_gt3[pp]*x137;
            double x248 = 0.25*grad_1_gt3[pp]*x135;
            double x249 = grad_1_gt5[pp]*x154;
            double x250 = 0.25*grad_1_gt5[pp]*x153;
            double x251 = 0.5*grad_0_gt4[pp];
            double x252 = 0.5*grad_2_gt1[pp];
            double x253 = (-0.5)*grad_1_gt2[pp] + x251 + x252;
            double x254 = x63*x80;
            double x255 = x235*x64;
            double x256 = x154*x67;
            double x257 = x149*x67;
            double x258 = 0.25*x257;
            double x259 = x63*x69;
            double x260 = 0.25*x259;
            double x261 = 0.5*grad_1_gt4[pp] + x200;
            double x262 = x153*x261;
            double x263 = -0.5*grad_1_gt1[pp] + x240;
            double x264 = -x263*x64;
            double x265 = x149*x261;
            double x266 = -x65 + x66 + x68;
            double x267 = x263*x266;
            double x268 = (-0.5)*gt1[pp]*gt5[pp] + x71;
            double x269 = -x73 + x74;
            double x270 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x220 + grad_2_chi[pp]*x20;
            double x271 = -x180;
            double x272 = 0.25*grad_0_gt3[pp]*x115;
            double x273 = x235*x60;
            double x274 = x122*x69;
            double x275 = x153*x91;
            double x276 = grad_0_gt3[pp]*x144;
            double x277 = x137*x54;
            double x278 = 0.25*x277;
            double x279 = x147*x67;
            double x280 = 0.25*x279;
            double x281 = grad_0_gt5[pp]*x157;
            double x282 = 0.25*grad_0_gt0[pp]*x69;
            double x283 = 0.25*grad_0_gt0[pp]*x60;
            double x284 = x157*x67;
            double x285 = 0.5*grad_0_gt1[pp] + x236;
            double x286 = x115*x285;
            double x287 = x137*x285;
            double x288 = 0.5*grad_0_gt2[pp] + x127;
            double x289 = x153*x288;
            double x290 = x147*x288;
            double x291 = -x227;
            double x292 = 0.25*grad_1_gt5[pp]*x135;
            double x293 = x253*x70 + x64*x91;
            double x294 = -x131*x35;
            double x295 = x285*x60;
            double x296 = x288*x69;
            double x297 = x295 + x296;
            double x298 = x137*x67;
            double x299 = 0.25*x298;
            double x300 = x135*x261;
            double x301 = 0.5*grad_1_gt3[pp]*x36;
            double x302 = 0.25*grad_2_gt3[pp]*x135 + x301;
            double x303 = -0.25*x23*x63 + 0.25*x61 - 0.25*x62;
            double x304 = x303*x63;
            double x305 = x303*x67 + x70*x73;
            double x306 = x180 + x238;
            double x307 = x28*x80 + x306*x64;
            double x308 = 0.5*grad_2_gt5[pp]*x154;
            double x309 = x113*(x148 + x99) + x308;
            double x310 = 0.25*grad_1_gt5[pp]*x137;
            double x311 = x36*x73;
            double x312 = x197 + x311;
            double x313 = 0.25*x67;
            double x314 = x135*x313;
            double x315 = x131*x253 + x212;
            double x316 = x288*x64 + x70*x84;
            double x317 = x306*x60;
            double x318 = 0.5*grad_1_gt0[pp]*x70;
            double x319 = x318 + x69*x91;
            double x320 = 0.5*grad_1_gt2[pp];
            double x321 = (-0.5)*grad_2_gt1[pp] + x251 + x320;
            double x322 = x131*x321;
            double x323 = -x113*x147;
            double x324 = 0.25*grad_2_gt5[pp]*x153;
            double x325 = x323 + x324;
            double x326 = x137*x261;
            double x327 = 0.25*grad_2_gt0[pp]*x15 - 0.25*x114 + x12*x91;
            double x328 = grad_1_gt3[pp]*x327;
            double x329 = x241 + x328;
            double x330 = x209*x263;
            double x331 = x285*x64 + x80*x87;
            double x332 = x142*x321;
            double x333 = x147*x261;
            double x334 = x154*x28;
            double x335 = x149*x306 + x334;
            double x336 = x142*x78;
            double x337 = x240*x64 + x321*x80;
            double x338 = 0.25*grad_2_gt3[pp]*x149;
            double x339 = grad_1_gt5[pp]*x153;
            double x340 = grad_2_gt3[pp]*x147 + x339;
            double x341 = x67*x69;
            double x342 = grad_1_gt0[pp]*x64;
            double x343 = grad_0_gt3[pp]*x60 + x342;
            double x344 = grad_0_gt5[pp]*x153;
            double x345 = x147*x54;
            double x346 = x344 + x345;
            double x347 = 1.0*x52;
            double x348 = x23*x347;
            double x349 = -x190;
            double x350 = -x191;
            double x351 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x350 + 1.0*grad2_0_2_gt4[pp]*x10*x111 + 2.0*grad2_1_1_gt4[pp]*x10*x17 + grad2_1_2_gt4[pp]*x349 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x177*x52 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x188 + 2.0*grad_1_gt4[pp]*x173*x52 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x175*x52 + 1.0*gt4[pp]*x10*x229*x24 - x132*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x47*(grad_2_gt3[pp]*x220 + x120) + 0.5*grad_1_chi[pp]*x47*(grad_1_gt5[pp]*x48 + x134 + x220*x63) + 0.5*grad_2_chi[pp]*x47*(grad_2_gt3[pp]*x48 + x96 + x98));
            double x352 = -grad_1_chi[pp];
            double x353 = 2.0*grad_2_alpha[pp];
            double x354 = -grad_2_chi[pp];
            double x355 = 2.0*grad_1_alpha[pp];
            double x356 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x24*x38 - 2.0*x23*x63 + 2.0*x61 - 2.0*x62) + x353*(1.0*grad_2_gt3[pp]*x10*x12 - x148*x46 - x46*x98 + x50*(1.0*gt4[pp]*x47*x49 + x352)) + x355*(1.0*grad_1_gt5[pp]*x10*x12 + 1.0*x10*x15*x63 - x134*x46 + x50*(1.0*gt4[pp]*x231*x47 + x354));
            double x357 = x60*x91;
            double x358 = (-0.5)*grad_0_gt4[pp] + x252 + x320;
            double x359 = 0.25*grad_1_gt5[pp]*x115 + x358*x36;
            double x360 = -x131*x43;
            double x361 = 0.25*grad_1_gt0[pp]*x115 + x144*x321;
            double x362 = x87*x89;
            double x363 = 0.25*grad_2_gt0[pp]*x147;
            double x364 = 0.5*x115*x78 - x36*x75;
            double x365 = x131*x358 + x213;
            double x366 = x313*x60 + x318;
            double x367 = x135*x63;
            double x368 = 0.25*x367;
            double x369 = -x149*x92;
            double x370 = x324 + x369;
            double x371 = x288*x60;
            double x372 = 0.5*grad_0_gt0[pp]*x70;
            double x373 = x122*x60 + x372;
            double x374 = x327*x54;
            double x375 = 0.5*grad_1_gt0[pp]*x36 + x327*x67;
            double x376 = x144*x32 + x327*x63;
            double x377 = 0.5*grad_2_gt5[pp]*x157;
            double x378 = x377 + x92*(x146 + x56);
            double x379 = 0.25*grad_0_gt0[pp]*x64;
            double x380 = x273 + x379;
            double x381 = x321*x89;
            double x382 = x135*x285;
            double x383 = -0.5*x115*x75 + x144*x78;
            double x384 = x149*x288;
            double x385 = 0.5*grad_1_gt5[pp]*x157;
            double x386 = x126*x147 + x385;
            double x387 = x195*x263;
            double x388 = x326 + x387;
            double x389 = 0.25*x341;
            double x390 = grad_2_gt0[pp]*x149;
            double x391 = grad_0_gt3[pp]*x115;
            double x392 = grad_1_gt0[pp]*x135;
            double x393 = x149*x63;
            double x394 = x17*x347;
            double x395 = -grad_0_chi[pp]*x188;
            double x396 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x350 + 1.0*grad2_0_2_gt2[pp]*x10*x111 + 2.0*grad2_1_1_gt2[pp]*x10*x17 + grad2_1_2_gt2[pp]*x349 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x177*x52 + 2.0*grad_1_gt2[pp]*x173*x52 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x395 + 2.0*grad_2_gt2[pp]*x175*x52 + 1.0*gt2[pp]*x10*x229*x24 - x132*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x47*(x108 + x220*x54 + x58) + 0.5*grad_1_chi[pp]*x47*(grad_0_gt5[pp]*x48 + grad_2_gt0[pp]*x220 + x17*x54) + 0.5*grad_2_chi[pp]*x47*(x48*x54 + x53 + x55));
            double x397 = -grad_0_chi[pp];
            double x398 = 2.0*grad_0_alpha[pp];
            double x399 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x24*x25 + x115) + x353*(1.0*x10*x12*x54 - x146*x46 - x46*x55 + x50*(1.0*gt2[pp]*x47*x49 + x397)) + x398*(1.0*x10*x15*x54 - x46*x58 - x46*x59 + x50*(1.0*gt2[pp]*x270*x47 + x354));
            double x400 = 0.25*x345;
            double x401 = 0.25*grad_1_gt5[pp]*x149;
            double x402 = x266*x92;
            double x403 = x142*x253;
            double x404 = 0.25*grad_2_gt3[pp]*x147 + x334;
            double x405 = x240*x60;
            double x406 = 0.5*grad_2_gt0[pp]*x80;
            double x407 = grad_0_gt5[pp]*x69;
            double x408 = grad_2_gt0[pp]*x64;
            double x409 = x408 + x54*x60;
            double x410 = x20*x347;
            double x411 = grad_1_gt5[pp]*x137;
            double x412 = grad_2_gt3[pp]*x115;
            double x413 = x198 + x412;
            double x414 = x277 + x391;
            double x415 = -x119;
            double x416 = -x113*x137;
            double x417 = x147*x91;
            double x418 = x273 + x274;
            double x419 = x358*x89 + x379;
            double x420 = x122*x149 + x385;
            double x421 = 0.25*x393;
            double x422 = x144*x77;
            double x423 = x135*x235 + x422;
            double x424 = -x194;
            double x425 = x323 + x369;
            double x426 = x84*x89;
            double x427 = x122*x153 + x157*x253;
            double x428 = 0.25*grad_1_gt0[pp]*x137;
            double x429 = 0.5*x153;
            double x430 = -x154*x43 - x35*x429;
            double x431 = x328 + x387;
            double x432 = x142*x358 + x242;
            double x433 = x255 + x406;
            double x434 = x306*x69;
            double x435 = x274 + x379;
            double x436 = x253*x89;
            double x437 = -x157*x35 - x429*x43;
            double x438 = 0.25*x137*x63 + x422;
            double x439 = 0.25*x150 - 0.25*x151 - 0.25*x152;
            double x440 = x439*x67;
            double x441 = 0.5*grad_2_gt0[pp]*x154 + x153*x306;
            double x442 = x285*x69;
            double x443 = 0.5*grad_0_gt0[pp]*x80;
            double x444 = x235*x69 + x443;
            double x445 = 0.5*grad_2_gt3[pp]*x157 + x439*x63;
            double x446 = x138*x144;
            double x447 = x263*(-grad_1_gt0[pp]*x15 - x12*x67 + x136) + x446;
            double x448 = x240*x69;
            double x449 = 0.25*grad_2_gt3[pp]*x153 + x154*x358;
            double x450 = -x142*x75;
            double x451 = x21*x347;
            double x452 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x350 + 1.0*grad2_0_2_gt1[pp]*x10*x111 + 2.0*grad2_1_1_gt1[pp]*x10*x17 + grad2_1_2_gt1[pp]*x349 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x177*x52 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x395 + 2.0*grad_1_gt1[pp]*x173*x52 + 2.0*grad_2_gt1[pp]*x175*x52 + 1.0*gt1[pp]*x10*x229*x24 - x132*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x47*(grad_0_gt3[pp]*x220 + grad_1_gt0[pp]*x23 + x20*x67) + 0.5*grad_1_chi[pp]*x47*(grad_1_gt0[pp]*x220 + x136 + x48*x67) + 0.5*grad_2_chi[pp]*x47*(grad_0_gt3[pp]*x48 + grad_1_gt0[pp]*x20 + x21*x67));
            double x453 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x230*x24 + 2.0*x150 - 2.0*x151 - 2.0*x152) + x355*(1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x12*x67 - x136*x46 + x50*(1.0*gt1[pp]*x231*x47 + x397)) + x398*(1.0*grad_0_gt3[pp]*x10*x15 - x46*x66 - x46*x68 + x50*(1.0*gt1[pp]*x270*x47 + x352));
            double x454 = 0.25*grad_0_gt3[pp]*x137;
            At_rhs22[pp] = 2*At2[pp]*grad_2_beta0[pp] + 2*At4[pp]*grad_2_beta1[pp] - 0.66666666666666663*At5[pp]*grad_1_beta1[pp] + 4.0*At5[pp]*grad_2_beta2[pp]*x0 + agrad_0_At5[pp]*beta0[pp] + agrad_1_At5[pp]*beta1[pp] + agrad_2_At5[pp]*beta2[pp] - alpha[pp]*(2.0*At2[pp]*x10*(-At2[pp]*x23 + At4[pp]*x15 - At5[pp]*x20) + 2.0*At4[pp]*x10*(At2[pp]*x15 - At4[pp]*x17 + At5[pp]*x12) - At5[pp]*K[pp] + 2.0*At5[pp]*x10*(-At2[pp]*x20 + At4[pp]*x12 + x1*x21)) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(3.0*grad_0_gt5[pp]*x23*x52*x57 - grad_0_gt5[pp]*x90*(-1.0*x12*x64 - 1.0*x15*x69 + x17*x80 + x20*x60 + x21*x70 + x23*x89) + 3.0*grad_1_gt5[pp]*x100*x17*x52 - grad_1_gt5[pp]*x90*(x115*x20 - 1.0*x12*x135 - 1.0*x137*x15 + x142*x17 + x145 + x21*x36) + 6.0*grad_2_gt5[pp]*x104*x21*x52 - grad_2_gt5[pp]*x90*(-1.0*x12*x149 + x131*x21 + x147*x20 - 1.0*x15*x153 + x154*x17 + x157*x23) - gt5[pp]*x10*x50*(2.0*grad_0_chi[pp]*x10*x177 + 2.0*grad_1_chi[pp]*x10*x173 + 2.0*grad_2_chi[pp]*x10*x175 + x161 + x163 + x165 - x166*x168 + x169*x170 - x171) + x107*(grad_2_gt5[pp]*x57 + x106) + x110*x128*x129*x52 + x111*x52*(0.25*grad_2_gt5[pp]*x57 + 1.0*x106) + x111*x52*(x113*x115 - 1.0*x116) - x119*(x110*x92 + x44*(-x117 + x118)) + x121*x185 - x125*(0.25*grad_1_gt5[pp]*x57 + x100*x28) - x125*(0.5*grad_1_gt5[pp]*x57 + x100*x91) - x125*(x110*x123 + x121*x122) - x125*(x110*x126 + x87*(1.0*x23*x63 - 1.0*x61 + 1.0*x62)) - x132*(1.0*grad_0_chi[pp]*x10*x70 + 1.0*grad_1_chi[pp]*x10*x36 + 1.0*grad_2_chi[pp]*x10*x131 + x130) - x179*(x101 + x105) - x179*(grad_0_gt5[pp]*x121 + x44*x63) + x186*x36*x52*(x187 + x34) + x186*x52*x70*(x29 + x42) + 2.0*x20*x52*(grad_0_gt5[pp]*x110 + grad_2_gt0[pp]*x44) + x202 - x95*(0.25*x101 + 1.0*x105) - x95*(x64*x92 - 1.0*x93)) - 12*grad2_2_2_alpha[pp] - 12.0*grad_0_alpha[pp]*x10*(-0.5*gt5[pp]*x24*x38 + x44) + 12.0*grad_1_alpha[pp]*x10*x37 - 12*grad_2_alpha[pp]*(0.5*grad_2_gt5[pp]*x10*x21 + 1.0*x10*x12*x35 - x45*x46 - x51) + 1.0*gt5[pp]*x10*(-x12*(alpha[pp]*(-x119*(x212 + x325) - x119*(x315 + x324) - x119*(x316 + x402) + 2.0*x12*x52*(grad_1_gt5[pp]*x142 + x233) + x125*(x250 + x335) + x125*(x250 + x404) + x125*(x260 + x331) + x125*(x241 + x242 + x332) + x125*(x326 + x328 + x403) + x125*(x389 + x405 + x406) - x184*(1.0*x249 + x338) - x184*(0.5*x254 + x337) - x184*(x142*x77 + x248 + x336) - x194*(x274 + x297) - x194*(x153*x28 + x400) - x227*(0.5*x223 + x294) + x291*(x205 + x293) + x291*(0.5*grad_2_gt3[pp]*x36 + x196 + x292) - x348*(x298 + x414) + x351 - x410*(x407 + x409) - x410*(x411 + x413) + x415*(x311 + x314 + x416) + x95*(x304 + x307) + x95*(x305 - x43*x80) + x95*(x309 + x401) + x95*(x131*x77 + x308 + x401) + x95*(x142*x221 + x300 + x301)) + x356) - x12*(alpha[pp]*(-x119*(x213 + x315) - x119*(x215 + x316) - x119*(x310 + x312) - x119*(x312 + x314) - x119*(x317 + x319) - x119*(x322 + x325) + 2.0*x12*x52*(grad_2_gt3[pp]*x131 + x216) + x125*(x326 + x329) + x125*(x329 + x332) + x125*(x330 + x331) + x125*(x333 + x335) - x184*(x264 + x337) - x184*(0.5*grad_1_gt3[pp]*x135 + x336) - x184*(x154*x32 + x265 + x338) - x194*(x273 + x297) - x194*(0.5*grad_0_gt3[pp]*x115 + x299) - x227*(0.5*x224 + x293) - x227*(x131*x32 + x203 + x294) + x245*(x257 + x340) + x245*(x341 + x343) + x291*(1.0*x201 + x292) - x348*(x279 + x346) + x351 + x95*(x300 + x302) + x95*(x304 + x305) + x95*(x131*x78 + x309) + x95*(x142*x32 + x302) + x95*(x269*x70 + x307)) + x356) - x15*(alpha[pp]*(-x119*(x280 + x437) - x119*(x295 + x419) - x119*(x400 + x420) - x119*(x418 + x436) + x125*(x440 + x445) + x125*(x447 + x454) + x125*(x157*x78 + x441) + x125*(0.5*grad_1_gt0[pp]*x142 + x446 + x454) + x125*(x269*x89 + x442 + x443) + 2.0*x15*x52*(grad_0_gt3[pp]*x89 + grad_1_gt0[pp]*x69) + x178*(x259 + x343) + x178*(x340 + x393) - x184*(x262 + x449) - x184*(0.5*grad_1_gt3[pp]*x137 + x450) - x184*(0.5*grad_1_gt0[pp]*x80 + x267 + x448) - x194*(0.5*x284 + x427) - x194*(0.5*grad_1_gt0[pp]*x89 + x282 + x426) + x291*(x213 + x425) + x291*(0.5*grad_2_gt3[pp]*x115 + x368) + x415*(x272 + x423) + x415*(x272 + x438) + x424*(1.0*x276 + x428) - x451*(x214 + x409) + x452 + x95*(x242 + x431) + x95*(x328 + x432) + x95*(x333 + x430) + x95*(x330 + x406 + x434)) + x453) + x17*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x191 + 1.0*grad2_0_2_gt3[pp]*x10*x111 + 2.0*grad2_1_1_gt3[pp]*x10*x17 - grad2_1_2_gt3[pp]*x190 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 2.0*grad_0_gt3[pp]*x177*x52 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x172*x222 + 2.0*grad_1_gt3[pp]*x173*x52 + 2.0*grad_2_gt3[pp]*x175*x52 + 1.0*gt3[pp]*x10*x229*x24 - x119*(x260 + x64*x84) - x119*(0.5*grad_2_gt3[pp]*x137 + x241) - x119*(x135*x73 + x242) - x119*(x149*x253 + x250) - x119*(-1.0*x153*x35 + x258) - x119*(x253*x69 + x255) + 2.0*x12*x52*(grad_0_gt3[pp]*x64 + x254) + 2.0*x12*x52*(grad_1_gt3[pp]*x135 + x243) + 2.0*x12*x52*(grad_2_gt3[pp]*x149 + x249) + x124*x52*(x267 + 2*x80*x84) + x124*x52*(x154*x54 + x262) + x125*(1.0*x244 + x247) - x132*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x47*(grad_1_gt3[pp]*x268 + x23*x269 + x79) + 1.0*grad_1_chi[pp]*x47*(x139 + x220*x269 + x48*x78) + 1.0*grad_2_chi[pp]*x47*(grad_1_gt3[pp]*x219 + x20*x269 + x21*x78)) - x149*x227*(-x112 + x33) + 2.0*x15*x52*(grad_0_gt3[pp]*x69 + grad_1_gt0[pp]*x80) - x153*x194*(x192 + x238) - x154*x184*(x76 + x77) - x158*x188 - x184*x80*(x73 + x74) - x194*x69*(x236 + x82) - x226*x232 - x227*x64*(x180 + x237 + x239) - x233*x234 + x246*(grad_1_gt3[pp]*x137 + x244) + x246*(grad_2_gt3[pp]*x153 + x256) + x52*x94*(x264 + x54*x80) + x52*x94*(-2*x154*x35 + x265) + x95*(1.0*x243 + x248)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x24*x38 + x80) + 4*grad_1_alpha[pp]*(1.0*x10*x12*x78 + 1.0*x10*x140 - x141*x46 + x50*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x231*x47)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x230*x24 + x154)) + x20*(alpha[pp]*(-x107*(grad_0_gt5[pp]*x89 + grad_2_gt0[pp]*x60) - x119*(x378 + x417) - x119*(0.5*grad_2_gt0[pp]*x131 + x377 + x417) - x119*(x31*x89 + x371 + x372) + x125*(x275 + x386) + x125*(x275 + x420) + x125*(x278 + x383) + x125*(x296 + x419) + x125*(x299 + x423) + x125*(x381 + x418) + x178*(x214 + x407 + x408) + x178*(x367 + x411 + x412) - x184*(x242 + x388) - x184*(0.5*grad_1_gt5[pp]*x153 + x421) - x194*(1.0*x281 + x363) - x194*(0.5*grad_2_gt0[pp]*x89 + x283 + x362) - x227*(0.5*grad_2_gt0[pp]*x70 + x210 + x357) + x291*(x208 + x359) + x291*(0.5*grad_2_gt5[pp]*x147 + x360) - x394*(x259 + x341 + x342) + x396 + x415*(x374 + x376) + x415*(x144*x221 + x375) + x424*(x144*x253 + x361) + x95*(x213 + x370) + x95*(x324 + x365) + x95*(x364 + x416) + x95*(x366 + x402)) + x399) + x20*(alpha[pp]*(-x107*(grad_2_gt0[pp]*x131 + x225) - x119*(x371 + x373) - x119*(x374 + x375) - x119*(x131*x87 + x378) - x119*(x28*x89 + x373) - x119*(x36*x84 + x376) + x125*(x296 + x380) + x125*(x380 + x381) + x125*(x382 + x383) + x125*(x384 + x386) - x184*(x241 + x388) - x184*(0.5*grad_1_gt0[pp]*x64 + x389) - x194*(x286 + x361) - x194*(0.5*grad_0_gt0[pp]*x60 + x362) - x194*(x157*x28 + x290 + x363) - x227*(x253*x36 + x359) - x227*(x131*x28 + x207 + x360) + x245*(x279 + x344 + x390) + x245*(x298 + x391 + x392) + x291*(1.0*grad_2_gt0[pp]*x70 + x357) - x394*(x257 + x339 + x393) + x396 + x95*(x199 + x364) + x95*(x211 + x319) + x95*(x211 + x366) + x95*(x212 + x365) + x95*(x322 + x370) + x95*(x310 + x311 + x368)) + x399) + x21*(alpha[pp]*(2.0*grad_0_gt5[pp]*x177*x52 + 2.0*grad_1_gt5[pp]*x173*x52 - grad_2_gt5[pp]*x174*x222 + 2.0*grad_2_gt5[pp]*x175*x52 + 1.0*gt5[pp]*x10*x229*x24 - x107*(grad_0_gt5[pp]*x60 + grad_2_gt0[pp]*x70) - x107*(grad_2_gt5[pp]*x147 + x206) - x119*(x116 + x208) - x119*(1.0*x206 + x207) - x119*(x210 + x70*(x117 - x118)) + 2.0*x12*x52*(x204 + x223) + 2.0*x12*x52*(grad_0_gt5[pp]*x64 + x224) + x124*x52*(x215 + x64*x87) + x125*(0.5*grad_1_gt5[pp]*x147 + x212) + x125*(x123*x60 + x211) + x125*(x149*x28 + x213) - x128*x194*x60 - x132*(1.0*grad_0_chi[pp]*x47*(x220*x221 + x23*x31 + x40) + 1.0*grad_1_chi[pp]*x47*(grad_2_gt5[pp]*x219 + x17*x221 + x220*x31) + 1.0*grad_2_chi[pp]*x47*(x102 + x20*x31 + x221*x48) + x130) - x185*x64 + x202 - x216*x218 - x225*x226 - x227*x36*(x32 + x33) - x227*x70*(x28 + x30) + x52*x94*(x205 + x93) + x95*(x203 + 1.0*x204)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x24*x38 + x70) + 4.0*grad_1_alpha[pp]*x10*x37 + 4*grad_2_alpha[pp]*(-x10*x102 + 1.0*x10*x20*x43 - x103*x46 + x51)) + x220*(alpha[pp]*(-x119*(x295 + x435) - x119*(x382 + x438) - x119*(x384 + x437) - x119*(x435 + x436) + x125*(x440 + x441) + x125*(x442 + x444) + x125*(x444 + x73*x89) + x125*(x142*x84 + x447) + x125*(x154*x87 + x445) - x184*(0.5*x256 + x449) - x184*(1.0*grad_1_gt0[pp]*x80 + x448) - x184*(x142*x73 + x247 + x450) - x194*(x289 + x427) - x194*(0.5*grad_0_gt0[pp]*x69 + x426) - x194*(x144*x73 + x287 + x428) - x227*(0.5*grad_2_gt0[pp]*x64 + x317) + x246*(grad_1_gt0[pp]*x142 + x232) + x291*(x212 + x425) - x410*(x346 + x390) - x410*(x392 + x414) - x451*(x367 + x413) + x452 + x95*(x241 + x432) + x95*(x258 + x430) + x95*(x403 + x431) + x95*(x404 + x421) + x95*(x405 + x433) + x95*(x433 + x434)) + x453) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x191 + 1.0*grad2_0_2_gt0[pp]*x10*x111 + 2.0*grad2_1_1_gt0[pp]*x10*x17 - grad2_1_2_gt0[pp]*x190 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x176*x222 + 2.0*grad_0_gt0[pp]*x177*x52 + 2.0*grad_1_gt0[pp]*x173*x52 - grad_1_gt0[pp]*x218*x69 + 2.0*grad_2_gt0[pp]*x175*x52 - grad_2_gt0[pp]*x234*x60 + 1.0*gt0[pp]*x10*x229*x24 - x107*(grad_0_gt0[pp]*x60 + grad_2_gt0[pp]*x89) - x107*(grad_1_gt0[pp]*x115 + x144*x54) - x107*(grad_2_gt0[pp]*x147 + x281) - x115*x227*(x193 + x239 + x271) - x119*(1.0*grad_2_gt0[pp]*x89 + x283) - x119*(x144*x63 + x286) - x119*(x157*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp]) + x290) + x124*x52*(-2*x144*x75 + x287) + x124*x52*(x157*x63 + x289) + x125*(1.0*grad_1_gt0[pp]*x89 + x282) - x132*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x47*(0.5*grad_0_gt0[pp]*x23 + x20*x87 + x220*x84) + 1.0*grad_1_chi[pp]*x47*(grad_0_gt0[pp]*x268 + x143 + x48*x87) + 1.0*grad_2_chi[pp]*x47*(x155 + x156 + x48*x84)) - x137*x184*(-x240 + x74) - x144*x194*(x82 + x83) - x147*x227*(x30 - x91) - x153*x184*(x181 + x182 + x271) - x157*x194*(x85 + x86) - x162*x188 + x246*(grad_0_gt0[pp]*x69 + grad_1_gt0[pp]*x89) + x246*(grad_1_gt0[pp]*x137 + x276) + x246*(grad_2_gt0[pp]*x153 + x284) + x95*(0.5*grad_1_gt0[pp]*x60 + x274) + x95*(0.5*grad_2_gt0[pp]*x69 + x273) + x95*(-1.0*x115*x75 + x278) + x95*(0.5*x137*x63 + x272) + x95*(0.5*x147*x63 + x275) + x95*(-1.0*x153*x43 + x280)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x15*x84 - x10*x81 - x46*x88 + x50*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x270*x47)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x24*x25 + x144) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x230*x24 + x157)))) + 2.0*grad_0_beta0[pp]*x0*x1;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At1[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt3[pp];
            double x6 = gt5[pp]*x5;
            double x7 = gt2[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt1[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x14 - x7;
            double x16 = gt0[pp]*gt5[pp];
            double x17 = x16 - x4;
            double x18 = gt1[pp]*gt4[pp];
            double x19 = gt2[pp]*gt3[pp];
            double x20 = x18 - x19;
            double x21 = -x3 + x5;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = -grad_2_gt1[pp];
            double x25 = grad_0_gt4[pp] + grad_1_gt2[pp] + x24;
            double x26 = 1.0/chi[pp];
            double x27 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x21;
            double x28 = 1.0*x10;
            double x29 = -grad_0_chi[pp];
            double x30 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x17 + grad_2_chi[pp]*x13;
            double x31 = 1.0*x26;
            double x32 = grad_0_gt3[pp]*x17;
            double x33 = 1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x13*x25 - x28*x32;
            double x34 = grad_0_gt3[pp]*x15;
            double x35 = -grad_1_chi[pp];
            double x36 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x37 = -x14 + x7;
            double x38 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x37 + grad_2_chi[pp]*x20;
            double x39 = x31*(1.0*gt1[pp]*x36*x38 + x35);
            double x40 = grad_2_gt3[pp]*x15;
            double x41 = grad_1_gt5[pp]*x20;
            double x42 = -grad_0_gt4[pp] + grad_1_gt2[pp];
            double x43 = grad_2_gt1[pp] + x42;
            double x44 = x23*x43 + x41;
            double x45 = -x40 + x44;
            double x46 = grad_2_gt0[pp]*x23;
            double x47 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x48 = grad_0_gt5[pp]*x20;
            double x49 = -x15*x47 + x48;
            double x50 = x46 + x49;
            double x51 = pow(x9, -2);
            double x52 = x21*x51;
            double x53 = -4*x3 + 4*x5;
            double x54 = grad_2_gt0[pp]*x20;
            double x55 = grad_0_gt5[pp]*x21;
            double x56 = x13*x47 - x54 - x55;
            double x57 = 0.25*grad_1_gt5[pp];
            double x58 = (-0.5)*grad_2_gt4[pp] + x57;
            double x59 = 0.25*grad_0_gt5[pp];
            double x60 = -0.5*grad_2_gt2[pp] + x59;
            double x61 = grad_2_gt3[pp]*x13;
            double x62 = grad_1_gt5[pp]*x21;
            double x63 = x20*x43;
            double x64 = x61 - x62 - x63;
            double x65 = grad_0_gt3[pp]*x13;
            double x66 = grad_1_gt0[pp]*x20;
            double x67 = x21*x25;
            double x68 = x65 - x66 - x67;
            double x69 = 0.5*grad_2_gt5[pp]*x21;
            double x70 = 0.5*grad_0_gt5[pp];
            double x71 = 1.0*grad_2_gt2[pp];
            double x72 = x70 - x71;
            double x73 = 0.5*grad_1_gt5[pp];
            double x74 = 1.0*grad_2_gt4[pp];
            double x75 = x73 - x74;
            double x76 = x13*x75;
            double x77 = x20*x72 - x69 - x76;
            double x78 = 0.5*x12;
            double x79 = 0.5*x11 - x78;
            double x80 = 0.5*grad_0_gt3[pp];
            double x81 = 1.0*grad_1_gt1[pp];
            double x82 = x80 - x81;
            double x83 = 1.0*grad_1_gt4[pp];
            double x84 = 0.5*grad_2_gt3[pp];
            double x85 = x83 - x84;
            double x86 = grad_1_gt3[pp]*x79 + x20*x82 - x21*x85;
            double x87 = 0.5*x18 - 0.5*x19;
            double x88 = grad_0_gt0[pp]*x87;
            double x89 = 1.0*grad_0_gt1[pp];
            double x90 = 0.5*grad_1_gt0[pp];
            double x91 = x89 - x90;
            double x92 = 1.0*grad_0_gt2[pp];
            double x93 = 0.5*grad_2_gt0[pp];
            double x94 = x92 - x93;
            double x95 = x21*x94;
            double x96 = x13*x91 - x88 - x95;
            double x97 = 2.0*x51;
            double x98 = -x34;
            double x99 = grad_1_gt0[pp]*x23 + x20*x25;
            double x100 = x98 + x99;
            double x101 = 0.5*grad_0_gt0[pp]*x23 + x20*x94;
            double x102 = x101 - x15*x91;
            double x103 = x51*(-4*x2 + 4*x22);
            double x104 = grad_1_gt0[pp]*x20 + x21*x25;
            double x105 = x104 - x65;
            double x106 = x88 + x95;
            double x107 = x106 - x13*x91;
            double x108 = 0.5*x25;
            double x109 = 0.5*grad_0_gt4[pp];
            double x110 = 0.5*grad_2_gt1[pp];
            double x111 = (-0.5)*grad_1_gt2[pp] + x109 + x110;
            double x112 = x15*x51;
            double x113 = 2.0*x112;
            double x114 = 0.5*grad_1_gt2[pp];
            double x115 = 0.5*grad_1_gt3[pp];
            double x116 = x115*x17;
            double x117 = x15*x82;
            double x118 = x13*x85;
            double x119 = x116 + x117 - x118;
            double x120 = grad_1_gt0[pp]*x15 + x13*x25 - x32;
            double x121 = 0.25*grad_2_gt3[pp]*x120;
            double x122 = x17*x47;
            double x123 = 0.25*grad_2_gt0[pp]*x15 - 0.25*x122 + x13*x59;
            double x124 = grad_1_gt3[pp]*x123;
            double x125 = x121 + x124;
            double x126 = 4*x11 - 4*x12;
            double x127 = x126*x51;
            double x128 = -0.25*grad_2_gt3[pp];
            double x129 = 0.5*grad_1_gt4[pp] + x128;
            double x130 = x72*x86;
            double x131 = 0.25*grad_0_gt3[pp];
            double x132 = -0.5*grad_1_gt1[pp] + x131;
            double x133 = 0.25*grad_0_gt4[pp];
            double x134 = 0.25*grad_2_gt1[pp];
            double x135 = 0.25*grad_1_gt2[pp];
            double x136 = -x135;
            double x137 = x134 + x136;
            double x138 = x133 + x137;
            double x139 = 0.5*x7;
            double x140 = -x139 + 0.5*x14;
            double x141 = x20*x85;
            double x142 = grad_1_gt3[pp]*x140 - x141 + x23*x82;
            double x143 = 0.5*grad_2_gt0[pp]*x142;
            double x144 = 4*x18 - 4*x19;
            double x145 = 0.5*grad_0_gt1[pp];
            double x146 = 0.25*grad_1_gt0[pp];
            double x147 = -x146;
            double x148 = x145 + x147;
            double x149 = (-0.5)*grad_0_gt4[pp] + x110 + x114;
            double x150 = x25*x56;
            double x151 = 0.25*x150;
            double x152 = 0.5*x68;
            double x153 = x152*x72;
            double x154 = x20*x43;
            double x155 = -x61 + x62;
            double x156 = x154 + x155;
            double x157 = 0.25*grad_2_gt0[pp];
            double x158 = grad_2_gt0[pp]*x20;
            double x159 = -x13*x47 + x55;
            double x160 = x158 + x159;
            double x161 = x17*x91;
            double x162 = grad_0_gt0[pp]*x140 + x13*x94 - x161;
            double x163 = x115*x162;
            double x164 = 0.25*grad_0_gt3[pp]*x120 + x163;
            double x165 = 4*x14 - 4*x7;
            double x166 = x165*x51;
            double x167 = -0.25*grad_0_gt3[pp]*x13 + 0.25*grad_1_gt0[pp]*x20 + 0.25*x21*x25;
            double x168 = 0.5*grad_2_gt0[pp]*x86;
            double x169 = 0.5*grad_0_gt0[pp]*x142;
            double x170 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x15 - x122;
            double x171 = grad_1_gt5[pp]*x13;
            double x172 = grad_2_gt3[pp]*x17;
            double x173 = x15*x43 + x171 - x172;
            double x174 = -x70 + x71;
            double x175 = grad_2_gt5[pp]*x79 + x15*x174 + x17*x75;
            double x176 = -x116;
            double x177 = -x117 + x118 + x176;
            double x178 = x162*x23;
            double x179 = -grad2_0_1_chi[pp];
            double x180 = grad_1_gt0[pp]*x23;
            double x181 = x20*x25;
            double x182 = -x180 - x181 + x34;
            double x183 = 2.0*x26;
            double x184 = grad_2_gt0[pp]*x23;
            double x185 = x15*x47 - x184 - x48;
            double x186 = -x23*x43 + x40 - x41;
            double x187 = grad_2_gt5[pp]*x87;
            double x188 = -x15*x75 - x187 + x23*x72;
            double x189 = 0.5*grad_0_gt0[pp]*x23;
            double x190 = x20*x94;
            double x191 = x15*x91 - x189 - x190;
            double x192 = pow(grad_1_chi[pp], 2);
            double x193 = 3.0*x26;
            double x194 = -x193;
            double x195 = x17*(2*grad2_1_1_chi[pp] + x192*x194);
            double x196 = pow(grad_0_chi[pp], 2);
            double x197 = x23*(2*grad2_0_0_chi[pp] - 3.0*x196*x26);
            double x198 = pow(grad_2_chi[pp], 2);
            double x199 = x21*(2*grad2_2_2_chi[pp] - x193*x198);
            double x200 = 2*x14 - x8;
            double x201 = grad_0_chi[pp]*x193;
            double x202 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x201;
            double x203 = 2*x18 - 2*x19;
            double x204 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x201;
            double x205 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x194)*(2*x11 - 2*x12);
            double x206 = x17*x177;
            double x207 = x120*x15 + x13*x173 - 1.0*x170*x20 - x175*x21 - x178 - x206;
            double x208 = x21*x77;
            double x209 = x13*x64 + x15*x68 - x17*x86 - 1.0*x20*x56 - x208 - x23*x96;
            double x210 = x191*x23;
            double x211 = x13*x186 - x142*x17 + x15*x182 - 1.0*x185*x20 - x188*x21 - x210;
            double x212 = x177*x82;
            double x213 = x51*(4*x16 - 4*x4);
            double x214 = -x131;
            double x215 = 0.5*grad_1_gt0[pp]*x142;
            double x216 = x65 - x66 - x67;
            double x217 = x149*x86;
            double x218 = x13*x51;
            double x219 = 1.0*x218;
            double x220 = -x103;
            double x221 = 0.25*grad_1_gt0[pp]*x120;
            double x222 = grad_0_gt3[pp]*x162;
            double x223 = x51*x53;
            double x224 = -x223;
            double x225 = x173*x43;
            double x226 = 0.25*x225;
            double x227 = -x15*x43 - x171 + x172;
            double x228 = x132*x227;
            double x229 = x144*x51;
            double x230 = -x229;
            double x231 = x146*x173;
            double x232 = 0.25*grad_0_gt3[pp]*x170;
            double x233 = x162*x84;
            double x234 = x232 + x233;
            double x235 = x132*(-grad_1_gt0[pp]*x15 - x13*x25 + x32);
            double x236 = 0.25*x120*x43;
            double x237 = pow(chi[pp], -2);
            double x238 = -grad_0_chi[pp]*x237;
            double x239 = 4.0*x10;
            double x240 = x13*x239;
            double x241 = -x240;
            double x242 = x15*x239;
            double x243 = -x242;
            double x244 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x243 + 1.0*grad2_0_2_gt1[pp]*x10*x144 + 2.0*grad2_1_1_gt1[pp]*x10*x17 + grad2_1_2_gt1[pp]*x241 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x238;
            double x245 = x127*(x125 + x228) + x166*(x164 + x235) + x220*(x221 + 1.0*x222) + x224*(0.5*grad_2_gt3[pp]*x170 + x226) + x230*(x231 + x234) + x230*(x234 + x236) + x244;
            double x246 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x20;
            double x247 = -x11 + x12;
            double x248 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x247 + grad_2_chi[pp]*x21;
            double x249 = grad_0_gt5[pp]*x56;
            double x250 = 3.0*x51;
            double x251 = x23*x250;
            double x252 = grad_1_gt5[pp]*x64;
            double x253 = x17*x250;
            double x254 = 6.0*x51;
            double x255 = -x157;
            double x256 = 0.75*grad_0_gt4[pp];
            double x257 = -x134;
            double x258 = 0.75*grad_1_gt2[pp];
            double x259 = x59*x64;
            double x260 = 0.25*grad_1_gt5[pp]*x56;
            double x261 = grad_2_gt3[pp]*x175;
            double x262 = 0.25*grad_2_gt3[pp]*x170;
            double x263 = grad_2_gt5[pp]*x64;
            double x264 = grad_1_gt5[pp]*x77;
            double x265 = grad_0_gt5[pp]*x77;
            double x266 = x20*x97;
            double x267 = 0.25*grad_2_gt5[pp]*x64;
            double x268 = 0.25*grad_2_gt5[pp]*x56;
            double x269 = x157*x186;
            double x270 = x173*x47;
            double x271 = 0.25*x270;
            double x272 = x188*x43;
            double x273 = x185*x43;
            double x274 = 0.25*x273;
            double x275 = -x170*x58;
            double x276 = x227*x58;
            double x277 = -x186*x60;
            double x278 = x184 + x49;
            double x279 = x278*x60;
            double x280 = (-0.5)*gt0[pp]*gt4[pp] + x78;
            double x281 = -x73 + x74;
            double x282 = 2.0*x10;
            double x283 = -grad_0_chi[pp]*x211*x282 - grad_1_chi[pp]*x207*x282 - 2.0*grad_2_chi[pp]*x10*x209 - x195 - x197 - x199 + x200*x202 - x203*x204 + x205;
            double x284 = grad_0_chi[pp]*x37 + grad_1_chi[pp]*x17 + grad_2_chi[pp]*x247;
            double x285 = grad_0_gt3[pp]*x120;
            double x286 = grad_2_gt3[pp]*x173;
            double x287 = 3.0*x52;
            double x288 = 0.75*grad_2_gt1[pp];
            double x289 = x131*x173;
            double x290 = grad_2_gt3[pp]*x177;
            double x291 = grad_0_gt3[pp]*x177;
            double x292 = 0.25*grad_1_gt3[pp]*x120;
            double x293 = 0.25*grad_1_gt3[pp]*x173;
            double x294 = grad_1_gt5[pp]*x86;
            double x295 = 0.25*grad_1_gt5[pp]*x68;
            double x296 = x142*x43;
            double x297 = x146*x186;
            double x298 = x25*x86;
            double x299 = x25*x64;
            double x300 = 0.25*x299;
            double x301 = x182*x43;
            double x302 = 0.25*x301;
            double x303 = x129*x68;
            double x304 = -x132*x186;
            double x305 = x129*x64;
            double x306 = x180 + x181 + x98;
            double x307 = x132*x306;
            double x308 = (-0.5)*gt1[pp]*gt5[pp] + x139;
            double x309 = -x80 + x81;
            double x310 = -x133;
            double x311 = x146*x185;
            double x312 = x157*x182;
            double x313 = x59*x68;
            double x314 = x120*x47;
            double x315 = 0.25*x314;
            double x316 = grad_0_gt5[pp]*x96;
            double x317 = 0.25*grad_0_gt0[pp]*x182;
            double x318 = 0.25*grad_0_gt0[pp]*x185;
            double x319 = x25*x96;
            double x320 = x148*x170;
            double x321 = x120*x148;
            double x322 = 0.5*grad_0_gt2[pp] + x255;
            double x323 = x322*x68;
            double x324 = x322*x56;
            double x325 = 0.25*grad_1_gt5[pp]*x173;
            double x326 = x111*x188 + x186*x59;
            double x327 = -x75*x77;
            double x328 = x148*x185;
            double x329 = x182*x322;
            double x330 = x328 + x329;
            double x331 = x120*x25;
            double x332 = 0.25*x331;
            double x333 = x129*x173;
            double x334 = 0.5*grad_1_gt3[pp]*x175;
            double x335 = 0.25*grad_2_gt3[pp]*x173 + x334;
            double x336 = -0.25*x23*x43 + 0.25*x40 - 0.25*x41;
            double x337 = x336*x43;
            double x338 = x188*x80 + x25*x336;
            double x339 = x138*x186 + x142*x70;
            double x340 = 0.5*grad_2_gt5[pp]*x86;
            double x341 = x340 + x58*(x155 + x63);
            double x342 = 0.25*grad_1_gt5[pp]*x120;
            double x343 = x175*x80;
            double x344 = x262 + x343;
            double x345 = 0.25*x25;
            double x346 = x173*x345;
            double x347 = x111*x77 + x259;
            double x348 = x186*x322 + x188*x91;
            double x349 = x138*x185;
            double x350 = 0.5*grad_1_gt0[pp]*x188;
            double x351 = x182*x59 + x350;
            double x352 = (-0.5)*grad_2_gt1[pp] + x109 + x114;
            double x353 = x352*x77;
            double x354 = -x56*x58;
            double x355 = 0.25*grad_2_gt5[pp]*x68;
            double x356 = x354 + x355;
            double x357 = x120*x129;
            double x358 = x124 + x289;
            double x359 = x132*x278;
            double x360 = x142*x94 + x148*x186;
            double x361 = x177*x352;
            double x362 = x129*x56;
            double x363 = x70*x86;
            double x364 = x138*x64 + x363;
            double x365 = x177*x85;
            double x366 = x131*x186 + x142*x352;
            double x367 = 0.25*grad_2_gt3[pp]*x64;
            double x368 = grad_1_gt5[pp]*x68;
            double x369 = grad_2_gt3[pp]*x56 + x368;
            double x370 = x182*x25;
            double x371 = grad_1_gt0[pp]*x186;
            double x372 = grad_0_gt3[pp]*x185 + x371;
            double x373 = grad_0_gt5[pp]*x68;
            double x374 = x47*x56;
            double x375 = x373 + x374;
            double x376 = 1.0*x51;
            double x377 = x23*x376;
            double x378 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x243 + 1.0*grad2_0_2_gt4[pp]*x10*x144 + 2.0*grad2_1_1_gt4[pp]*x10*x17 + grad2_1_2_gt4[pp]*x241 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x211*x51 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x237 + 2.0*grad_1_gt4[pp]*x207*x51 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x209*x51 + 1.0*gt4[pp]*x10*x26*x283 - x183*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x36*(grad_2_gt3[pp]*x37 + x44) + 0.5*grad_1_chi[pp]*x36*(grad_1_gt5[pp]*x247 + x172 + x37*x43) + 0.5*grad_2_chi[pp]*x36*(grad_2_gt3[pp]*x247 + x154 + x62));
            double x379 = 2.0*grad_2_alpha[pp];
            double x380 = -grad_2_chi[pp];
            double x381 = 2.0*grad_1_alpha[pp];
            double x382 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x246*x26 - 2.0*x23*x43 + 2.0*x40 - 2.0*x41) + x379*(1.0*grad_2_gt3[pp]*x10*x13 - x28*x62 - x28*x63 + x31*(1.0*gt4[pp]*x248*x36 + x35)) + x381*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x15*x43 - x172*x28 + x31*(1.0*gt4[pp]*x284*x36 + x380));
            double x383 = x185*x59;
            double x384 = 0.25*grad_1_gt5[pp]*x170 + x149*x175;
            double x385 = -x72*x77;
            double x386 = 0.25*grad_1_gt0[pp]*x170 + x162*x352;
            double x387 = x191*x94;
            double x388 = 0.25*grad_2_gt0[pp]*x56;
            double x389 = 0.5*x170*x85 - x175*x82;
            double x390 = x149*x77 + x260;
            double x391 = x185*x345 + x350;
            double x392 = -x60*x64;
            double x393 = x355 + x392;
            double x394 = x185*x322;
            double x395 = 0.5*grad_0_gt0[pp]*x188;
            double x396 = x157*x185 + x395;
            double x397 = x123*x47;
            double x398 = 0.5*grad_1_gt0[pp]*x175 + x123*x25;
            double x399 = x123*x43 + x162*x73;
            double x400 = 0.5*grad_2_gt5[pp]*x96;
            double x401 = x400 + x60*(x159 + x54);
            double x402 = 0.25*grad_0_gt0[pp]*x186;
            double x403 = x311 + x402;
            double x404 = x191*x352;
            double x405 = x148*x173;
            double x406 = x162*x85 - 0.5*x170*x82;
            double x407 = x322*x64;
            double x408 = 0.5*grad_1_gt5[pp]*x96;
            double x409 = x408 + 0.25*x43*x56;
            double x410 = x228 + x357;
            double x411 = 0.25*x370;
            double x412 = grad_2_gt0[pp]*x64;
            double x413 = grad_0_gt3[pp]*x170;
            double x414 = grad_1_gt0[pp]*x173;
            double x415 = x43*x64;
            double x416 = x17*x376;
            double x417 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x243 + 1.0*grad2_0_2_gt2[pp]*x10*x144 + 2.0*grad2_1_1_gt2[pp]*x10*x17 + grad2_1_2_gt2[pp]*x241 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x211*x51 + 2.0*grad_1_gt2[pp]*x207*x51 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x238 + 2.0*grad_2_gt2[pp]*x209*x51 + 1.0*gt2[pp]*x10*x26*x283 - x183*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x36*(x37*x47 + x46 + x48) + 0.5*grad_1_chi[pp]*x36*(grad_0_gt5[pp]*x247 + grad_2_gt0[pp]*x37 + x17*x47) + 0.5*grad_2_chi[pp]*x36*(x158 + x247*x47 + x55));
            double x418 = 2.0*grad_0_alpha[pp];
            double x419 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x26*x30 + x170) + x379*(1.0*x10*x13*x47 - x28*x54 - x28*x55 + x31*(1.0*gt2[pp]*x248*x36 + x29)) + x418*(1.0*x10*x15*x47 - x184*x28 - x28*x48 + x31*(1.0*gt2[pp]*x36*x38 + x380));
            double x420 = 0.25*x374;
            double x421 = 0.25*grad_1_gt5[pp]*x64;
            double x422 = x306*x60;
            double x423 = x111*x177 + x124;
            double x424 = x121 + x289;
            double x425 = 0.25*grad_2_gt3[pp]*x56 + x363;
            double x426 = x131*x185;
            double x427 = grad_0_gt5[pp]*x182;
            double x428 = grad_2_gt0[pp]*x186;
            double x429 = x185*x47 + x428;
            double x430 = x20*x376;
            double x431 = grad_1_gt5[pp]*x120;
            double x432 = grad_2_gt3[pp]*x170;
            double x433 = x270 + x432;
            double x434 = x314 + x413;
            double x435 = -x120*x58;
            double x436 = x56*x59;
            double x437 = x311 + x312;
            double x438 = x149*x191 + x402;
            double x439 = x157*x64 + x408;
            double x440 = 0.25*x415;
            double x441 = x354 + x392;
            double x442 = x191*x91;
            double x443 = x111*x96 + x157*x68;
            double x444 = -x130 - x152*x75;
            double x445 = x149*x177;
            double x446 = x143 + x297;
            double x447 = x138*x182;
            double x448 = x312 + x402;
            double x449 = x111*x191;
            double x450 = -x153 - x75*x96;
            double x451 = 0.25*x65 - 0.25*x66 - 0.25*x67;
            double x452 = x25*x451;
            double x453 = x138*x68 + x168;
            double x454 = x148*x182;
            double x455 = x146*x182 + x169;
            double x456 = 0.5*grad_2_gt3[pp]*x96 + x43*x451;
            double x457 = x131*x182;
            double x458 = 0.25*grad_2_gt3[pp]*x68 + x217;
            double x459 = -x212;
            double x460 = 1.0*x52;
            double x461 = 2.0*grad_0_gt1[pp]*x211*x51 + 2.0*grad_1_gt1[pp]*x207*x51 + 2.0*grad_2_gt1[pp]*x209*x51 + 1.0*gt1[pp]*x10*x26*x283 - x183*(0.5*grad_0_chi[pp]*x36*(grad_0_gt3[pp]*x37 + x99) + 0.5*grad_1_chi[pp]*x36*(grad_1_gt0[pp]*x37 + x247*x25 + x32) + 0.5*grad_2_chi[pp]*x36*(grad_0_gt3[pp]*x247 + x104) + x179);
            double x462 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x26*x27 + 2.0*x65 - 2.0*x66 - 2.0*x67) + x381*(x31*(1.0*gt1[pp]*x284*x36 + x29) + x33) + x418*(1.0*grad_0_gt3[pp]*x10*x15 - x180*x28 - x181*x28 + x39);
            At_rhs01[pp] = At0[pp]*grad_1_beta0[pp] + 1.0*At1[pp]*grad_0_beta0[pp]*x0 + 1.0*At1[pp]*grad_1_beta1[pp]*x0 - 0.66666666666666663*At1[pp]*grad_2_beta2[pp] + At2[pp]*grad_1_beta2[pp] + At3[pp]*grad_0_beta1[pp] + At4[pp]*grad_0_beta2[pp] + agrad_0_At1[pp]*beta0[pp] + agrad_1_At1[pp]*beta1[pp] + agrad_2_At1[pp]*beta2[pp] - alpha[pp]*(2.0*At0[pp]*x10*(At3[pp]*x15 - At4[pp]*x20 + x1*x23) + 2.0*At1[pp]*x10*(At1[pp]*x15 - At3[pp]*x17 + At4[pp]*x13) + 2.0*At2[pp]*x10*(-At1[pp]*x20 + At3[pp]*x13 - At4[pp]*x21) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt1[pp]*x97*(-1.0*x13*x186 + x142*x17 - 1.0*x15*x182 + x185*x20 + x188*x21 + x191*x23) - grad_1_gt1[pp]*x97*(-1.0*x120*x15 - 1.0*x13*x173 + x17*x177 + x170*x20 + x175*x21 + x178) - grad_2_gt1[pp]*x97*(-1.0*x13*x64 - 1.0*x15*x68 + x17*x86 + x20*x56 + x21*x77 + x23*x96) - gt1[pp]*x10*x31*(2.0*grad_0_chi[pp]*x10*x211 + 2.0*grad_1_chi[pp]*x10*x207 + 2.0*grad_2_chi[pp]*x10*x209 + x195 + x197 + x199 - x200*x202 + x203*x204 - x205) + x103*(0.25*grad_0_gt0[pp]*x100 + 0.5*grad_1_gt0[pp]*x102 + x102*x91) + x103*(0.25*grad_2_gt0[pp]*x105 + x107*x108 + x107*x111) - x113*(grad_0_gt3[pp]*x102 + grad_1_gt0[pp]*x100) + x127*(x119*(x109 - x110 - x114) + x125) + x127*(-x100*x138 + x132*x50 + x143) - x127*(-x129*x56 + x130 + 0.5*x68*x75) + x144*x51*(-x151 + x153 + x75*x96) + x144*x51*(0.25*grad_0_gt0[pp]*x45 + x102*x149 + x148*x50) + x144*x51*(0.25*grad_2_gt0[pp]*x100 + x102*x111 + x146*x50) + x144*x51*(x107*x73 + x138*x160 + x156*x157) + x166*(-x119*x90 + x164) + x166*(x100*(-x145 + x146) + x102*x82 + x169) - x166*(x107*x84 + x167*x25 + x167*x43) + x166*(-x107*x85 + x167*(x24 + x42) + x168) - x183*(0.5*grad_0_chi[pp]*x10*x182 + 0.5*grad_1_chi[pp]*x10*x120 + 0.5*grad_2_chi[pp]*x10*x68 + x179) + x213*(-0.5*grad_1_gt3[pp]*x120 + x212) - x213*(0.25*grad_2_gt3[pp]*x216 + x129*x216 + x217) - x213*(x100*x132 + x100*x214 + x215) - x219*(grad_0_gt3[pp]*x50 + grad_1_gt0[pp]*x45 + x100*x43) - x219*(grad_1_gt5[pp]*x105 + grad_2_gt3[pp]*x160 + x156*x43) + x245 + x51*x53*(-x56*x57 + x56*x58 + x60*x64) + x52*(grad_2_gt0[pp]*x45 + x43*x50 + x47*x50)) - 12*grad2_0_1_alpha[pp] - 6.0*grad_0_alpha[pp]*(1.0*grad_1_gt0[pp]*x10*x23 + 1.0*x10*x20*x25 - x28*x34 - x39) + 6.0*grad_1_alpha[pp]*(x31*(1.0*gt1[pp]*x10*x30 + x29) + x33) - grad_2_alpha[pp]*x28*(-6.0*grad_0_gt3[pp]*x13 + 6.0*grad_1_gt0[pp]*x20 - 6.0*gt1[pp]*x26*x27 + 6.0*x21*x25) + 1.0*gt1[pp]*x10*(-x13*(alpha[pp]*(-x103*(x311 + x330) - x103*(0.5*grad_0_gt3[pp]*x170 + x332) + x112*(x299 + x369) + x112*(x370 + x372) + x127*(x333 + x335) + x127*(x337 + x338) + x127*(x341 + x77*x85) + x127*(x177*x73 + x335) + x127*(x188*x309 + x339) + 2.0*x13*x51*(grad_2_gt3[pp]*x77 + x252) + x166*(x357 + x358) + x166*(x358 + x361) + x166*(x359 + x360) + x166*(x362 + x364) - x213*(x304 + x366) - x213*(0.5*grad_1_gt3[pp]*x173 + x365) - x213*(x305 + x367 + x73*x86) - x223*(0.5*x272 + x326) - x223*(x267 + x327 + x73*x77) + x224*(1.0*x261 + x325) - x229*(x260 + x347) - x229*(x274 + x348) - x229*(x342 + x344) - x229*(x344 + x346) - x229*(x349 + x351) - x229*(x353 + x356) - x377*(x150 + x375) + x378) + x382) - x13*(alpha[pp]*(-x103*(x312 + x330) - x103*(x420 + x68*x70) + x127*(x337 + x339) + x127*(x341 + x421) + x127*(-x142*x72 + x338) + x127*(x340 + x421 + x77*x84) + x127*(x177*x281 + x333 + x334) + 2.0*x13*x51*(grad_1_gt5[pp]*x177 + x286) + x166*(x295 + x364) + x166*(x295 + x425) + x166*(x302 + x360) + x166*(x357 + x423) + x166*(x361 + x424) + x166*(x143 + x411 + x426) - x213*(1.0*x294 + x367) - x213*(0.5*x296 + x366) - x213*(x177*x84 + x293 + x365) - x223*(0.5*x263 + x327) + x224*(x277 + x326) + x224*(0.5*grad_2_gt3[pp]*x175 + x276 + x325) - x229*(x259 + x356) - x229*(x347 + x355) - x229*(x348 + x422) + x230*(x343 + x346 + x435) - x377*(x331 + x434) + x378 - x430*(x427 + x429) - x430*(x431 + x433)) + x382) - x15*(alpha[pp]*(-x103*(0.5*x319 + x443) - x103*(0.5*grad_1_gt0[pp]*x191 + x317 + x442) + x127*(x125 + x445) + x127*(x362 + x444) + x127*(x143 + x359 + x447) + 2.0*x15*x51*(grad_0_gt3[pp]*x191 + grad_1_gt0[pp]*x182) + x166*(x452 + x456) + x166*(x453 + x85*x96) + x166*(0.5*grad_1_gt0[pp]*x177 + x164) + x166*(x169 + x191*x309 + x454) - x213*(x303 + x458) - x213*(0.5*grad_1_gt3[pp]*x120 + x459) - x213*(x215 + x307 + x457) + x218*(x301 + x372) + x218*(x369 + x415) + x224*(x260 + x441) - x229*(x151 + x450) - x229*(x328 + x438) - x229*(x420 + x439) - x229*(x437 + x449) + x245 - x460*(x273 + x429) + x461) + x462) + x17*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x242 + 1.0*grad2_0_2_gt3[pp]*x10*x144 + 2.0*grad2_1_1_gt3[pp]*x10*x17 - grad2_1_2_gt3[pp]*x240 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 2.0*grad_0_gt3[pp]*x211*x51 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x206*x254 + 2.0*grad_1_gt3[pp]*x207*x51 + 2.0*grad_2_gt3[pp]*x209*x51 + 1.0*gt3[pp]*x10*x26*x283 - x103*x182*(x147 + x89) - x103*x68*(x137 + x256) + x113*(grad_1_gt3[pp]*x120 + x291) + x113*(grad_2_gt3[pp]*x68 + x298) + x126*x51*(x305 - 2*x75*x86) + x126*x51*(x142*x47 + x304) + x127*(1.0*x290 + x293) + 2.0*x13*x51*(grad_0_gt3[pp]*x186 + x296) + 2.0*x13*x51*(grad_1_gt3[pp]*x173 + x290) + 2.0*x13*x51*(grad_2_gt3[pp]*x64 + x294) - x142*x213*(x80 + x81) + 2.0*x15*x51*(grad_0_gt3[pp]*x182 + grad_1_gt0[pp]*x142) + x165*x51*(x303 + x47*x86) + x165*x51*(2*x142*x91 + x307) + x166*(1.0*x291 + x292) - x183*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x36*(grad_1_gt3[pp]*x308 + x141 + x23*x309) + 1.0*grad_1_chi[pp]*x36*(x116 + x247*x85 + x309*x37) + 1.0*grad_2_chi[pp]*x36*(grad_1_gt3[pp]*x280 + x20*x309 + x21*x85)) - x186*x223*(x133 + x136 + x288) - x192*x237 - x213*x86*(x83 + x84) - x223*x64*(-x57 + x74) - x229*(x121 + x173*x80) - x229*(x300 - 1.0*x68*x75) - x229*(0.5*grad_2_gt3[pp]*x120 + x289) - x229*(x111*x182 + x297) - x229*(x111*x64 + x295) - x229*(x186*x91 + x302) - x251*x285 - x286*x287) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x246*x26 + x142) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x85 + 1.0*x10*x176 - x117*x28 + x31*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x284*x36)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x26*x27 + x86)) + x20*(alpha[pp]*(-x103*(1.0*x316 + x388) - x103*(0.5*grad_2_gt0[pp]*x191 + x318 + x387) + x127*(x260 + x393) + x127*(x355 + x390) + x127*(x389 + x435) + x127*(x391 + x422) + x166*(x313 + x409) + x166*(x313 + x439) + x166*(x315 + x406) + x166*(x329 + x438) + x166*(x404 + x437) + x166*(x231 + x233 + x332) - x213*(x121 + x410) - x213*(0.5*grad_1_gt5[pp]*x68 + x440) + x218*(x225 + x431 + x432) + x218*(x273 + x427 + x428) + x220*(x111*x162 + x386) - x223*(0.5*grad_2_gt0[pp]*x188 + x279 + x383) + x224*(x275 + x384) + x224*(0.5*grad_2_gt5[pp]*x56 + x385) - x229*(x401 + x436) - x229*(0.5*grad_2_gt0[pp]*x77 + x400 + x436) - x229*(x174*x191 + x394 + x395) + x230*(x397 + x399) + x230*(x162*x281 + x398) - x266*(grad_0_gt5[pp]*x191 + grad_2_gt0[pp]*x185) - x416*(x301 + x370 + x371) + x417) + x419) + x20*(alpha[pp]*(-x103*(x320 + x386) - x103*(0.5*grad_0_gt0[pp]*x185 + x387) - x103*(x324 + x388 + x70*x96) + x112*(x150 + x373 + x412) + x112*(x331 + x413 + x414) + x127*(x259 + x390) + x127*(x269 + x351) + x127*(x269 + x391) + x127*(x271 + x389) + x127*(x353 + x393) + x127*(x226 + x342 + x343) + x166*(x329 + x403) + x166*(x403 + x404) + x166*(x405 + x406) + x166*(x407 + x409) - x213*(x289 + x410) - x213*(0.5*grad_1_gt0[pp]*x186 + x411) - x223*(x111*x175 + x384) - x223*(x268 + x385 + x70*x77) + x224*(1.0*grad_2_gt0[pp]*x188 + x383) - x229*(x394 + x396) - x229*(x397 + x398) - x229*(x401 + x77*x94) - x229*(x175*x91 + x399) - x229*(x191*x70 + x396) - x266*(grad_2_gt0[pp]*x77 + x249) - x416*(x299 + x368 + x415) + x417) + x419) + x21*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x242 + 1.0*grad2_0_2_gt5[pp]*x10*x144 + 2.0*grad2_1_1_gt5[pp]*x10*x17 - grad2_1_2_gt5[pp]*x240 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 2.0*grad_0_gt5[pp]*x211*x51 + 2.0*grad_1_gt5[pp]*x207*x51 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x208*x254 + 2.0*grad_2_gt5[pp]*x209*x51 + 1.0*gt5[pp]*x10*x26*x283 - x103*x170*(x135 + x256 + x257) - x103*x185*(x255 + x92) + x126*x51*(2*x175*x85 + x276) + x126*x51*(x188*x25 + x277) + x127*(1.0*x264 + x267) + 2.0*x13*x51*(x263 + x264) + 2.0*x13*x51*(grad_0_gt5[pp]*x186 + x272) + 2.0*x13*x51*(grad_1_gt5[pp]*x173 + x261) + x165*x51*(x170*x85 + x271) + x165*x51*(x186*x94 + x274) + x166*(x260 + x64*x70) + x166*(0.5*grad_1_gt5[pp]*x56 + x259) + x166*(x108*x173 + x262) + x166*(x108*x185 + x269) - x173*x213*(x128 + x83) - x175*x223*(x73 + x74) - x183*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x36*(x174*x23 + x187 + x281*x37) + 1.0*grad_1_chi[pp]*x36*(grad_2_gt5[pp]*x280 + x17*x281 + x174*x37) + 1.0*grad_2_chi[pp]*x36*(x174*x20 + x247*x281 + x69)) - x186*x213*(x133 + x257 + x258) - x188*x223*(x70 + x71) - x198*x237 - x229*(1.0*x265 + x268) - x229*(x175*x25 + x275) - x229*(x188*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp]) + x279) - x249*x251 - x252*x253 - x266*(grad_0_gt5[pp]*x185 + grad_2_gt0[pp]*x188) - x266*(grad_1_gt5[pp]*x170 + x175*x47) - x266*(grad_2_gt5[pp]*x56 + x265)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x246*x26 + x188) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x26*x30 + x175) + 4*grad_2_alpha[pp]*(1.0*x10*x20*x72 - x10*x69 - x28*x76 + x31*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x248*x36))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x242 + 1.0*grad2_0_2_gt0[pp]*x10*x144 + 2.0*grad2_1_1_gt0[pp]*x10*x17 - grad2_1_2_gt0[pp]*x240 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x210*x254 + 2.0*grad_0_gt0[pp]*x211*x51 - grad_1_gt0[pp]*x182*x253 + 2.0*grad_1_gt0[pp]*x207*x51 - grad_2_gt0[pp]*x185*x287 + 2.0*grad_2_gt0[pp]*x209*x51 + 1.0*gt0[pp]*x10*x26*x283 - x103*x162*(x89 + x90) - x103*x96*(x92 + x93) + x113*(grad_0_gt0[pp]*x182 + grad_1_gt0[pp]*x191) + x113*(grad_1_gt0[pp]*x120 + x222) + x113*(grad_2_gt0[pp]*x68 + x319) - x120*x213*(x214 + x81) + x127*(x151 - 1.0*x68*x72) + x127*(x313 + 0.5*x43*x56) + x127*(0.5*grad_1_gt0[pp]*x185 + x312) + x127*(0.5*grad_2_gt0[pp]*x182 + x311) + x127*(0.5*x120*x43 + x232) + x127*(-1.0*x170*x82 + x315) + x165*x51*(x323 + x43*x96) + x165*x51*(-2*x162*x82 + x321) + x166*(1.0*grad_1_gt0[pp]*x191 + x317) - x170*x223*(x135 + x288 + x310) - x183*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x36*(x101 + x37*x91) + 1.0*grad_1_chi[pp]*x36*(grad_0_gt0[pp]*x308 + x161 + x247*x94) + 1.0*grad_2_chi[pp]*x36*(x106 + x247*x91)) - x196*x237 - x213*x68*(x134 + x258 + x310) - x223*x56*(-x59 + x71) - x229*(x324 + x96*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp])) - x229*(1.0*grad_2_gt0[pp]*x191 + x318) - x229*(x162*x43 + x320) - x266*(grad_0_gt0[pp]*x185 + grad_2_gt0[pp]*x191) - x266*(grad_1_gt0[pp]*x170 + x162*x47) - x266*(grad_2_gt0[pp]*x56 + x316)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x15*x91 - x10*x189 - x190*x28 + x31*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x36*x38)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x26*x30 + x162) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x26*x27 + x96)) + x37*(alpha[pp]*(-x103*(x323 + x443) - x103*(0.5*grad_0_gt0[pp]*x182 + x442) - x103*(x162*x80 + x221 + x321) + x113*(grad_1_gt0[pp]*x177 + x285) + x127*(x228 + x423) + x127*(x300 + x444) + x127*(x424 + x445) + x127*(x425 + x440) + x127*(x426 + x446) + x127*(x446 + x447) + x166*(x452 + x453) + x166*(x454 + x455) + x166*(x456 + x86*x94) + x166*(x191*x80 + x455) + x166*(x163 + x177*x91 + x235) - x213*(0.5*x298 + x458) - x213*(1.0*grad_1_gt0[pp]*x142 + x457) - x213*(x177*x80 + x292 + x459) - x223*(0.5*grad_2_gt0[pp]*x186 + x349) + x224*(x259 + x441) - x229*(x328 + x448) - x229*(x407 + x450) - x229*(x448 + x449) - x229*(x233 + x236 + x405) + x244 - x430*(x375 + x412) - x430*(x414 + x434) - x460*(x225 + x433) + x461) + x462)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = pow(gt1[pp], 2);
            double x2 = pow(gt2[pp], 2);
            double x3 = gt0[pp]*gt3[pp];
            double x4 = gt5[pp]*x3;
            double x5 = gt1[pp]*gt2[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x0 + gt3[pp]*x2 - gt4[pp]*x6 + gt5[pp]*x1 - x4;
            double x8 = 1.0/x7;
            double x9 = -x1 + x3;
            double x10 = 1.0/(-gt0[pp]*x0 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x2 - gt5[pp]*x1 + x4);
            double x11 = (-0.5)*gt0[pp]*gt4[pp] + 0.5*x5;
            double x12 = -0.5*grad_0_gt5[pp] + 1.0*grad_2_gt2[pp];
            double x13 = gt2[pp]*gt4[pp];
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x13 - x14;
            double x16 = -0.5*grad_1_gt5[pp] + 1.0*grad_2_gt4[pp];
            double x17 = gt0[pp]*gt5[pp] - x2;
            double x18 = 1.0/chi[pp];
            double x19 = gt0[pp]*gt4[pp];
            double x20 = -x19 + x5;
            double x21 = grad_0_chi[pp]*x15 + grad_1_chi[pp]*x17 + grad_2_chi[pp]*x20;
            double x22 = gt1[pp]*gt4[pp];
            double x23 = gt2[pp]*gt3[pp];
            double x24 = 0.5*x22 - 0.5*x23;
            double x25 = gt3[pp]*gt5[pp] - x0;
            double x26 = x22 - x23;
            double x27 = grad_0_chi[pp]*x25 + grad_1_chi[pp]*x15 + grad_2_chi[pp]*x26;
            double x28 = 1.0*x10;
            double x29 = grad_0_chi[pp]*x26 + grad_1_chi[pp]*x20 + grad_2_chi[pp]*x9;
            double x30 = 0.5*x10;
            double x31 = 1.0*x18;
            double x32 = (-0.5)*gt1[pp]*gt5[pp] + 0.5*x13;
            double x33 = -0.5*grad_0_gt3[pp] + 1.0*grad_1_gt1[pp];
            double x34 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x35 = 1.0*chi[pp]*x8;
            double x36 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x37 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x38 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x39 = x15*x28;
            double x40 = gt4[pp]*x28;
            double x41 = 0.5*grad_1_alpha[pp];
            double x42 = 0.5*grad_2_alpha[pp];
            double x43 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x44 = gt2[pp]*x28;
            double x45 = 0.5*grad_0_alpha[pp];
            double x46 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x47 = gt1[pp]*x28;
            double x48 = pow(x7, -2);
            double x49 = x19 - x5;
            double x50 = pow(x49, 2);
            double x51 = -x13 + x14;
            double x52 = pow(x51, 2);
            double x53 = 2*x51;
            double x54 = pow(x26, 2);
            double x55 = x26*x49;
            double x56 = x49*x9;
            double x57 = 2*At4[pp];
            double x58 = At1[pp]*x25;
            double x59 = x26*x51;
            double x60 = x51*x9;
            double x61 = At3[pp]*x17;
            K_rhs[pp] = agrad_0_K[pp]*beta0[pp] + agrad_1_K[pp]*beta1[pp] + agrad_2_K[pp]*beta2[pp] + 0.33333333333333331*alpha[pp]*(3*At0[pp]*x48*(At0[pp]*pow(x25, 2) + 2*At2[pp]*x25*x26 + At3[pp]*x52 + At5[pp]*x54 - x53*x58 - x57*x59) + 6*At1[pp]*x48*(-At0[pp]*x25*x51 + At1[pp]*x52 - At2[pp]*x25*x49 - At2[pp]*x59 + At4[pp]*x17*x26 + At4[pp]*x49*x51 - At5[pp]*x26*x49 + x17*x58 - x51*x61) + 6*At2[pp]*x48*(At0[pp]*x25*x26 - At1[pp]*x59 + At2[pp]*x25*x9 + At2[pp]*x54 + At3[pp]*x49*x51 - At4[pp]*x26*x49 - At4[pp]*x60 + At5[pp]*x26*x9 - x49*x58) + 3*At3[pp]*x48*(At0[pp]*x52 - At1[pp]*x17*x53 + 2*At2[pp]*x49*x51 + At3[pp]*pow(x17, 2) - 2*At4[pp]*x17*x49 + At5[pp]*x50) + 6*At4[pp]*x48*(-At0[pp]*x59 + At1[pp]*x17*x26 + At1[pp]*x49*x51 - At2[pp]*x55 - At2[pp]*x60 + At4[pp]*x17*x9 + At4[pp]*x50 - At5[pp]*x56 - x49*x61) + 3*At5[pp]*x48*(At0[pp]*x54 - 2*At1[pp]*x55 + 2*At2[pp]*x26*x9 + At3[pp]*x50 + At5[pp]*pow(x9, 2) - x56*x57) + pow(K[pp], 2)) - 1.0*chi[pp]*x8*x9*(-grad2_2_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(grad_2_gt5[pp]*x24 + 0.5*gt5[pp]*x18*x27 + x12*x25 + x15*x16) + 1.0*grad_1_alpha[pp]*x10*(grad_2_gt5[pp]*x11 + 0.5*gt5[pp]*x18*x21 + x12*x15 + x16*x17) + grad_2_alpha[pp]*(0.5*grad_2_gt5[pp]*x10*x9 + 1.0*x10*x16*x20 + x12*x26*x28 - x31*(1.0*grad_2_chi[pp] - gt5[pp]*x29*x30))) + 1.0*chi[pp]*x8*(-2*x13 + 2*x14)*(-grad2_0_1_alpha[pp] + 0.5*grad_2_alpha[pp]*x10*(grad_0_gt3[pp]*x20 + grad_1_gt0[pp]*x26 + 1.0*gt1[pp]*x18*x29 + x46*x9) + x41*(1.0*grad_0_gt3[pp]*x10*x17 + 1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x20*x46 - x31*(grad_0_chi[pp] - x21*x47)) + x45*(1.0*grad_0_gt3[pp]*x10*x15 + 1.0*grad_1_gt0[pp]*x10*x25 + 1.0*x10*x26*x46 - x31*(grad_1_chi[pp] - x27*x47))) + 1.0*chi[pp]*x8*(2*x19 - x6)*(-grad2_1_2_alpha[pp] + 0.5*grad_0_alpha[pp]*x10*(grad_1_gt5[pp]*x26 + grad_2_gt3[pp]*x15 + 1.0*gt4[pp]*x18*x27 + x25*x38) + x41*(1.0*grad_1_gt5[pp]*x10*x20 + 1.0*grad_2_gt3[pp]*x10*x17 - x31*(grad_2_chi[pp] - x21*x40) + x38*x39) + x42*(1.0*grad_1_gt5[pp]*x10*x9 + 1.0*grad_2_gt3[pp]*x10*x20 + 1.0*x10*x26*x38 - x31*(grad_1_chi[pp] - x29*x40))) - x17*x35*(-grad2_1_1_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(grad_1_gt3[pp]*x32 + 0.5*gt3[pp]*x18*x27 + x25*x33 + x26*x34) + grad_1_alpha[pp]*(0.5*grad_1_gt3[pp]*x10*x17 + 1.0*x10*x15*x33 + x20*x28*x34 - x31*(1.0*grad_1_chi[pp] - gt3[pp]*x21*x30)) + 1.0*grad_2_alpha[pp]*x10*(grad_1_gt3[pp]*x11 + 0.5*gt3[pp]*x18*x29 + x26*x33 + x34*x9)) - x25*x35*(-grad2_0_0_alpha[pp] + grad_0_alpha[pp]*(0.5*grad_0_gt0[pp]*x10*x25 + 1.0*x10*x15*x36 + 1.0*x10*x26*x37 - x31*(1.0*grad_0_chi[pp] - gt0[pp]*x27*x30)) + 1.0*grad_1_alpha[pp]*x10*(grad_0_gt0[pp]*x32 + 0.5*gt0[pp]*x18*x21 + x17*x36 + x20*x37) + 1.0*grad_2_alpha[pp]*x10*(grad_0_gt0[pp]*x24 + 0.5*gt0[pp]*x18*x29 + x20*x36 + x37*x9)) - x35*(2*x22 - 2*x23)*(-grad2_0_2_alpha[pp] + 0.5*grad_1_alpha[pp]*x10*(grad_0_gt5[pp]*x20 + grad_2_gt0[pp]*x15 + 1.0*gt2[pp]*x18*x21 + x17*x43) + x42*(1.0*grad_0_gt5[pp]*x10*x9 + 1.0*grad_2_gt0[pp]*x10*x26 + 1.0*x10*x20*x43 - x31*(grad_0_chi[pp] - x29*x44)) + x45*(1.0*grad_0_gt5[pp]*x10*x26 + 1.0*grad_2_gt0[pp]*x10*x25 - x31*(grad_2_chi[pp] - x27*x44) + x39*x43));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.66666666666666663*At0[pp];
            double x1 = -At0[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt3[pp]*gt5[pp];
            double x6 = gt0[pp]*x5;
            double x7 = gt1[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt2[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = gt2[pp]*gt4[pp];
            double x16 = x14 - x15;
            double x17 = gt0[pp]*gt5[pp];
            double x18 = x17 - x4;
            double x19 = gt2[pp]*gt3[pp];
            double x20 = -x19 + x7;
            double x21 = -x2 + x5;
            double x22 = gt0[pp]*gt3[pp];
            double x23 = x22 - x3;
            double x24 = 1.0/chi[pp];
            double x25 = grad_0_chi[pp]*x16 - grad_1_chi[pp]*x18 + grad_2_chi[pp]*x13;
            double x26 = 0.5*x15;
            double x27 = 0.5*x14 - x26;
            double x28 = 1.0*grad_0_gt2[pp];
            double x29 = 0.5*grad_2_gt0[pp];
            double x30 = x28 - x29;
            double x31 = 1.0*grad_0_gt1[pp];
            double x32 = 0.5*grad_1_gt0[pp];
            double x33 = x31 - x32;
            double x34 = x18*x33;
            double x35 = grad_0_gt0[pp]*x27 + x13*x30 - x34;
            double x36 = 0.5*gt0[pp]*x24*x25 + x35;
            double x37 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x23;
            double x38 = -0.5*x19 + 0.5*x7;
            double x39 = grad_0_gt0[pp]*x38;
            double x40 = x23*x30;
            double x41 = x39 + x40;
            double x42 = -x13*x33 + x41;
            double x43 = x16*x33;
            double x44 = 1.0*x10;
            double x45 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x46 = -x14 + x15;
            double x47 = grad_0_chi[pp]*x21 + grad_1_chi[pp]*x46 + grad_2_chi[pp]*x20;
            double x48 = 1.0*x24;
            double x49 = x48*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x45*x47);
            double x50 = pow(x9, -2);
            double x51 = x16*x50;
            double x52 = 2.0*x51;
            double x53 = grad_0_gt3[pp]*x16;
            double x54 = -x53;
            double x55 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x56 = grad_1_gt0[pp]*x21 + x20*x55;
            double x57 = x54 + x56;
            double x58 = 0.5*grad_0_gt0[pp]*x21 + x20*x30;
            double x59 = -x43 + x58;
            double x60 = grad_0_gt3[pp]*x13;
            double x61 = grad_1_gt0[pp]*x20 + x23*x55;
            double x62 = -x60 + x61;
            double x63 = 0.25*grad_0_gt5[pp];
            double x64 = grad_2_gt0[pp]*x20;
            double x65 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x66 = x13*x65;
            double x67 = grad_0_gt5[pp]*x23;
            double x68 = -x66 + x67;
            double x69 = x64 + x68;
            double x70 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x71 = 0.5*x70;
            double x72 = 4*x11 - 4*x12;
            double x73 = x50*x72;
            double x74 = 0.5*grad_0_gt3[pp];
            double x75 = 1.0*grad_1_gt1[pp];
            double x76 = -x75;
            double x77 = x74 + x76;
            double x78 = grad_0_gt5[pp]*x13;
            double x79 = x18*x65;
            double x80 = grad_2_gt0[pp]*x16 + x78 - x79;
            double x81 = grad_0_gt3[pp]*x18;
            double x82 = grad_1_gt0[pp]*x16 + x13*x55 - x81;
            double x83 = x65*x82;
            double x84 = 0.25*x83;
            double x85 = grad_2_gt0[pp]*x20;
            double x86 = -x85;
            double x87 = x13*x65 - x67 + x86;
            double x88 = x55*x87;
            double x89 = 0.25*x88;
            double x90 = 0.5*grad_0_gt5[pp];
            double x91 = 1.0*grad_2_gt2[pp];
            double x92 = -x91;
            double x93 = x90 + x92;
            double x94 = grad_1_gt0[pp]*x20;
            double x95 = x23*x55;
            double x96 = x60 - x94 - x95;
            double x97 = x93*x96;
            double x98 = grad_2_gt0[pp]*x21;
            double x99 = grad_0_gt5[pp]*x20;
            double x100 = -x16*x65 + x99;
            double x101 = x100 + x98;
            double x102 = 0.25*grad_1_gt0[pp];
            double x103 = 2.0*x50;
            double x104 = x103*x20;
            double x105 = -4*x19 + 4*x7;
            double x106 = 0.25*grad_2_gt0[pp];
            double x107 = -x106;
            double x108 = 0.5*grad_0_gt2[pp] + x107;
            double x109 = 2.0*grad_2_gt2[pp];
            double x110 = x105*x50;
            double x111 = 4*x14 - 4*x15;
            double x112 = x111*x50;
            double x113 = 0.25*grad_0_gt3[pp];
            double x114 = 4*x17 - 4*x4;
            double x115 = 4*x22 - 4*x3;
            double x116 = 0.25*grad_0_gt4[pp];
            double x117 = -x116;
            double x118 = 0.75*grad_1_gt2[pp];
            double x119 = 0.25*grad_2_gt1[pp];
            double x120 = x117 + x118 + x119;
            double x121 = x28 + x29;
            double x122 = -4*x2 + 4*x5;
            double x123 = -grad2_0_0_chi[pp];
            double x124 = 0.5*grad_0_gt0[pp]*x21;
            double x125 = x20*x30;
            double x126 = -x124 - x125 + x16*x33;
            double x127 = x13*x33 - x39 - x40;
            double x128 = 2.0*x24;
            double x129 = grad_1_gt5[pp]*x13;
            double x130 = grad_2_gt3[pp]*x18;
            double x131 = x129 - x130 + x16*x70;
            double x132 = 0.5*x12;
            double x133 = 0.5*x11 - x132;
            double x134 = -x90 + x91;
            double x135 = 0.5*grad_1_gt5[pp];
            double x136 = 1.0*grad_2_gt4[pp];
            double x137 = x135 - x136;
            double x138 = grad_2_gt5[pp]*x133 + x134*x16 + x137*x18;
            double x139 = 0.5*grad_1_gt3[pp];
            double x140 = x139*x18;
            double x141 = -x140;
            double x142 = 1.0*grad_1_gt4[pp];
            double x143 = 0.5*grad_2_gt3[pp];
            double x144 = x142 - x143;
            double x145 = x16*x77;
            double x146 = x13*x144 + x141 - x145;
            double x147 = x21*x35;
            double x148 = grad_2_gt3[pp]*x13;
            double x149 = grad_1_gt5[pp]*x23;
            double x150 = x20*x70;
            double x151 = x148 - x149 - x150;
            double x152 = 0.5*grad_2_gt5[pp]*x23;
            double x153 = x13*x137;
            double x154 = -x152 - x153 + x20*x93;
            double x155 = grad_1_gt3[pp]*x133 - x144*x23 + x20*x77;
            double x156 = grad_2_gt0[pp]*x21;
            double x157 = -x156 + x16*x65 - x99;
            double x158 = grad_2_gt3[pp]*x16;
            double x159 = grad_1_gt5[pp]*x20;
            double x160 = x158 - x159 - x21*x70;
            double x161 = grad_1_gt0[pp]*x21;
            double x162 = x20*x55;
            double x163 = -x161 - x162 + x53;
            double x164 = grad_2_gt5[pp]*x38;
            double x165 = -x137*x16 - x164 + x21*x93;
            double x166 = x144*x20;
            double x167 = grad_1_gt3[pp]*x27 - x166 + x21*x77;
            double x168 = pow(grad_1_chi[pp], 2);
            double x169 = 3.0*x24;
            double x170 = -x169;
            double x171 = x18*(2*grad2_1_1_chi[pp] + x168*x170);
            double x172 = pow(grad_0_chi[pp], 2);
            double x173 = x21*(2*grad2_0_0_chi[pp] - 3.0*x172*x24);
            double x174 = pow(grad_2_chi[pp], 2);
            double x175 = x23*(2*grad2_2_2_chi[pp] - x169*x174);
            double x176 = 2*x14 - 2*x15;
            double x177 = grad_0_chi[pp]*x169;
            double x178 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x177;
            double x179 = -2*x19 + x8;
            double x180 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x177;
            double x181 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x170)*(2*x11 - 2*x12);
            double x182 = x146*x18;
            double x183 = x13*x131 - x138*x23 - x147 + x16*x82 - x182 - 1.0*x20*x80;
            double x184 = x154*x23;
            double x185 = -x127*x21 + x13*x151 - x155*x18 + x16*x96 - x184 - 1.0*x20*x87;
            double x186 = x126*x21;
            double x187 = x13*x160 - 1.0*x157*x20 + x16*x163 - x165*x23 - x167*x18 - x186;
            double x188 = pow(chi[pp], -2);
            double x189 = 4.0*x10;
            double x190 = x13*x189;
            double x191 = x16*x189;
            double x192 = 0.25*grad_1_gt2[pp];
            double x193 = 0.75*grad_2_gt1[pp];
            double x194 = x115*x50;
            double x195 = x122*x50;
            double x196 = grad_0_gt3[pp]*x35;
            double x197 = 0.25*grad_0_gt3[pp]*x80;
            double x198 = -x102;
            double x199 = 0.5*grad_0_gt1[pp] + x198;
            double x200 = x199*x80;
            double x201 = x199*x82;
            double x202 = 2.0*grad2_0_0_gt0[pp]*x10*x21 - grad2_0_1_gt0[pp]*x191 + 1.0*grad2_0_2_gt0[pp]*x10*x105 + 2.0*grad2_1_1_gt0[pp]*x10*x18 - grad2_1_2_gt0[pp]*x190 + 2.0*grad2_2_2_gt0[pp]*x10*x23 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - x104*(grad_1_gt0[pp]*x80 + x35*x65) - x110*(x200 + x35*x70) + x111*x50*(x201 - 2*x35*x77) - x172*x188 - x194*x80*(x117 + x192 + x193) - x195*x35*(x31 + x32) + x52*(grad_1_gt0[pp]*x82 + x196) + x73*(x197 + 0.5*x70*x82);
            double x203 = -grad_0_chi[pp]*x21 + grad_1_chi[pp]*x16 - grad_2_chi[pp]*x20;
            double x204 = -x11 + x12;
            double x205 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x204 + grad_2_chi[pp]*x23;
            double x206 = grad_0_gt5[pp]*x87;
            double x207 = 3.0*x50;
            double x208 = x207*x21;
            double x209 = grad_1_gt5[pp]*x151;
            double x210 = x18*x207;
            double x211 = -0.25*grad_2_gt3[pp];
            double x212 = x114*x50;
            double x213 = 6.0*x50;
            double x214 = 0.75*grad_0_gt4[pp];
            double x215 = -x119;
            double x216 = x151*x63;
            double x217 = 0.25*grad_1_gt5[pp]*x87;
            double x218 = grad_2_gt3[pp]*x138;
            double x219 = 0.25*grad_2_gt3[pp]*x80;
            double x220 = 0.5*x55;
            double x221 = grad_2_gt5[pp]*x151;
            double x222 = grad_1_gt5[pp]*x154;
            double x223 = grad_0_gt5[pp]*x154;
            double x224 = 0.25*grad_2_gt5[pp]*x151;
            double x225 = 0.25*grad_2_gt5[pp]*x87;
            double x226 = x106*x160;
            double x227 = x131*x65;
            double x228 = 0.25*x227;
            double x229 = x165*x70;
            double x230 = x157*x70;
            double x231 = 0.25*x230;
            double x232 = 0.25*grad_1_gt5[pp];
            double x233 = (-0.5)*grad_2_gt4[pp] + x232;
            double x234 = -x233*x80;
            double x235 = -x129 + x130 - x16*x70;
            double x236 = x233*x235;
            double x237 = -0.5*grad_2_gt2[pp] + x63;
            double x238 = -x160*x237;
            double x239 = x100 + x156;
            double x240 = x237*x239;
            double x241 = (-0.5)*gt0[pp]*gt4[pp] + x132;
            double x242 = -x135 + x136;
            double x243 = 2.0*x10;
            double x244 = -grad_0_chi[pp]*x187*x243 - grad_1_chi[pp]*x183*x243 - grad_2_chi[pp]*x185*x243 - x171 - x173 - x175 + x176*x178 - x179*x180 + x181;
            double x245 = grad_0_chi[pp]*x46 + grad_1_chi[pp]*x18 + grad_2_chi[pp]*x204;
            double x246 = grad_0_gt3[pp]*x82;
            double x247 = grad_2_gt3[pp]*x131;
            double x248 = x207*x23;
            double x249 = -x192;
            double x250 = x119 + x249;
            double x251 = x113*x131;
            double x252 = 0.25*grad_2_gt3[pp]*x82;
            double x253 = grad_2_gt3[pp]*x146;
            double x254 = grad_0_gt3[pp]*x146;
            double x255 = 0.25*grad_1_gt3[pp]*x82;
            double x256 = 0.25*grad_1_gt3[pp]*x131;
            double x257 = grad_1_gt5[pp]*x155;
            double x258 = 0.25*grad_1_gt5[pp]*x96;
            double x259 = 0.5*grad_0_gt4[pp];
            double x260 = 0.5*grad_2_gt1[pp];
            double x261 = (-0.5)*grad_1_gt2[pp] + x259 + x260;
            double x262 = x167*x70;
            double x263 = x102*x160;
            double x264 = x155*x55;
            double x265 = x151*x55;
            double x266 = 0.25*x265;
            double x267 = x163*x70;
            double x268 = 0.25*x267;
            double x269 = 0.5*grad_1_gt4[pp] + x211;
            double x270 = x269*x96;
            double x271 = -0.5*grad_1_gt1[pp] + x113;
            double x272 = -x160*x271;
            double x273 = x151*x269;
            double x274 = x161 + x162 + x54;
            double x275 = x271*x274;
            double x276 = (-0.5)*gt1[pp]*gt5[pp] + x26;
            double x277 = -x74 + x75;
            double x278 = x127*x55;
            double x279 = x63*x96;
            double x280 = x106*x163;
            double x281 = x102*x157;
            double x282 = grad_0_gt5[pp]*x127;
            double x283 = 0.25*grad_0_gt0[pp]*x157;
            double x284 = x108*x87;
            double x285 = 0.25*grad_0_gt0[pp]*x163;
            double x286 = x108*x96;
            double x287 = -x194;
            double x288 = 0.25*grad_1_gt5[pp]*x131;
            double x289 = x160*x63 + x165*x261;
            double x290 = -x137*x154;
            double x291 = x157*x199;
            double x292 = x108*x163;
            double x293 = x291 + x292;
            double x294 = x55*x82;
            double x295 = 0.25*x294;
            double x296 = x131*x269;
            double x297 = 0.5*grad_1_gt3[pp]*x138;
            double x298 = 0.25*grad_2_gt3[pp]*x131 + x297;
            double x299 = 0.25*x158 - 0.25*x159 - 0.25*x21*x70;
            double x300 = x299*x70;
            double x301 = x165*x74 + x299*x55;
            double x302 = x116 + x250;
            double x303 = x160*x302 + x167*x90;
            double x304 = 0.5*grad_2_gt5[pp]*x155;
            double x305 = x233*(-x148 + x149 + x150) + x304;
            double x306 = 0.25*grad_1_gt5[pp]*x82;
            double x307 = x138*x74;
            double x308 = x219 + x307;
            double x309 = 0.25*x55;
            double x310 = x131*x309;
            double x311 = x154*x261 + x216;
            double x312 = x108*x160 + x165*x33;
            double x313 = x157*x302;
            double x314 = 0.5*grad_1_gt0[pp]*x165;
            double x315 = x163*x63 + x314;
            double x316 = 0.5*grad_1_gt2[pp];
            double x317 = (-0.5)*grad_2_gt1[pp] + x259 + x316;
            double x318 = x154*x317;
            double x319 = -x233*x87;
            double x320 = 0.25*grad_2_gt5[pp]*x96;
            double x321 = x319 + x320;
            double x322 = x269*x82;
            double x323 = 0.25*grad_2_gt0[pp]*x16 + 0.25*x78 - 0.25*x79;
            double x324 = grad_1_gt3[pp]*x323;
            double x325 = x251 + x324;
            double x326 = x239*x271;
            double x327 = x160*x199 + x167*x30;
            double x328 = x146*x317;
            double x329 = x269*x87;
            double x330 = x155*x90;
            double x331 = x151*x302 + x330;
            double x332 = x144*x146;
            double x333 = x113*x160 + x167*x317;
            double x334 = 0.25*grad_2_gt3[pp]*x151;
            double x335 = grad_1_gt5[pp]*x96;
            double x336 = grad_2_gt3[pp]*x87 + x335;
            double x337 = x163*x55;
            double x338 = grad_1_gt0[pp]*x160;
            double x339 = grad_0_gt3[pp]*x157 + x338;
            double x340 = grad_0_gt5[pp]*x96;
            double x341 = x65*x87;
            double x342 = x340 + x341;
            double x343 = 1.0*x50;
            double x344 = x21*x343;
            double x345 = -x190;
            double x346 = -x191;
            double x347 = 2.0*grad2_0_0_gt4[pp]*x10*x21 + grad2_0_1_gt4[pp]*x346 + 1.0*grad2_0_2_gt4[pp]*x10*x105 + 2.0*grad2_1_1_gt4[pp]*x10*x18 + grad2_1_2_gt4[pp]*x345 + 2.0*grad2_2_2_gt4[pp]*x10*x23 + 2.0*grad_0_gt4[pp]*x187*x50 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x188 + 2.0*grad_1_gt4[pp]*x183*x50 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x185*x50 + 1.0*gt4[pp]*x10*x24*x244 - x128*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x45*(grad_2_gt3[pp]*x46 + x159 + x21*x70) + 0.5*grad_1_chi[pp]*x45*(grad_1_gt5[pp]*x204 + x130 + x46*x70) + 0.5*grad_2_chi[pp]*x45*(grad_2_gt3[pp]*x204 + x149 + x20*x70));
            double x348 = -grad_1_chi[pp];
            double x349 = 2.0*grad_2_alpha[pp];
            double x350 = -grad_2_chi[pp];
            double x351 = 2.0*grad_1_alpha[pp];
            double x352 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x203*x24 + 2.0*x158 - 2.0*x159 - 2.0*x21*x70) + x349*(1.0*grad_2_gt3[pp]*x10*x13 - x149*x44 - x150*x44 + x48*(1.0*gt4[pp]*x205*x45 + x348)) + x351*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x16*x70 - x130*x44 + x48*(1.0*gt4[pp]*x245*x45 + x350));
            double x353 = x157*x63;
            double x354 = (-0.5)*grad_0_gt4[pp] + x260 + x316;
            double x355 = 0.25*grad_1_gt5[pp]*x80 + x138*x354;
            double x356 = -x154*x93;
            double x357 = 0.25*grad_1_gt0[pp]*x80 + x317*x35;
            double x358 = x126*x30;
            double x359 = 0.25*grad_2_gt0[pp]*x87;
            double x360 = -x138*x77 + 0.5*x144*x80;
            double x361 = x154*x354 + x217;
            double x362 = x157*x309 + x314;
            double x363 = x131*x70;
            double x364 = 0.25*x363;
            double x365 = -x151*x237;
            double x366 = x320 + x365;
            double x367 = x108*x157;
            double x368 = 0.5*grad_0_gt0[pp]*x165;
            double x369 = x106*x157 + x368;
            double x370 = x323*x65;
            double x371 = 0.5*grad_1_gt0[pp]*x138 + x323*x55;
            double x372 = x135*x35 + x323*x70;
            double x373 = 0.5*grad_2_gt5[pp]*x127;
            double x374 = x237*(x68 + x85) + x373;
            double x375 = 0.25*grad_0_gt0[pp]*x160;
            double x376 = x281 + x375;
            double x377 = x126*x317;
            double x378 = x131*x199;
            double x379 = x144*x35 - 0.5*x77*x80;
            double x380 = x108*x151;
            double x381 = 0.5*grad_1_gt5[pp]*x127;
            double x382 = x381 + 0.25*x70*x87;
            double x383 = x235*x271;
            double x384 = x322 + x383;
            double x385 = 0.25*x337;
            double x386 = grad_2_gt0[pp]*x151;
            double x387 = grad_0_gt3[pp]*x80;
            double x388 = grad_1_gt0[pp]*x131;
            double x389 = x151*x70;
            double x390 = x18*x343;
            double x391 = -grad_0_chi[pp]*x188;
            double x392 = 2.0*grad2_0_0_gt2[pp]*x10*x21 + grad2_0_1_gt2[pp]*x346 + 1.0*grad2_0_2_gt2[pp]*x10*x105 + 2.0*grad2_1_1_gt2[pp]*x10*x18 + grad2_1_2_gt2[pp]*x345 + 2.0*grad2_2_2_gt2[pp]*x10*x23 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x187*x50 + 2.0*grad_1_gt2[pp]*x183*x50 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x391 + 2.0*grad_2_gt2[pp]*x185*x50 + 1.0*gt2[pp]*x10*x24*x244 - x128*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x45*(x46*x65 + x98 + x99) + 0.5*grad_1_chi[pp]*x45*(grad_0_gt5[pp]*x204 + grad_2_gt0[pp]*x46 + x18*x65) + 0.5*grad_2_chi[pp]*x45*(x204*x65 + x64 + x67));
            double x393 = -grad_0_chi[pp];
            double x394 = 2.0*grad_0_alpha[pp];
            double x395 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x24*x25 + x80) + x349*(1.0*x10*x13*x65 - x44*x67 - x44*x85 + x48*(1.0*gt2[pp]*x205*x45 + x393)) + x394*(1.0*x10*x16*x65 - x156*x44 - x44*x99 + x48*(1.0*gt2[pp]*x45*x47 + x350));
            double x396 = 0.25*x341;
            double x397 = 0.25*grad_1_gt5[pp]*x151;
            double x398 = x237*x274;
            double x399 = x146*x261;
            double x400 = 0.25*grad_2_gt3[pp]*x87 + x330;
            double x401 = x113*x157;
            double x402 = 0.5*grad_2_gt0[pp]*x167;
            double x403 = grad_0_gt5[pp]*x163;
            double x404 = grad_2_gt0[pp]*x160;
            double x405 = x157*x65 + x404;
            double x406 = x20*x343;
            double x407 = grad_1_gt5[pp]*x82;
            double x408 = grad_2_gt3[pp]*x80;
            double x409 = x227 + x408;
            double x410 = x387 + x83;
            double x411 = -x110;
            double x412 = -x233*x82;
            double x413 = x63*x87;
            double x414 = x280 + x281;
            double x415 = x126*x354 + x375;
            double x416 = x106*x151 + x381;
            double x417 = 0.25*x389;
            double x418 = x13*x50;
            double x419 = x143*x35;
            double x420 = x102*x131 + x419;
            double x421 = -x195;
            double x422 = x319 + x365;
            double x423 = x126*x33;
            double x424 = x106*x96 + x127*x261;
            double x425 = 0.25*grad_1_gt0[pp]*x82;
            double x426 = -0.5*x137*x96 - x155*x93;
            double x427 = x324 + x383;
            double x428 = x146*x354 + x252;
            double x429 = x263 + x402;
            double x430 = x163*x302;
            double x431 = x280 + x375;
            double x432 = x126*x261;
            double x433 = -x127*x137 - 0.5*x97;
            double x434 = x419 + 0.25*x70*x82;
            double x435 = 0.25*x60 - 0.25*x94 - 0.25*x95;
            double x436 = x435*x55;
            double x437 = 0.5*grad_2_gt0[pp]*x155 + x302*x96;
            double x438 = x163*x199;
            double x439 = 0.5*grad_0_gt0[pp]*x167;
            double x440 = x102*x163 + x439;
            double x441 = 0.5*grad_2_gt3[pp]*x127 + x435*x70;
            double x442 = x139*x35;
            double x443 = x271*(-grad_1_gt0[pp]*x16 - x13*x55 + x81) + x442;
            double x444 = x113*x163;
            double x445 = 0.25*grad_2_gt3[pp]*x96 + x155*x354;
            double x446 = -x146*x77;
            double x447 = x23*x343;
            double x448 = 2.0*grad2_0_0_gt1[pp]*x10*x21 + grad2_0_1_gt1[pp]*x346 + 1.0*grad2_0_2_gt1[pp]*x10*x105 + 2.0*grad2_1_1_gt1[pp]*x10*x18 + grad2_1_2_gt1[pp]*x345 + 2.0*grad2_2_2_gt1[pp]*x10*x23 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x187*x50 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x391 + 2.0*grad_1_gt1[pp]*x183*x50 + 2.0*grad_2_gt1[pp]*x185*x50 + 1.0*gt1[pp]*x10*x24*x244 - x128*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x45*(grad_0_gt3[pp]*x46 + x56) + 0.5*grad_1_chi[pp]*x45*(grad_1_gt0[pp]*x46 + x204*x55 + x81) + 0.5*grad_2_chi[pp]*x45*(grad_0_gt3[pp]*x204 + x61));
            double x449 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x24*x37 + 2.0*x60 - 2.0*x94 - 2.0*x95) + x351*(1.0*grad_1_gt0[pp]*x10*x16 + 1.0*x10*x13*x55 - x44*x81 + x48*(1.0*gt1[pp]*x245*x45 + x393)) + x394*(1.0*grad_0_gt3[pp]*x10*x16 - x161*x44 - x162*x44 + x48*(1.0*gt1[pp]*x45*x47 + x348));
            double x450 = 0.25*grad_0_gt3[pp]*x82;
            At_rhs00[pp] = 1.3333333333333333*At0[pp]*grad_0_beta0[pp] + 2*At1[pp]*grad_0_beta1[pp] + 2*At2[pp]*grad_0_beta2[pp] + agrad_0_At0[pp]*beta0[pp] + agrad_1_At0[pp]*beta1[pp] + agrad_2_At0[pp]*beta2[pp] - alpha[pp]*(2.0*At0[pp]*x10*(At1[pp]*x16 - At2[pp]*x20 + x1*x21) + 2.0*At1[pp]*x10*(At0[pp]*x16 - At1[pp]*x18 + At2[pp]*x13) + 2.0*At2[pp]*x10*(-At0[pp]*x20 + At1[pp]*x13 - At2[pp]*x23) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt0[pp]*x103*(x126*x21 - 1.0*x13*x160 + x157*x20 - 1.0*x16*x163 + x165*x23 + x167*x18) + 6.0*grad_0_gt0[pp]*x21*x50*x59 - grad_1_gt0[pp]*x103*(-1.0*x13*x131 + x138*x23 + x146*x18 + x147 - 1.0*x16*x82 + x20*x80) + 3.0*grad_1_gt0[pp]*x18*x50*x57 + 3.0*grad_2_gt0[pp]*x101*x23*x50 - grad_2_gt0[pp]*x103*(x127*x21 - 1.0*x13*x151 + x154*x23 + x155*x18 - 1.0*x16*x96 + x20*x87) - gt0[pp]*x10*x48*(2.0*grad_0_chi[pp]*x10*x187 + 2.0*grad_1_chi[pp]*x10*x183 + 2.0*grad_2_chi[pp]*x10*x185 + x171 + x173 + x175 - x176*x178 + x179*x180 - x181) + x104*(grad_0_gt0[pp]*x101 + grad_2_gt0[pp]*x59) + x104*(grad_0_gt5[pp]*x42 + grad_2_gt0[pp]*x69) + x105*x50*(0.25*grad_0_gt0[pp]*x101 + 1.0*grad_2_gt0[pp]*x59) - x110*(x108*(x66 - x67 + x86) + x42*(grad_0_gt5[pp] - x109)) - x112*(0.25*grad_0_gt0[pp]*x57 + 1.0*grad_1_gt0[pp]*x59) - x112*(x108*x62 + 1.0*x42*x70) + x114*x120*x50*x62 + x114*x50*x82*(x113 + x76) + x115*x50*x87*(x63 + x92) + x121*x122*x42*x50 - x128*(1.0*grad_0_chi[pp]*x10*x126 + 1.0*grad_1_chi[pp]*x10*x35 + 1.0*grad_2_chi[pp]*x10*x127 + x123) + x202 - x52*(grad_0_gt0[pp]*x57 + grad_1_gt0[pp]*x59) - x52*(grad_2_gt0[pp]*x62 + x42*x55) - x73*(-x89 + x97) - x73*(0.5*grad_1_gt0[pp]*x101 + 0.25*grad_2_gt0[pp]*x57) - x73*(0.5*grad_2_gt0[pp]*x57 + x101*x102) - x73*(x62*x63 + x69*x71) - x73*(x77*x80 - x84)) - 12*grad2_0_0_alpha[pp] - 12*grad_0_alpha[pp]*(0.5*grad_0_gt0[pp]*x10*x21 + 1.0*x10*x20*x30 - x43*x44 - x49) + 12.0*grad_1_alpha[pp]*x10*x36 - 12.0*grad_2_alpha[pp]*x10*(-0.5*gt0[pp]*x24*x37 + x42) + 1.0*gt0[pp]*x10*(-x13*(alpha[pp]*(-x110*(x216 + x321) - x110*(x311 + x320) - x110*(x312 + x398) + x112*(x258 + x331) + x112*(x258 + x400) + x112*(x268 + x327) + x112*(x251 + x252 + x328) + x112*(x322 + x324 + x399) + x112*(x385 + x401 + x402) + 2.0*x13*x50*(grad_1_gt5[pp]*x146 + x247) - x194*(0.5*x221 + x290) - x195*(x280 + x293) - x195*(x396 + x90*x96) - x212*(1.0*x257 + x334) - x212*(0.5*x262 + x333) - x212*(x143*x146 + x256 + x332) + x287*(x238 + x289) + x287*(0.5*grad_2_gt3[pp]*x138 + x236 + x288) - x344*(x294 + x410) + x347 - x406*(x403 + x405) - x406*(x407 + x409) + x411*(x307 + x310 + x412) + x73*(x300 + x303) + x73*(x305 + x397) + x73*(-x167*x93 + x301) + x73*(x143*x154 + x304 + x397) + x73*(x146*x242 + x296 + x297)) + x352) - x13*(alpha[pp]*(-x110*(x217 + x311) - x110*(x231 + x312) - x110*(x306 + x308) - x110*(x308 + x310) - x110*(x313 + x315) - x110*(x318 + x321) + x112*(x322 + x325) + x112*(x325 + x328) + x112*(x326 + x327) + x112*(x329 + x331) + 2.0*x13*x50*(grad_2_gt3[pp]*x154 + x209) - x194*(0.5*x229 + x289) - x194*(x135*x154 + x224 + x290) - x195*(x281 + x293) - x195*(0.5*grad_0_gt3[pp]*x80 + x295) - x212*(x272 + x333) - x212*(0.5*grad_1_gt3[pp]*x131 + x332) - x212*(x135*x155 + x273 + x334) + x287*(1.0*x218 + x288) - x344*(x342 + x88) + x347 + x51*(x265 + x336) + x51*(x337 + x339) + x73*(x296 + x298) + x73*(x300 + x301) + x73*(x135*x146 + x298) + x73*(x144*x154 + x305) + x73*(x165*x277 + x303)) + x352) - x16*(alpha[pp]*(-x110*(x291 + x415) - x110*(x396 + x416) - x110*(x414 + x432) - x110*(x433 + x89) + x112*(x436 + x441) + x112*(x443 + x450) + x112*(x127*x144 + x437) + x112*(0.5*grad_1_gt0[pp]*x146 + x442 + x450) + x112*(x126*x277 + x438 + x439) + 2.0*x16*x50*(grad_0_gt3[pp]*x126 + grad_1_gt0[pp]*x163) - x195*(0.5*x278 + x424) - x195*(0.5*grad_1_gt0[pp]*x126 + x285 + x423) - x212*(x270 + x445) - x212*(0.5*grad_1_gt3[pp]*x82 + x446) - x212*(0.5*grad_1_gt0[pp]*x167 + x275 + x444) + x287*(x217 + x422) + x287*(0.5*grad_2_gt3[pp]*x80 + x364) + x411*(x197 + x420) + x411*(x197 + x434) + x418*(x267 + x339) + x418*(x336 + x389) + x421*(1.0*x196 + x425) - x447*(x230 + x405) + x448 + x73*(x252 + x427) + x73*(x324 + x428) + x73*(x329 + x426) + x73*(x326 + x402 + x430)) + x449) + x18*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x21 - grad2_0_1_gt3[pp]*x191 + 1.0*grad2_0_2_gt3[pp]*x10*x105 + 2.0*grad2_1_1_gt3[pp]*x10*x18 - grad2_1_2_gt3[pp]*x190 + 2.0*grad2_2_2_gt3[pp]*x10*x23 + 2.0*grad_0_gt3[pp]*x187*x50 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x182*x213 + 2.0*grad_1_gt3[pp]*x183*x50 + 2.0*grad_2_gt3[pp]*x185*x50 + 1.0*gt3[pp]*x10*x24*x244 - x110*(0.5*grad_2_gt3[pp]*x82 + x251) - x110*(x131*x74 + x252) - x110*(-1.0*x137*x96 + x266) - x110*(x151*x261 + x258) - x110*(x160*x33 + x268) - x110*(x163*x261 + x263) + x111*x50*(x155*x65 + x270) + x111*x50*(2*x167*x33 + x275) + x112*(1.0*x254 + x255) - x128*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x45*(grad_1_gt3[pp]*x276 + x166 + x21*x277) + 1.0*grad_1_chi[pp]*x45*(x140 + x144*x204 + x277*x46) + 1.0*grad_2_chi[pp]*x45*(grad_1_gt3[pp]*x241 + x144*x23 + x20*x277)) + 2.0*x13*x50*(grad_0_gt3[pp]*x160 + x262) + 2.0*x13*x50*(grad_1_gt3[pp]*x131 + x253) + 2.0*x13*x50*(grad_2_gt3[pp]*x151 + x257) - x151*x194*(x136 - x232) - x155*x212*(x142 + x143) + 2.0*x16*x50*(grad_0_gt3[pp]*x163 + grad_1_gt0[pp]*x167) - x160*x194*(x116 + x193 + x249) - x163*x195*(x198 + x31) - x167*x212*(x74 + x75) - x168*x188 - x195*x96*(x214 + x250) - x208*x246 - x247*x248 + x50*x72*(-2*x137*x155 + x273) + x50*x72*(x167*x65 + x272) + x52*(grad_1_gt3[pp]*x82 + x254) + x52*(grad_2_gt3[pp]*x96 + x264) + x73*(1.0*x253 + x256)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x203*x24 + x167) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x144 + 1.0*x10*x141 - x145*x44 + x48*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x245*x45)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x24*x37 + x155)) + x20*(alpha[pp]*(-x104*(grad_0_gt5[pp]*x126 + grad_2_gt0[pp]*x157) - x110*(x374 + x413) - x110*(0.5*grad_2_gt0[pp]*x154 + x373 + x413) - x110*(x126*x134 + x367 + x368) + x112*(x279 + x382) + x112*(x279 + x416) + x112*(x292 + x415) + x112*(x295 + x420) + x112*(x377 + x414) + x112*(x379 + x84) - x194*(0.5*grad_2_gt0[pp]*x165 + x240 + x353) - x195*(1.0*x282 + x359) - x195*(0.5*grad_2_gt0[pp]*x126 + x283 + x358) - x212*(x252 + x384) - x212*(0.5*grad_1_gt5[pp]*x96 + x417) + x287*(x234 + x355) + x287*(0.5*grad_2_gt5[pp]*x87 + x356) - x390*(x267 + x337 + x338) + x392 + x411*(x370 + x372) + x411*(x242*x35 + x371) + x418*(x230 + x403 + x404) + x418*(x363 + x407 + x408) + x421*(x261*x35 + x357) + x73*(x217 + x366) + x73*(x320 + x361) + x73*(x360 + x412) + x73*(x362 + x398)) + x395) + x20*(alpha[pp]*(-x104*(grad_2_gt0[pp]*x154 + x206) - x110*(x367 + x369) - x110*(x370 + x371) - x110*(x126*x90 + x369) - x110*(x138*x33 + x372) - x110*(x154*x30 + x374) + x112*(x292 + x376) + x112*(x376 + x377) + x112*(x378 + x379) + x112*(x380 + x382) - x194*(x138*x261 + x355) - x194*(x154*x90 + x225 + x356) - x195*(x200 + x357) - x195*(0.5*grad_0_gt0[pp]*x157 + x358) - x195*(x127*x90 + x284 + x359) - x212*(x251 + x384) - x212*(0.5*grad_1_gt0[pp]*x160 + x385) + x287*(1.0*grad_2_gt0[pp]*x165 + x353) - x390*(x265 + x335 + x389) + x392 + x51*(x294 + x387 + x388) + x51*(x340 + x386 + x88) + x73*(x216 + x361) + x73*(x226 + x315) + x73*(x226 + x362) + x73*(x228 + x360) + x73*(x318 + x366) + x73*(x306 + x307 + x364)) + x395) + x21*(alpha[pp]*(-grad_0_gt0[pp]*x186*x213 + 2.0*grad_0_gt0[pp]*x187*x50 - grad_1_gt0[pp]*x163*x210 + 2.0*grad_1_gt0[pp]*x183*x50 - grad_2_gt0[pp]*x157*x248 + 2.0*grad_2_gt0[pp]*x185*x50 + 1.0*gt0[pp]*x10*x24*x244 - x104*(grad_0_gt0[pp]*x157 + grad_2_gt0[pp]*x126) - x104*(grad_2_gt0[pp]*x87 + x282) - x110*(1.0*grad_2_gt0[pp]*x126 + x283) - x110*(x127*(-grad_0_gt5[pp] + x109) + x284) + x111*x50*(x127*x70 + x286) + x112*(1.0*grad_1_gt0[pp]*x126 + x285) - x120*x212*x96 - x121*x127*x195 - x128*(1.0*grad_0_chi[pp]*x45*(x33*x46 + x58) + 1.0*grad_1_chi[pp]*x45*(grad_0_gt0[pp]*x276 + x204*x30 + x34) + 1.0*grad_2_chi[pp]*x45*(x204*x33 + x41) + x123) - x194*x87*(-x63 + x91) + x202 - x212*x82*(-x113 + x75) + x52*(grad_0_gt0[pp]*x163 + grad_1_gt0[pp]*x126) + x52*(grad_2_gt0[pp]*x96 + x278) + x73*(x279 + x71*x87) + x73*(x89 - 1.0*x93*x96) + x73*(0.5*grad_1_gt0[pp]*x157 + x280) + x73*(0.5*grad_2_gt0[pp]*x163 + x281) + x73*(-1.0*x77*x80 + x84)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(-x10*x124 + 1.0*x10*x16*x33 - x125*x44 + x49) + 4.0*grad_1_alpha[pp]*x10*x36 + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x24*x37 + x127)) + x23*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x21 - grad2_0_1_gt5[pp]*x191 + 1.0*grad2_0_2_gt5[pp]*x10*x105 + 2.0*grad2_1_1_gt5[pp]*x10*x18 - grad2_1_2_gt5[pp]*x190 + 2.0*grad2_2_2_gt5[pp]*x10*x23 + 2.0*grad_0_gt5[pp]*x187*x50 + 2.0*grad_1_gt5[pp]*x183*x50 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x184*x213 + 2.0*grad_2_gt5[pp]*x185*x50 + 1.0*gt5[pp]*x10*x24*x244 - x104*(grad_0_gt5[pp]*x157 + grad_2_gt0[pp]*x165) - x104*(grad_1_gt5[pp]*x80 + x138*x65) - x104*(grad_2_gt5[pp]*x87 + x223) - x110*(1.0*x223 + x225) - x110*(x138*x55 + x234) - x110*(x165*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp]) + x240) + x111*x50*(x144*x80 + x228) + x111*x50*(x160*x30 + x231) + x112*(0.5*grad_1_gt5[pp]*x87 + x216) + x112*(x131*x220 + x219) + x112*(x151*x90 + x217) + x112*(x157*x220 + x226) - x128*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x45*(x134*x21 + x164 + x242*x46) + 1.0*grad_1_chi[pp]*x45*(grad_2_gt5[pp]*x241 + x134*x46 + x18*x242) + 1.0*grad_2_chi[pp]*x45*(x134*x20 + x152 + x204*x242)) + 2.0*x13*x50*(x221 + x222) + 2.0*x13*x50*(grad_0_gt5[pp]*x160 + x229) + 2.0*x13*x50*(grad_1_gt5[pp]*x131 + x218) - x131*x212*(x142 + x211) - x138*x194*(x135 + x136) - x157*x195*(x107 + x28) - x160*x212*(x116 + x118 + x215) - x165*x194*(x90 + x91) - x174*x188 - x195*x80*(x192 + x214 + x215) - x206*x208 - x209*x210 + x50*x72*(2*x138*x144 + x236) + x50*x72*(x165*x55 + x238) + x73*(1.0*x222 + x224)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x203*x24 + x165) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x24*x25 + x138) + 4*grad_2_alpha[pp]*(-x10*x152 + 1.0*x10*x20*x93 - x153*x44 + x48*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x205*x45))) + x46*(alpha[pp]*(-x110*(x291 + x431) - x110*(x378 + x434) - x110*(x380 + x433) - x110*(x431 + x432) + x112*(x436 + x437) + x112*(x438 + x440) + x112*(x126*x74 + x440) + x112*(x146*x33 + x443) + x112*(x155*x30 + x441) - x194*(0.5*grad_2_gt0[pp]*x160 + x313) - x195*(x286 + x424) - x195*(0.5*grad_0_gt0[pp]*x163 + x423) - x195*(x201 + x35*x74 + x425) - x212*(0.5*x264 + x445) - x212*(1.0*grad_1_gt0[pp]*x167 + x444) - x212*(x146*x74 + x255 + x446) + x287*(x216 + x422) - x406*(x342 + x386) - x406*(x388 + x410) - x447*(x363 + x409) + x448 + x52*(grad_1_gt0[pp]*x146 + x246) + x73*(x251 + x428) + x73*(x266 + x426) + x73*(x399 + x427) + x73*(x400 + x417) + x73*(x401 + x429) + x73*(x429 + x430)) + x449))) - grad_1_beta1[pp]*x0 - grad_2_beta2[pp]*x0;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.66666666666666663*gt0[pp];
            gt_rhs00[pp] = 2*(-At0[pp])*alpha[pp] + agrad_0_gt0[pp]*beta0[pp] + agrad_1_gt0[pp]*beta1[pp] + agrad_2_gt0[pp]*beta2[pp] + 1.3333333333333333*grad_0_beta0[pp]*gt0[pp] + 2*grad_0_beta1[pp]*gt1[pp] + 2*grad_0_beta2[pp]*gt2[pp] - grad_1_beta1[pp]*x0 - grad_2_beta2[pp]*x0;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.66666666666666663*gt3[pp];
            gt_rhs11[pp] = 2*(-At3[pp])*alpha[pp] + agrad_0_gt3[pp]*beta0[pp] + agrad_1_gt3[pp]*beta1[pp] + agrad_2_gt3[pp]*beta2[pp] - grad_0_beta0[pp]*x0 + 2*grad_1_beta0[pp]*gt1[pp] + 1.3333333333333333*grad_1_beta1[pp]*gt3[pp] + 2*grad_1_beta2[pp]*gt4[pp] - grad_2_beta2[pp]*x0;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            a_rhs[pp] = K[pp]*(-2*alpha[pp]) + lambda[0]*(agrad_0_alpha[pp]*beta0[pp] + agrad_1_alpha[pp]*beta1[pp] + agrad_2_alpha[pp]*beta2[pp]);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            gt_rhs02[pp] = 2*(-At2[pp])*alpha[pp] + agrad_0_gt2[pp]*beta0[pp] + agrad_1_gt2[pp]*beta1[pp] + agrad_2_gt2[pp]*beta2[pp] + 1.0*grad_0_beta0[pp]*gt2[pp]*x0 + grad_0_beta1[pp]*gt4[pp] + grad_0_beta2[pp]*gt5[pp] - 0.66666666666666663*grad_1_beta1[pp]*gt2[pp] + grad_2_beta0[pp]*gt0[pp] + grad_2_beta1[pp]*gt1[pp] + 1.0*grad_2_beta2[pp]*gt2[pp]*x0;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = agrad_0_Gt0[pp]*beta0[pp] + agrad_1_Gt0[pp]*beta1[pp] + agrad_2_Gt0[pp]*beta2[pp];
            double x1 = pow(gt4[pp], 2);
            double x2 = pow(gt1[pp], 2);
            double x3 = pow(gt2[pp], 2);
            double x4 = gt0[pp]*gt5[pp];
            double x5 = gt1[pp]*gt2[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x1 + gt3[pp]*x3 - gt3[pp]*x4 - gt4[pp]*x6 + gt5[pp]*x2;
            double x8 = pow(x7, -2);
            double x9 = gt0[pp]*gt4[pp];
            double x10 = -x5 + x9;
            double x11 = -x3 + x4;
            double x12 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x13 = gt1[pp]*gt5[pp];
            double x14 = gt2[pp]*gt4[pp];
            double x15 = x13 - x14;
            double x16 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x17 = gt1[pp]*gt4[pp];
            double x18 = gt2[pp]*gt3[pp];
            double x19 = x17 - x18;
            double x20 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x21 = gt0[pp]*gt3[pp] - x2;
            double x22 = -0.5*x5 + 0.5*x9;
            double x23 = 0.5*grad_0_gt5[pp];
            double x24 = 1.0*grad_2_gt2[pp];
            double x25 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x26 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x27 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x28 = gt3[pp]*gt5[pp];
            double x29 = -x1 + x28;
            double x30 = 0.5*x13 - 0.5*x14;
            double x31 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x32 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x33 = x23 - x24;
            double x34 = 0.5*x17 - 0.5*x18;
            double x35 = -grad_1_gt5[pp]*x19 + grad_2_gt3[pp]*x15 - x12*x29;
            double x36 = grad_0_gt3[pp]*x15 - grad_1_gt0[pp]*x29 - x16*x19;
            double x37 = -grad_0_gt5[pp]*x19 - grad_2_gt0[pp]*x29 + x15*x20;
            double x38 = -grad_2_gt5[pp]*x34 - x15*x25 + x29*x33;
            double x39 = grad_1_gt3[pp]*x30 - x19*x26 + x27*x29;
            double x40 = -0.5*grad_0_gt0[pp]*x29 + x15*x32 - x19*x31;
            double x41 = x10*x35 - x11*x39 + x15*x36 - 1.0*x19*x37 - x21*x38 - x29*x40;
            double x42 = pow(x7, -3);
            double x43 = pow(x15, 2);
            double x44 = pow(x19, 2);
            double x45 = At1[pp]*x29;
            double x46 = 2*x15;
            double x47 = x15*x19;
            double x48 = 2*At4[pp];
            double x49 = At0[pp]*pow(x29, 2) + 2*At2[pp]*x19*x29 + At3[pp]*x43 + At5[pp]*x44 - x45*x46 - x47*x48;
            double x50 = x10*x19;
            double x51 = At4[pp]*x21;
            double x52 = At0[pp]*x19*x29 - At1[pp]*x47 + At2[pp]*x21*x29 + At2[pp]*x44 + At3[pp]*x10*x15 - At4[pp]*x50 + At5[pp]*x19*x21 - x10*x45 - x15*x51;
            double x53 = pow(x10, 2);
            double x54 = At3[pp]*x11;
            double x55 = -At0[pp]*x15*x29 + At1[pp]*x43 - At2[pp]*x10*x29 - At2[pp]*x47 + At4[pp]*x10*x15 + At4[pp]*x11*x19 - At5[pp]*x50 + x11*x45 - x15*x54;
            double x56 = 1.0/x7;
            double x57 = 1.0*x56;
            double x58 = x29*x56;
            double x59 = 2*x8;
            double x60 = x19*x56;
            double x61 = 0.33333333333333331*x60;
            double x62 = 0.33333333333333331;
            double x63 = 0.33333333333333331*x58;
            double x64 = 1.0/chi[pp];
            double x65 = 0.33333333333333331*alpha[pp]*x56;
            B_rhs0[pp] = (-B0[pp])*eta + 2.0*alpha[pp]*x35*x42*(-At0[pp]*x47 + At1[pp]*x10*x15 + At1[pp]*x11*x19 - At2[pp]*x15*x21 - At2[pp]*x50 + At4[pp]*x11*x21 + At4[pp]*x53 - At5[pp]*x10*x21 - x10*x54) + 2.0*alpha[pp]*x36*x42*x55 + 2.0*alpha[pp]*x37*x42*x52 + 2*alpha[pp]*x38*x42*(At0[pp]*x44 - 2*At1[pp]*x50 + 2*At2[pp]*x19*x21 + At3[pp]*x53 + At5[pp]*pow(x21, 2) - 2*x10*x51) + 2*alpha[pp]*x39*x42*(At0[pp]*x43 - At1[pp]*x11*x46 + 2*At2[pp]*x10*x15 + At3[pp]*pow(x11, 2) + At5[pp]*x53 - x10*x11*x48) + 2*alpha[pp]*x40*x42*x49 - 1.3333333333333333*grad2_0_0_beta0[pp]*x58 + 7.0*grad2_0_1_beta0[pp]*x15*x56*x62 - grad2_0_1_beta1[pp]*x63 - 2.333333333333333*grad2_0_2_beta0[pp]*x60 - grad2_0_2_beta2[pp]*x63 - grad2_1_1_beta0[pp]*x11*x57 + 1.0*grad2_1_1_beta1[pp]*x15*x56*x62 + 1.0*grad2_1_2_beta0[pp]*x56*(-x6 + 2*x9) - grad2_1_2_beta1[pp]*x61 + 1.0*grad2_1_2_beta2[pp]*x15*x56*x62 - grad2_2_2_beta0[pp]*x21*x57 - grad2_2_2_beta2[pp]*x61 - grad_0_alpha[pp]*x49*x59 - grad_0_beta0[pp]*x41*x8 - grad_1_alpha[pp]*x55*x59 - grad_1_beta0[pp]*x8*(x10*(grad_1_gt5[pp]*x10 - grad_2_gt3[pp]*x11 + x12*x15) - x11*(-0.5*grad_1_gt3[pp]*x11 + x10*x26 - x15*x27) + x15*(-grad_0_gt3[pp]*x11 + grad_1_gt0[pp]*x15 + x10*x16) - 1.0*x19*(grad_0_gt5[pp]*x10 + grad_2_gt0[pp]*x15 - x11*x20) - x21*(grad_2_gt5[pp]*x22 + x11*x25 + x15*(-x23 + x24)) - x29*(grad_0_gt0[pp]*x30 + x10*x31 - x11*x32)) - grad_2_alpha[pp]*x52*x59 - grad_2_beta0[pp]*x8*(x10*(-grad_1_gt5[pp]*x21 + grad_2_gt3[pp]*x10 - x12*x19) - x11*(grad_1_gt3[pp]*x22 + x19*x27 - x21*x26) + x15*(grad_0_gt3[pp]*x10 - grad_1_gt0[pp]*x19 - x16*x21) - 1.0*x19*(-grad_0_gt5[pp]*x21 - grad_2_gt0[pp]*x19 + x10*x20) - x21*(-0.5*grad_2_gt5[pp]*x21 - x10*x25 + x19*x33) - x29*(-grad_0_gt0[pp]*x34 + x10*x32 - x21*x31)) + lambda[2]*(agrad_0_B0[pp]*beta0[pp] + agrad_1_B0[pp]*beta1[pp] + agrad_2_B0[pp]*beta2[pp]) - lambda[3]*x0 + x0 + x41*x8*(2.0*grad_0_beta0[pp]*x62 + 2.0*grad_1_beta1[pp]*x62 + 2.0*grad_2_beta2[pp]*x62) - x65*(grad_0_K[pp]*(4*x1 - 4*x28) + 9.0*grad_0_chi[pp]*x49*x56*x64) - x65*(grad_1_K[pp]*(4*x13 - 4*x14) + 9.0*grad_1_chi[pp]*x55*x56*x64) - x65*(grad_2_K[pp]*(-4*x17 + 4*x18) + 9.0*grad_2_chi[pp]*x52*x56*x64);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = agrad_0_Gt2[pp]*beta0[pp] + agrad_1_Gt2[pp]*beta1[pp] + agrad_2_Gt2[pp]*beta2[pp];
            double x1 = pow(gt4[pp], 2);
            double x2 = pow(gt1[pp], 2);
            double x3 = pow(gt2[pp], 2);
            double x4 = gt3[pp]*gt5[pp];
            double x5 = gt2[pp]*gt4[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x1 - gt0[pp]*x4 - gt1[pp]*x6 + gt3[pp]*x3 + gt5[pp]*x2;
            double x8 = pow(x7, -2);
            double x9 = gt0[pp]*gt4[pp];
            double x10 = gt1[pp]*gt2[pp];
            double x11 = -x10 + x9;
            double x12 = gt1[pp]*gt5[pp];
            double x13 = x12 - x5;
            double x14 = gt1[pp]*gt4[pp];
            double x15 = gt2[pp]*gt3[pp];
            double x16 = x14 - x15;
            double x17 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x18 = -x1 + x4;
            double x19 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x20 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x21 = gt0[pp]*gt3[pp];
            double x22 = -x2 + x21;
            double x23 = 0.5*x14 - 0.5*x15;
            double x24 = 0.5*grad_0_gt5[pp];
            double x25 = 1.0*grad_2_gt2[pp];
            double x26 = x24 - x25;
            double x27 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x28 = gt0[pp]*gt5[pp] - x3;
            double x29 = 0.5*x12 - 0.5*x5;
            double x30 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x31 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x32 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x33 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x34 = -0.5*x10 + 0.5*x9;
            double x35 = pow(x7, -3);
            double x36 = -grad_0_gt5[pp]*x22 - grad_2_gt0[pp]*x16 + x11*x20;
            double x37 = pow(x16, 2);
            double x38 = At1[pp]*x18;
            double x39 = x13*x16;
            double x40 = x13*x22;
            double x41 = At0[pp]*x16*x18 - At1[pp]*x39 + At2[pp]*x18*x22 + At2[pp]*x37 + At3[pp]*x11*x13 - At4[pp]*x11*x16 - At4[pp]*x40 + At5[pp]*x16*x22 - x11*x38;
            double x42 = grad_0_gt3[pp]*x11 - grad_1_gt0[pp]*x16 - x19*x22;
            double x43 = pow(x13, 2);
            double x44 = At3[pp]*x28;
            double x45 = -grad_0_gt0[pp]*x23 + x11*x32 - x22*x33;
            double x46 = 2*x13;
            double x47 = 2*At4[pp];
            double x48 = -grad_1_gt5[pp]*x22 + grad_2_gt3[pp]*x11 - x16*x17;
            double x49 = pow(x11, 2);
            double x50 = -At0[pp]*x39 + At1[pp]*x11*x13 + At1[pp]*x16*x28 - At2[pp]*x11*x16 - At2[pp]*x40 + At4[pp]*x22*x28 + At4[pp]*x49 - At5[pp]*x11*x22 - x11*x44;
            double x51 = -0.5*grad_2_gt5[pp]*x22 - x11*x27 + x16*x26;
            double x52 = 2*x11;
            double x53 = At0[pp]*x37 - At1[pp]*x16*x52 + 2*At2[pp]*x16*x22 + At3[pp]*x49 - At4[pp]*x22*x52 + At5[pp]*pow(x22, 2);
            double x54 = grad_1_gt3[pp]*x34 + x16*x30 - x22*x31;
            double x55 = x11*x48 + x13*x42 - 1.0*x16*x36 - x18*x45 - x22*x51 - x28*x54;
            double x56 = 1.0/x7;
            double x57 = x22*x56;
            double x58 = 1.0*x56;
            double x59 = 2*x8;
            double x60 = 0.33333333333333331*x57;
            double x61 = x16*x56;
            double x62 = 0.33333333333333331*x61;
            double x63 = 0.33333333333333331;
            double x64 = 1.0/chi[pp];
            double x65 = 0.33333333333333331*alpha[pp]*x56;
            B_rhs2[pp] = (-B2[pp])*eta + 2.0*alpha[pp]*x35*x36*x41 + 2.0*alpha[pp]*x35*x42*(-At0[pp]*x13*x18 + At1[pp]*x43 - At2[pp]*x11*x18 - At2[pp]*x39 + At4[pp]*x11*x13 + At4[pp]*x16*x28 - At5[pp]*x11*x16 - x13*x44 + x28*x38) + 2*alpha[pp]*x35*x45*(At0[pp]*pow(x18, 2) + 2*At2[pp]*x16*x18 + At3[pp]*x43 + At5[pp]*x37 - x38*x46 - x39*x47) + 2.0*alpha[pp]*x35*x48*x50 + 2*alpha[pp]*x35*x51*x53 + 2*alpha[pp]*x35*x54*(At0[pp]*x43 - At1[pp]*x28*x46 + 2*At2[pp]*x11*x13 + At3[pp]*pow(x28, 2) + At5[pp]*x49 - x11*x28*x47) - grad2_0_0_beta0[pp]*x62 - grad2_0_0_beta2[pp]*x18*x58 + 1.0*grad2_0_1_beta0[pp]*x11*x56*x63 - grad2_0_1_beta1[pp]*x62 + 1.0*grad2_0_1_beta2[pp]*x56*(2*x12 - x6) - grad2_0_2_beta0[pp]*x60 - 2.333333333333333*grad2_0_2_beta2[pp]*x61 + 1.0*grad2_1_1_beta1[pp]*x11*x56*x63 - grad2_1_1_beta2[pp]*x28*x58 - grad2_1_2_beta1[pp]*x60 + 7.0*grad2_1_2_beta2[pp]*x11*x56*x63 - 1.3333333333333333*grad2_2_2_beta2[pp]*x57 - grad_0_alpha[pp]*x41*x59 - grad_0_beta2[pp]*x8*(x11*(-grad_1_gt5[pp]*x16 + grad_2_gt3[pp]*x13 - x17*x18) + x13*(grad_0_gt3[pp]*x13 - grad_1_gt0[pp]*x18 - x16*x19) - 1.0*x16*(-grad_0_gt5[pp]*x16 - grad_2_gt0[pp]*x18 + x13*x20) - x18*(-0.5*grad_0_gt0[pp]*x18 + x13*x32 - x16*x33) - x22*(-grad_2_gt5[pp]*x23 - x13*x27 + x18*x26) - x28*(grad_1_gt3[pp]*x29 - x16*x31 + x18*x30)) - grad_1_alpha[pp]*x50*x59 - grad_1_beta2[pp]*x8*(x11*(grad_1_gt5[pp]*x11 - grad_2_gt3[pp]*x28 + x13*x17) + x13*(-grad_0_gt3[pp]*x28 + grad_1_gt0[pp]*x13 + x11*x19) - 1.0*x16*(grad_0_gt5[pp]*x11 + grad_2_gt0[pp]*x13 - x20*x28) - x18*(grad_0_gt0[pp]*x29 + x11*x33 - x28*x32) - x22*(grad_2_gt5[pp]*x34 + x13*(-x24 + x25) + x27*x28) - x28*(-0.5*grad_1_gt3[pp]*x28 + x11*x31 - x13*x30)) - grad_2_alpha[pp]*x53*x59 - grad_2_beta2[pp]*x55*x8 + lambda[2]*(agrad_0_B2[pp]*beta0[pp] + agrad_1_B2[pp]*beta1[pp] + agrad_2_B2[pp]*beta2[pp]) - lambda[3]*x0 + x0 + x55*x8*(2.0*grad_0_beta0[pp]*x63 + 2.0*grad_1_beta1[pp]*x63 + 2.0*grad_2_beta2[pp]*x63) - x65*(grad_0_K[pp]*(-4*x14 + 4*x15) + 9.0*grad_0_chi[pp]*x41*x56*x64) - x65*(grad_1_K[pp]*(-4*x10 + 4*x9) + 9.0*grad_1_chi[pp]*x50*x56*x64) - x65*(grad_2_K[pp]*(4*x2 - 4*x21) + 9.0*grad_2_chi[pp]*x53*x56*x64);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            chi_rhs[pp] = 0.66666666666666663*K[pp]*alpha[pp]*chi[pp] + agrad_0_chi[pp]*beta0[pp] + agrad_1_chi[pp]*beta1[pp] + agrad_2_chi[pp]*beta2[pp] - 0.66666666666666663*chi[pp]*(grad_0_beta0[pp] + grad_1_beta1[pp] + grad_2_beta2[pp]);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At4[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt3[pp]*gt5[pp];
            double x6 = gt0[pp]*x5;
            double x7 = gt1[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt2[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = gt2[pp]*gt4[pp];
            double x16 = x14 - x15;
            double x17 = gt0[pp]*gt5[pp];
            double x18 = x17 - x4;
            double x19 = gt2[pp]*gt3[pp];
            double x20 = -x19 + x7;
            double x21 = gt0[pp]*gt3[pp];
            double x22 = x21 - x3;
            double x23 = -x2 + x5;
            double x24 = grad_1_gt5[pp]*x20;
            double x25 = grad_2_gt3[pp]*x16;
            double x26 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = 1.0/chi[pp];
            double x28 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x16 - grad_2_chi[pp]*x20;
            double x29 = 1.0*x10;
            double x30 = -grad_2_chi[pp];
            double x31 = grad_0_chi[pp]*x16 - grad_1_chi[pp]*x18 + grad_2_chi[pp]*x13;
            double x32 = 1.0*x27;
            double x33 = grad_2_gt3[pp]*x18;
            double x34 = 1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x16*x26 - x29*x33;
            double x35 = grad_2_gt3[pp]*x13;
            double x36 = -grad_1_chi[pp];
            double x37 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x38 = -x11 + x12;
            double x39 = grad_0_chi[pp]*x20 + grad_1_chi[pp]*x38 + grad_2_chi[pp]*x22;
            double x40 = x32*(1.0*gt4[pp]*x37*x39 + x36);
            double x41 = grad_0_gt3[pp]*x16;
            double x42 = -x41;
            double x43 = -grad_2_gt1[pp];
            double x44 = grad_0_gt4[pp] + grad_1_gt2[pp] + x43;
            double x45 = grad_1_gt0[pp]*x23 + x20*x44;
            double x46 = x42 + x45;
            double x47 = x23*x26 + x24;
            double x48 = -x25 + x47;
            double x49 = grad_0_gt4[pp] - grad_1_gt2[pp];
            double x50 = grad_2_gt1[pp] + x49;
            double x51 = grad_2_gt0[pp]*x23;
            double x52 = grad_0_gt5[pp]*x20;
            double x53 = -x16*x50 + x52;
            double x54 = x51 + x53;
            double x55 = pow(x9, -2);
            double x56 = x20*x55;
            double x57 = 4*x21 - 4*x3;
            double x58 = grad_1_gt5[pp]*x22;
            double x59 = x20*x26;
            double x60 = x35 - x58 - x59;
            double x61 = grad_2_gt5[pp]*x60;
            double x62 = 0.5*x61;
            double x63 = 0.5*grad_1_gt5[pp];
            double x64 = 1.0*grad_2_gt4[pp];
            double x65 = x63 - x64;
            double x66 = 0.5*grad_2_gt5[pp]*x22;
            double x67 = 0.5*grad_0_gt5[pp];
            double x68 = 1.0*grad_2_gt2[pp];
            double x69 = x67 - x68;
            double x70 = x20*x69;
            double x71 = x13*x65;
            double x72 = -x66 + x70 - x71;
            double x73 = x65*x72;
            double x74 = 0.25*grad_0_gt5[pp];
            double x75 = -x74;
            double x76 = -0.5*grad_2_gt2[pp] + x74;
            double x77 = 0.5*grad_0_gt4[pp];
            double x78 = 0.5*grad_2_gt1[pp];
            double x79 = (-0.5)*grad_1_gt2[pp] + x77 + x78;
            double x80 = -0.5*x19 + 0.5*x7;
            double x81 = grad_2_gt5[pp]*x80;
            double x82 = x16*x65;
            double x83 = -x23*x69 + x81 + x82;
            double x84 = x55*x57;
            double x85 = grad_2_gt0[pp]*x23;
            double x86 = x16*x50 - x52 - x85;
            double x87 = -x23*x26 - x24 + x25;
            double x88 = grad_1_gt0[pp]*x23;
            double x89 = x20*x44;
            double x90 = x41 - x88 - x89;
            double x91 = x23*x69 - x81 - x82;
            double x92 = 0.5*x15;
            double x93 = 0.5*x14 - x92;
            double x94 = 0.5*grad_0_gt3[pp];
            double x95 = 1.0*grad_1_gt1[pp];
            double x96 = x94 - x95;
            double x97 = 1.0*grad_1_gt4[pp];
            double x98 = 0.5*grad_2_gt3[pp];
            double x99 = x97 - x98;
            double x100 = x20*x99;
            double x101 = grad_1_gt3[pp]*x93 - x100 + x23*x96;
            double x102 = 0.5*grad_0_gt0[pp]*x23;
            double x103 = 1.0*grad_0_gt1[pp];
            double x104 = 0.5*grad_1_gt0[pp];
            double x105 = x103 - x104;
            double x106 = 1.0*grad_0_gt2[pp];
            double x107 = 0.5*grad_2_gt0[pp];
            double x108 = x106 - x107;
            double x109 = x108*x20;
            double x110 = -x102 + x105*x16 - x109;
            double x111 = 2.0*x55;
            double x112 = grad_0_gt3[pp]*x13;
            double x113 = grad_1_gt0[pp]*x20 + x22*x44;
            double x114 = -x112 + x113;
            double x115 = 0.25*grad_0_gt4[pp];
            double x116 = 0.25*grad_2_gt1[pp];
            double x117 = 0.25*grad_1_gt2[pp];
            double x118 = -x117;
            double x119 = x116 + x118;
            double x120 = x115 + x119;
            double x121 = grad_2_gt0[pp]*x20;
            double x122 = x13*x50;
            double x123 = grad_0_gt5[pp]*x22;
            double x124 = -x122 + x123;
            double x125 = x121 + x124;
            double x126 = x55*(-4*x2 + 4*x5);
            double x127 = 0.5*grad_0_gt1[pp];
            double x128 = 0.25*grad_1_gt0[pp];
            double x129 = -x128;
            double x130 = x127 + x129;
            double x131 = 0.5*grad_0_gt2[pp];
            double x132 = 0.25*grad_2_gt0[pp];
            double x133 = -x132;
            double x134 = x131 + x133;
            double x135 = 0.5*grad_1_gt3[pp];
            double x136 = x135*x18;
            double x137 = x16*x96;
            double x138 = x13*x99;
            double x139 = x136 + x137 - x138;
            double x140 = -0.25*grad_2_gt3[pp];
            double x141 = 0.5*grad_1_gt4[pp] + x140;
            double x142 = grad_1_gt5[pp]*x13;
            double x143 = x142 + x16*x26 - x33;
            double x144 = 0.5*x12;
            double x145 = 0.5*x11 - x144;
            double x146 = -x67 + x68;
            double x147 = grad_2_gt5[pp]*x145 + x146*x16 + x18*x65;
            double x148 = 0.5*grad_1_gt3[pp]*x147;
            double x149 = x141*x143 + x148;
            double x150 = 4*x11 - 4*x12;
            double x151 = x150*x55;
            double x152 = -x98;
            double x153 = x66 - x70 + x71;
            double x154 = 0.25*grad_1_gt5[pp];
            double x155 = x20*x26;
            double x156 = -x35 + x58;
            double x157 = x155 + x156;
            double x158 = grad_1_gt3[pp]*x145 + x20*x96 - x22*x99;
            double x159 = 0.5*grad_2_gt5[pp]*x158;
            double x160 = -x154*x157 + x159;
            double x161 = (-0.5)*grad_2_gt4[pp] + x154;
            double x162 = 0.25*x24;
            double x163 = 0.25*x25;
            double x164 = x162 - x163 + 0.25*x23*x26;
            double x165 = x101*x69;
            double x166 = x101*x67;
            double x167 = x157*x74;
            double x168 = -4*x19 + 4*x7;
            double x169 = x168*x55;
            double x170 = grad_2_gt0[pp]*x20;
            double x171 = -x170;
            double x172 = x158*x67;
            double x173 = -x114*x154 + x172;
            double x174 = 4*x14 - 4*x15;
            double x175 = x174*x55;
            double x176 = -x77;
            double x177 = 0.5*grad_1_gt2[pp];
            double x178 = 0.25*grad_0_gt3[pp];
            double x179 = x143*x178;
            double x180 = grad_0_gt3[pp]*x18;
            double x181 = grad_1_gt0[pp]*x16 + x13*x44 - x180;
            double x182 = 0.25*grad_2_gt3[pp]*x181;
            double x183 = x179 + x182;
            double x184 = -x116;
            double x185 = -x115;
            double x186 = x117 + x185;
            double x187 = -x178;
            double x188 = 0.25*x46;
            double x189 = 0.5*grad_2_gt0[pp]*x101;
            double x190 = x101*x108;
            double x191 = x141*x181;
            double x192 = x18*x50;
            double x193 = 0.25*grad_2_gt0[pp]*x16 + x13*x74 - 0.25*x192;
            double x194 = grad_1_gt3[pp]*x193;
            double x195 = x191 + x194;
            double x196 = -grad2_1_2_chi[pp];
            double x197 = 2.0*x27;
            double x198 = -x123 + x13*x50 + x171;
            double x199 = grad_1_gt0[pp]*x20;
            double x200 = x22*x44;
            double x201 = x112 - x199 - x200;
            double x202 = grad_0_gt0[pp]*x80;
            double x203 = x108*x22;
            double x204 = x105*x13 - x202 - x203;
            double x205 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x16 - x192;
            double x206 = -x136;
            double x207 = -x137 + x138 + x206;
            double x208 = x105*x18;
            double x209 = grad_0_gt0[pp]*x93 + x108*x13 - x208;
            double x210 = x209*x23;
            double x211 = pow(grad_1_chi[pp], 2);
            double x212 = 3.0*x27;
            double x213 = -x212;
            double x214 = x18*(2*grad2_1_1_chi[pp] + x211*x213);
            double x215 = pow(grad_0_chi[pp], 2);
            double x216 = x23*(2*grad2_0_0_chi[pp] - 3.0*x215*x27);
            double x217 = pow(grad_2_chi[pp], 2);
            double x218 = x22*(2*grad2_2_2_chi[pp] - x212*x217);
            double x219 = 2*x14 - 2*x15;
            double x220 = grad_0_chi[pp]*x212;
            double x221 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x220;
            double x222 = -2*x19 + x8;
            double x223 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x220;
            double x224 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x213)*(2*x11 - 2*x12);
            double x225 = x18*x207;
            double x226 = x13*x143 - x147*x22 + x16*x181 - 1.0*x20*x205 - x210 - x225;
            double x227 = x22*x72;
            double x228 = x13*x60 - x158*x18 + x16*x201 - 1.0*x198*x20 - x204*x23 - x227;
            double x229 = x110*x23;
            double x230 = -x101*x18 + x13*x87 + x16*x90 - 1.0*x20*x86 - x22*x91 - x229;
            double x231 = grad_1_gt5[pp]*x158;
            double x232 = 1.0*x231;
            double x233 = x55*(4*x17 - 4*x4);
            double x234 = (-0.5)*grad_2_gt1[pp] + x177 + x77;
            double x235 = x101*x234;
            double x236 = x101*x26;
            double x237 = x235 + 0.5*x236;
            double x238 = 0.25*grad_1_gt3[pp]*x143;
            double x239 = grad_2_gt3[pp]*x143;
            double x240 = 1.0*x56;
            double x241 = grad_1_gt5[pp]*x181;
            double x242 = x143*x50;
            double x243 = grad_2_gt3[pp]*x205;
            double x244 = x242 + x243;
            double x245 = x23*x55;
            double x246 = 1.0*x245;
            double x247 = x181*x44;
            double x248 = x181*x50;
            double x249 = grad_0_gt3[pp]*x205;
            double x250 = x248 + x249;
            double x251 = -x84;
            double x252 = 0.25*grad_1_gt5[pp]*x143;
            double x253 = -x142 - x16*x26 + x33;
            double x254 = x161*x253;
            double x255 = -x169;
            double x256 = -x161*x181;
            double x257 = 0.25*x44;
            double x258 = x147*x94;
            double x259 = x143*x257 + x258;
            double x260 = pow(chi[pp], -2);
            double x261 = 4.0*x10;
            double x262 = x13*x261;
            double x263 = -x262;
            double x264 = x16*x261;
            double x265 = -x264;
            double x266 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x265 + 1.0*grad2_0_2_gt4[pp]*x10*x168 + 2.0*grad2_1_1_gt4[pp]*x10*x18 + grad2_1_2_gt4[pp]*x263 + 2.0*grad2_2_2_gt4[pp]*x10*x22 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x260 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp];
            double x267 = -x240*(x241 + x244) - x246*(x247 + x250) + x251*(0.5*grad_2_gt3[pp]*x147 + x252 + x254) + x255*(x256 + x259) + x266;
            double x268 = grad_0_gt5[pp]*x198;
            double x269 = 3.0*x245;
            double x270 = grad_1_gt5[pp]*x60;
            double x271 = 3.0*x55;
            double x272 = x18*x271;
            double x273 = 6.0*x55;
            double x274 = 0.75*grad_0_gt4[pp];
            double x275 = 0.75*grad_1_gt2[pp];
            double x276 = x60*x74;
            double x277 = 0.25*grad_1_gt5[pp]*x198;
            double x278 = grad_2_gt3[pp]*x147;
            double x279 = 0.25*grad_2_gt3[pp]*x205;
            double x280 = 0.5*x44;
            double x281 = grad_1_gt5[pp]*x72;
            double x282 = grad_0_gt5[pp]*x72;
            double x283 = 2.0*x56;
            double x284 = 0.25*grad_2_gt5[pp]*x60;
            double x285 = 0.25*grad_2_gt5[pp]*x198;
            double x286 = x132*x87;
            double x287 = 0.25*x242;
            double x288 = x26*x91;
            double x289 = x26*x86;
            double x290 = 0.25*x289;
            double x291 = -x161*x205;
            double x292 = -x76*x87;
            double x293 = x53 + x85;
            double x294 = x293*x76;
            double x295 = (-0.5)*gt0[pp]*gt4[pp] + x144;
            double x296 = -x14 + x15;
            double x297 = -x63 + x64;
            double x298 = 2.0*x10;
            double x299 = -grad_0_chi[pp]*x230*x298 - grad_1_chi[pp]*x226*x298 - grad_2_chi[pp]*x228*x298 - x214 - x216 - x218 + x219*x221 - x222*x223 + x224;
            double x300 = -grad_0_chi[pp]*x20 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x22;
            double x301 = grad_0_chi[pp]*x296 + grad_1_chi[pp]*x18 + grad_2_chi[pp]*x38;
            double x302 = grad_0_gt3[pp]*x181;
            double x303 = x22*x271;
            double x304 = 0.75*grad_2_gt1[pp];
            double x305 = grad_2_gt3[pp]*x207;
            double x306 = grad_0_gt3[pp]*x207;
            double x307 = x16*x55;
            double x308 = 2.0*x307;
            double x309 = 0.25*grad_1_gt3[pp]*x181;
            double x310 = 0.25*grad_1_gt5[pp]*x201;
            double x311 = x128*x87;
            double x312 = x158*x44;
            double x313 = x44*x60;
            double x314 = 0.25*x313;
            double x315 = x26*x90;
            double x316 = 0.25*x315;
            double x317 = x141*x201;
            double x318 = -0.5*grad_1_gt1[pp] + x178;
            double x319 = -x318*x87;
            double x320 = x141*x60;
            double x321 = x42 + x88 + x89;
            double x322 = x318*x321;
            double x323 = (-0.5)*gt1[pp]*gt5[pp] + x92;
            double x324 = -x94 + x95;
            double x325 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x296 + grad_2_chi[pp]*x20;
            double x326 = 0.25*grad_0_gt3[pp]*x205;
            double x327 = x128*x86;
            double x328 = x132*x90;
            double x329 = x201*x74;
            double x330 = grad_0_gt3[pp]*x209;
            double x331 = 0.25*x248;
            double x332 = x198*x44;
            double x333 = 0.25*x332;
            double x334 = grad_0_gt5[pp]*x204;
            double x335 = 0.25*grad_0_gt0[pp]*x90;
            double x336 = 0.25*grad_0_gt0[pp]*x86;
            double x337 = x204*x44;
            double x338 = x130*x205;
            double x339 = x130*x181;
            double x340 = x134*x201;
            double x341 = x134*x198;
            double x342 = x74*x87 + x79*x91;
            double x343 = -x73;
            double x344 = x130*x86;
            double x345 = x134*x90;
            double x346 = x344 + x345;
            double x347 = 0.25*x247;
            double x348 = 0.25*grad_2_gt3[pp]*x143;
            double x349 = -x162 + x163 - 0.25*x23*x26;
            double x350 = x26*x349;
            double x351 = x349*x44 + x91*x94;
            double x352 = x120*x87 + x166;
            double x353 = x159 + x161*(x156 + x59);
            double x354 = 0.25*grad_1_gt5[pp]*x181 + x258;
            double x355 = x276 + x72*x79;
            double x356 = x105*x91 + x134*x87;
            double x357 = x120*x86;
            double x358 = 0.5*grad_1_gt0[pp]*x91;
            double x359 = x358 + x74*x90;
            double x360 = x234*x72;
            double x361 = -x161*x198;
            double x362 = 0.25*grad_2_gt5[pp]*x201;
            double x363 = x361 + x362;
            double x364 = x293*x318;
            double x365 = x130*x87 + x190;
            double x366 = x207*x234;
            double x367 = x141*x198;
            double x368 = x120*x60 + x172;
            double x369 = x207*x99;
            double x370 = x178*x87;
            double x371 = 0.25*grad_2_gt3[pp]*x60;
            double x372 = grad_1_gt5[pp]*x201;
            double x373 = grad_2_gt3[pp]*x198 + x372;
            double x374 = x44*x90;
            double x375 = grad_1_gt0[pp]*x87;
            double x376 = grad_0_gt3[pp]*x86 + x375;
            double x377 = grad_0_gt5[pp]*x201;
            double x378 = x198*x50;
            double x379 = x377 + x378;
            double x380 = 2.0*grad_0_gt4[pp]*x230*x55 + 2.0*grad_1_gt4[pp]*x226*x55 + 2.0*grad_2_gt4[pp]*x228*x55 + 1.0*gt4[pp]*x10*x27*x299 - x197*(0.5*grad_0_chi[pp]*x37*(grad_2_gt3[pp]*x296 + x47) + 0.5*grad_1_chi[pp]*x37*(grad_1_gt5[pp]*x38 + x26*x296 + x33) + 0.5*grad_2_chi[pp]*x37*(grad_2_gt3[pp]*x38 + x155 + x58) + x196);
            double x381 = 2.0*grad_2_alpha[pp];
            double x382 = 2.0*grad_1_alpha[pp];
            double x383 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x27*x28 - 2.0*x23*x26 - 2.0*x24 + 2.0*x25) + x381*(1.0*grad_2_gt3[pp]*x10*x13 - x29*x58 - x29*x59 + x40) + x382*(x32*(1.0*gt4[pp]*x301*x37 + x30) + x34);
            double x384 = x74*x86;
            double x385 = (-0.5)*grad_0_gt4[pp] + x177 + x78;
            double x386 = 0.25*grad_1_gt5[pp]*x205 + x147*x385;
            double x387 = -x69*x72;
            double x388 = 0.25*grad_1_gt0[pp]*x205 + x209*x234;
            double x389 = x108*x110;
            double x390 = 0.25*grad_2_gt0[pp]*x198;
            double x391 = -x147*x96 + 0.5*x205*x99;
            double x392 = x277 + x385*x72;
            double x393 = x257*x86 + x358;
            double x394 = x143*x26;
            double x395 = 0.25*x394;
            double x396 = -x60*x76;
            double x397 = x362 + x396;
            double x398 = x134*x86;
            double x399 = 0.5*grad_0_gt0[pp]*x91;
            double x400 = x132*x86 + x399;
            double x401 = x193*x50;
            double x402 = 0.5*grad_1_gt0[pp]*x147 + x193*x44;
            double x403 = x193*x26 + x209*x63;
            double x404 = 0.5*grad_2_gt5[pp]*x204;
            double x405 = x404 + x76*(x124 + x170);
            double x406 = 0.25*grad_0_gt0[pp]*x87;
            double x407 = x327 + x406;
            double x408 = x110*x234;
            double x409 = x130*x143;
            double x410 = -0.5*x205*x96 + x209*x99;
            double x411 = x134*x60;
            double x412 = 0.5*grad_1_gt5[pp]*x204;
            double x413 = 0.25*x198*x26 + x412;
            double x414 = x253*x318;
            double x415 = x191 + x414;
            double x416 = 0.25*x374;
            double x417 = grad_2_gt0[pp]*x60;
            double x418 = grad_1_gt0[pp]*x143;
            double x419 = x26*x60;
            double x420 = 1.0*x55;
            double x421 = x18*x420;
            double x422 = -grad_0_chi[pp]*x260;
            double x423 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x265 + 1.0*grad2_0_2_gt2[pp]*x10*x168 + 2.0*grad2_1_1_gt2[pp]*x10*x18 + grad2_1_2_gt2[pp]*x263 + 2.0*grad2_2_2_gt2[pp]*x10*x22 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x230*x55 + 2.0*grad_1_gt2[pp]*x226*x55 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x422 + 2.0*grad_2_gt2[pp]*x228*x55 + 1.0*gt2[pp]*x10*x27*x299 - x197*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x37*(x296*x50 + x51 + x52) + 0.5*grad_1_chi[pp]*x37*(grad_0_gt5[pp]*x38 + grad_2_gt0[pp]*x296 + x18*x50) + 0.5*grad_2_chi[pp]*x37*(x121 + x123 + x38*x50));
            double x424 = -grad_0_chi[pp];
            double x425 = 2.0*grad_0_alpha[pp];
            double x426 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x27*x31 + x205) + x381*(1.0*x10*x13*x50 - x123*x29 - x170*x29 + x32*(1.0*gt2[pp]*x37*x39 + x424)) + x425*(1.0*x10*x16*x50 - x29*x52 - x29*x85 + x32*(1.0*gt2[pp]*x325*x37 + x30));
            double x427 = 0.25*x378;
            double x428 = 0.25*grad_1_gt5[pp]*x60;
            double x429 = x321*x76;
            double x430 = x207*x79;
            double x431 = 0.25*grad_2_gt3[pp]*x198 + x172;
            double x432 = x178*x86;
            double x433 = grad_0_gt5[pp]*x90;
            double x434 = grad_2_gt0[pp]*x87;
            double x435 = x434 + x50*x86;
            double x436 = x198*x74;
            double x437 = x327 + x328;
            double x438 = x110*x385 + x406;
            double x439 = x132*x60 + x412;
            double x440 = 0.25*x419;
            double x441 = x13*x55;
            double x442 = x209*x98;
            double x443 = x128*x143 + x442;
            double x444 = -x126;
            double x445 = x361 + x396;
            double x446 = x105*x110;
            double x447 = x132*x201 + x204*x79;
            double x448 = 0.25*grad_1_gt0[pp]*x181;
            double x449 = 0.5*x201;
            double x450 = -x158*x69 - x449*x65;
            double x451 = x194 + x414;
            double x452 = x207*x385;
            double x453 = x189 + x311;
            double x454 = x120*x90;
            double x455 = x328 + x406;
            double x456 = x110*x79;
            double x457 = -x204*x65 - x449*x69;
            double x458 = 0.25*x181*x26 + x442;
            double x459 = 0.25*x112 - 0.25*x199 - 0.25*x200;
            double x460 = x44*x459;
            double x461 = 0.5*grad_2_gt0[pp]*x158 + x120*x201;
            double x462 = x130*x90;
            double x463 = 0.5*grad_0_gt0[pp]*x101;
            double x464 = x128*x90 + x463;
            double x465 = 0.5*grad_2_gt3[pp]*x204 + x26*x459;
            double x466 = x135*x209;
            double x467 = x318*(-grad_1_gt0[pp]*x16 - x13*x44 + x180) + x466;
            double x468 = x178*x90;
            double x469 = 0.25*grad_2_gt3[pp]*x201 + x158*x385;
            double x470 = -x207*x96;
            double x471 = x22*x420;
            double x472 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x265 + 1.0*grad2_0_2_gt1[pp]*x10*x168 + 2.0*grad2_1_1_gt1[pp]*x10*x18 + grad2_1_2_gt1[pp]*x263 + 2.0*grad2_2_2_gt1[pp]*x10*x22 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x230*x55 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x422 + 2.0*grad_1_gt1[pp]*x226*x55 + 2.0*grad_2_gt1[pp]*x228*x55 + 1.0*gt1[pp]*x10*x27*x299 - x197*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x37*(grad_0_gt3[pp]*x296 + x45) + 0.5*grad_1_chi[pp]*x37*(grad_1_gt0[pp]*x296 + x180 + x38*x44) + 0.5*grad_2_chi[pp]*x37*(grad_0_gt3[pp]*x38 + x113));
            double x473 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x27*x300 + 2.0*x112 - 2.0*x199 - 2.0*x200) + x382*(1.0*grad_1_gt0[pp]*x10*x16 + 1.0*x10*x13*x44 - x180*x29 + x32*(1.0*gt1[pp]*x301*x37 + x424)) + x425*(1.0*grad_0_gt3[pp]*x10*x16 - x29*x88 - x29*x89 + x32*(1.0*gt1[pp]*x325*x37 + x36));
            double x474 = 0.25*grad_0_gt3[pp]*x181;
            At_rhs12[pp] = At1[pp]*grad_2_beta0[pp] + At2[pp]*grad_1_beta0[pp] + At3[pp]*grad_2_beta1[pp] - 0.66666666666666663*At4[pp]*grad_0_beta0[pp] + 1.0*At4[pp]*grad_1_beta1[pp]*x0 + 1.0*At4[pp]*grad_2_beta2[pp]*x0 + At5[pp]*grad_1_beta2[pp] + agrad_0_At4[pp]*beta0[pp] + agrad_1_At4[pp]*beta1[pp] + agrad_2_At4[pp]*beta2[pp] - alpha[pp]*(2.0*At1[pp]*x10*(-At2[pp]*x23 + At4[pp]*x16 - At5[pp]*x20) + 2.0*At3[pp]*x10*(At2[pp]*x16 + At5[pp]*x13 + x1*x18) + 2.0*At4[pp]*x10*(-At2[pp]*x20 + At4[pp]*x13 - At5[pp]*x22) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt4[pp]*x111*(x101*x18 + x110*x23 - 1.0*x13*x87 - 1.0*x16*x90 + x20*x86 + x22*x91) - grad_1_gt4[pp]*x111*(-1.0*x13*x143 + x147*x22 - 1.0*x16*x181 + x18*x207 + x20*x205 + x210) - grad_2_gt4[pp]*x111*(-1.0*x13*x60 + x158*x18 - 1.0*x16*x201 + x198*x20 + x204*x23 + x22*x72) - gt4[pp]*x10*x32*(2.0*grad_0_chi[pp]*x10*x230 + 2.0*grad_1_chi[pp]*x10*x226 + 2.0*grad_2_chi[pp]*x10*x228 + x214 + x216 + x218 - x219*x221 + x222*x223 - x224) + x126*(0.5*grad_0_gt5[pp]*x114 + x120*x125) + x126*(0.25*grad_2_gt0[pp]*x46 + x130*x54 + x134*x46) + 2.0*x13*x55*(-grad_1_gt5[pp]*x139 + x239) + x151*(x139*x65 + x149) + x151*(x152*x153 + x160) + x151*(x157*x161 + x160) + x151*(-x120*x48 + x164*(x43 + x49) + x166) - x151*(x164*x44 + x165 + x83*x94) + x168*x55*(0.25*grad_2_gt5[pp]*x114 + x153*x79 + x167) - x169*(-0.25*grad_2_gt5[pp]*x114 + x125*x161 - x167) - x169*(-x105*x83 + x46*x76 + x48*(-x131 + x132)) + x175*(0.25*grad_2_gt3[pp]*(x122 - x123 + x171) + x173) + x175*(x139*(x176 - x177 + x78) + x183) + x175*(x139*(x176 + x177 - x78) + x195) + x175*(x157*(x184 + x186) + x173) + x175*(x187*x54 - x188*x44 + x189) + x175*(-x188*x26 + x190 + x48*(-x127 + x128)) - x197*(0.5*grad_0_chi[pp]*x10*x87 + 0.5*grad_1_chi[pp]*x10*x143 + 0.5*grad_2_chi[pp]*x10*x60 + x196) - x233*(x140*x157 + x232) - x233*(x187*x48 + x237) - x233*(x139*x152 - x139*x99 + x238) + x267 + x55*x57*(-x62 + x73) + x56*(grad_0_gt5[pp]*x46 + grad_2_gt0[pp]*x48 + x50*x54) - x84*(x48*x75 + x48*x76 - x79*x83)) - 12*grad2_1_2_alpha[pp] - grad_0_alpha[pp]*x29*(-6.0*gt4[pp]*x27*x28 + 6.0*x23*x26 + 6.0*x24 - 6.0*x25) + 6.0*grad_1_alpha[pp]*(x32*(1.0*gt4[pp]*x10*x31 + x30) + x34) - 6.0*grad_2_alpha[pp]*(1.0*grad_1_gt5[pp]*x10*x22 + 1.0*x10*x20*x26 - x29*x35 - x40) + 1.0*gt4[pp]*x10*(-x13*(alpha[pp]*(-x126*(x328 + x346) - x126*(x201*x67 + x427) + 2.0*x13*x55*(grad_1_gt5[pp]*x207 + x239) + x151*(x149 + x207*x297) + x151*(-x165 + x351) + x151*(x350 + x352) + x151*(x353 + x428) + x151*(x159 + x428 + x72*x98) - x169*(x276 + x363) - x169*(x355 + x362) - x169*(x356 + x429) + x175*(x183 + x366) + x175*(x195 + x430) + x175*(x310 + x368) + x175*(x310 + x431) + x175*(x316 + x365) + x175*(x189 + x416 + x432) - x233*(x232 + x371) - x233*(x237 + x370) - x233*(x207*x98 + x238 + x369) - x240*(x433 + x435) + x251*(x292 + x342) + x267 + x380 - x84*(x343 + x62)) + x383) - x13*(alpha[pp]*(-x126*(x327 + x346) - x126*(0.5*grad_0_gt3[pp]*x205 + x347) + 2.0*x13*x55*(grad_2_gt3[pp]*x72 + x270) + x151*(x149 + x348) + x151*(x350 + x351) + x151*(x353 + x72*x99) + x151*(x324*x91 + x352) + x151*(x148 + x207*x63 + x348) - x169*(x259 + x279) - x169*(x277 + x355) - x169*(x279 + x354) - x169*(x290 + x356) - x169*(x357 + x359) - x169*(x360 + x363) + x175*(x179 + x195) + x175*(x364 + x365) + x175*(x367 + x368) + x175*(x179 + x194 + x366) - x233*(0.5*grad_1_gt3[pp]*x143 + x369) - x233*(x235 + x319 + x370) - x233*(x158*x63 + x320 + x371) - x246*(x332 + x379) + x251*(x252 + 1.0*x278) + x266 + x307*(x313 + x373) + x307*(x374 + x376) + x380 - x84*(0.5*x288 + x342) - x84*(x284 + x343 + x63*x72)) + x383) - x16*(alpha[pp]*(-x126*(0.5*x337 + x447) - x126*(0.5*grad_1_gt0[pp]*x110 + x335 + x446) + x151*(x182 + x451) + x151*(x367 + x450) + x151*(x182 + x194 + x452) + x151*(x189 + x364 + x454) + 2.0*x16*x55*(grad_0_gt3[pp]*x110 + grad_1_gt0[pp]*x90) - x169*(x333 + x457) - x169*(x344 + x438) - x169*(x427 + x439) - x169*(x437 + x456) + x175*(x460 + x465) + x175*(x467 + x474) + x175*(x204*x99 + x461) + x175*(0.5*grad_1_gt0[pp]*x207 + x466 + x474) + x175*(x110*x324 + x462 + x463) - x233*(x317 + x469) - x233*(0.5*grad_1_gt3[pp]*x181 + x470) - x233*(0.5*grad_1_gt0[pp]*x101 + x322 + x468) + x251*(x277 + x445) + x251*(0.5*grad_2_gt3[pp]*x205 + x395) + x255*(x326 + x443) + x255*(x326 + x458) + x441*(x315 + x376) + x441*(x373 + x419) + x444*(1.0*x330 + x448) - x471*(x289 + x435) + x472) + x473) + x18*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x264 + 1.0*grad2_0_2_gt3[pp]*x10*x168 + 2.0*grad2_1_1_gt3[pp]*x10*x18 - grad2_1_2_gt3[pp]*x262 + 2.0*grad2_2_2_gt3[pp]*x10*x22 + 2.0*grad_0_gt3[pp]*x230*x55 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x225*x273 + 2.0*grad_1_gt3[pp]*x226*x55 + 2.0*grad_2_gt3[pp]*x228*x55 + 1.0*gt3[pp]*x10*x27*x299 - x101*x233*(x94 + x95) - x126*x201*(x119 + x274) - x126*x90*(x103 + x129) + 2.0*x13*x55*(grad_0_gt3[pp]*x87 + x236) + 2.0*x13*x55*(grad_1_gt3[pp]*x143 + x305) + 2.0*x13*x55*(grad_2_gt3[pp]*x60 + x231) + x150*x55*(x101*x50 + x319) + x150*x55*(-2*x158*x65 + x320) + x151*(x238 + 1.0*x305) - x158*x233*(x97 + x98) + 2.0*x16*x55*(grad_0_gt3[pp]*x90 + grad_1_gt0[pp]*x101) - x169*(x310 + x60*x79) - x169*(x311 + x79*x90) - x169*(0.5*grad_2_gt3[pp]*x181 + x179) - x169*(x105*x87 + x316) - x169*(x143*x94 + x182) - x169*(-1.0*x201*x65 + x314) + x174*x55*(2*x101*x105 + x322) + x174*x55*(x158*x50 + x317) + x175*(1.0*x306 + x309) - x197*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x37*(grad_1_gt3[pp]*x323 + x100 + x23*x324) + 1.0*grad_1_chi[pp]*x37*(x136 + x296*x324 + x38*x99) + 1.0*grad_2_chi[pp]*x37*(grad_1_gt3[pp]*x295 + x20*x324 + x22*x99)) - x211*x260 - x239*x303 - x269*x302 + x308*(grad_1_gt3[pp]*x181 + x306) + x308*(grad_2_gt3[pp]*x201 + x312) - x60*x84*(-x154 + x64) - x84*x87*(x115 + x118 + x304)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x27*x28 + x101) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x99 + 1.0*x10*x206 - x137*x29 + x32*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x301*x37)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x27*x300 + x158)) + x20*(alpha[pp]*(-x126*(1.0*x334 + x390) - x126*(0.5*grad_2_gt0[pp]*x110 + x336 + x389) + x151*(x256 + x391) + x151*(x277 + x397) + x151*(x362 + x392) + x151*(x393 + x429) - x169*(x405 + x436) - x169*(0.5*grad_2_gt0[pp]*x72 + x404 + x436) - x169*(x110*x146 + x398 + x399) + x175*(x329 + x413) + x175*(x329 + x439) + x175*(x331 + x410) + x175*(x345 + x438) + x175*(x347 + x443) + x175*(x408 + x437) - x233*(x182 + x415) - x233*(0.5*grad_1_gt5[pp]*x201 + x440) + x251*(x291 + x386) + x251*(0.5*grad_2_gt5[pp]*x198 + x387) + x255*(x401 + x403) + x255*(x209*x297 + x402) - x283*(grad_0_gt5[pp]*x110 + grad_2_gt0[pp]*x86) - x421*(x315 + x374 + x375) + x423 + x441*(x241 + x243 + x394) + x441*(x289 + x433 + x434) + x444*(x209*x79 + x388) - x84*(0.5*grad_2_gt0[pp]*x91 + x294 + x384)) + x426) + x20*(alpha[pp]*(-x126*(x338 + x388) - x126*(0.5*grad_0_gt0[pp]*x86 + x389) - x126*(x204*x67 + x341 + x390) + x151*(x276 + x392) + x151*(x286 + x359) + x151*(x286 + x393) + x151*(x287 + x391) + x151*(x354 + x395) + x151*(x360 + x397) - x169*(x398 + x400) - x169*(x401 + x402) - x169*(x105*x147 + x403) - x169*(x108*x72 + x405) - x169*(x110*x67 + x400) + x175*(x345 + x407) + x175*(x407 + x408) + x175*(x409 + x410) + x175*(x411 + x413) - x233*(x179 + x415) - x233*(0.5*grad_1_gt0[pp]*x87 + x416) + x251*(1.0*grad_2_gt0[pp]*x91 + x384) - x283*(grad_2_gt0[pp]*x72 + x268) + x307*(x247 + x249 + x418) + x307*(x332 + x377 + x417) - x421*(x313 + x372 + x419) + x423 - x84*(x147*x79 + x386) - x84*(x285 + x387 + x67*x72)) + x426) + x22*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x264 + 1.0*grad2_0_2_gt5[pp]*x10*x168 + 2.0*grad2_1_1_gt5[pp]*x10*x18 - grad2_1_2_gt5[pp]*x262 + 2.0*grad2_2_2_gt5[pp]*x10*x22 + 2.0*grad_0_gt5[pp]*x230*x55 + 2.0*grad_1_gt5[pp]*x226*x55 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x227*x273 + 2.0*grad_2_gt5[pp]*x228*x55 + 1.0*gt5[pp]*x10*x27*x299 - x126*x205*(x117 + x184 + x274) - x126*x86*(x106 + x133) + 2.0*x13*x55*(x281 + x61) + 2.0*x13*x55*(grad_0_gt5[pp]*x87 + x288) + 2.0*x13*x55*(grad_1_gt5[pp]*x143 + x278) - x143*x233*(x140 + x97) - x147*x84*(x63 + x64) + x150*x55*(x292 + x44*x91) + x150*x55*(2*x147*x99 + x254) + x151*(1.0*x281 + x284) - x169*(1.0*x282 + x285) - x169*(x294 + x91*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp])) - x169*(x147*x44 + x291) + x174*x55*(x108*x87 + x290) + x174*x55*(x205*x99 + x287) + x175*(x277 + x60*x67) + x175*(0.5*grad_1_gt5[pp]*x198 + x276) + x175*(x143*x280 + x279) + x175*(x280*x86 + x286) - x197*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x37*(x146*x23 + x296*x297 + x81) + 1.0*grad_1_chi[pp]*x37*(grad_2_gt5[pp]*x295 + x146*x296 + x18*x297) + 1.0*grad_2_chi[pp]*x37*(x146*x20 + x297*x38 + x66)) - x217*x260 - x233*x87*(x115 + x184 + x275) - x268*x269 - x270*x272 - x283*(grad_0_gt5[pp]*x86 + grad_2_gt0[pp]*x91) - x283*(grad_1_gt5[pp]*x205 + x147*x50) - x283*(grad_2_gt5[pp]*x198 + x282) - x84*x91*(x67 + x68)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x27*x28 + x91) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x27*x31 + x147) + 4*grad_2_alpha[pp]*(1.0*x10*x20*x69 - x10*x66 - x29*x71 + x32*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x37*x39))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x264 + 1.0*grad2_0_2_gt0[pp]*x10*x168 + 2.0*grad2_1_1_gt0[pp]*x10*x18 - grad2_1_2_gt0[pp]*x262 + 2.0*grad2_2_2_gt0[pp]*x10*x22 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x229*x273 + 2.0*grad_0_gt0[pp]*x230*x55 + 2.0*grad_1_gt0[pp]*x226*x55 - grad_1_gt0[pp]*x272*x90 + 2.0*grad_2_gt0[pp]*x228*x55 - grad_2_gt0[pp]*x303*x86 + 1.0*gt0[pp]*x10*x27*x299 - x126*x204*(x106 + x107) - x126*x209*(x103 + x104) + x151*(0.5*grad_1_gt0[pp]*x86 + x328) + x151*(0.5*grad_2_gt0[pp]*x90 + x327) + x151*(0.5*x181*x26 + x326) + x151*(0.5*x198*x26 + x329) + x151*(-1.0*x201*x69 + x333) + x151*(-1.0*x205*x96 + x331) - x169*(1.0*grad_2_gt0[pp]*x110 + x336) - x169*(x204*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp]) + x341) - x169*(x209*x26 + x338) + x174*x55*(x204*x26 + x340) + x174*x55*(-2*x209*x96 + x339) + x175*(1.0*grad_1_gt0[pp]*x110 + x335) - x181*x233*(x187 + x95) - x197*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x37*(0.5*grad_0_gt0[pp]*x23 + x105*x296 + x108*x20) + 1.0*grad_1_chi[pp]*x37*(grad_0_gt0[pp]*x323 + x108*x38 + x208) + 1.0*grad_2_chi[pp]*x37*(x105*x38 + x202 + x203)) - x198*x84*(x68 + x75) - x201*x233*(x116 + x185 + x275) - x205*x84*(x186 + x304) - x215*x260 - x283*(grad_0_gt0[pp]*x86 + grad_2_gt0[pp]*x110) - x283*(grad_1_gt0[pp]*x205 + x209*x50) - x283*(grad_2_gt0[pp]*x198 + x334) + x308*(grad_0_gt0[pp]*x90 + grad_1_gt0[pp]*x110) + x308*(grad_1_gt0[pp]*x181 + x330) + x308*(grad_2_gt0[pp]*x201 + x337)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(-x10*x102 + 1.0*x10*x105*x16 - x109*x29 + x32*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x325*x37)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x27*x31 + x209) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x27*x300 + x204)) + x296*(alpha[pp]*(-x126*(x340 + x447) - x126*(0.5*grad_0_gt0[pp]*x90 + x446) - x126*(x209*x94 + x339 + x448) + x151*(x183 + x452) + x151*(x314 + x450) + x151*(x430 + x451) + x151*(x431 + x440) + x151*(x432 + x453) + x151*(x453 + x454) - x169*(x344 + x455) - x169*(x409 + x458) - x169*(x411 + x457) - x169*(x455 + x456) + x175*(x460 + x461) + x175*(x462 + x464) + x175*(x105*x207 + x467) + x175*(x108*x158 + x465) + x175*(x110*x94 + x464) - x233*(0.5*x312 + x469) - x233*(1.0*grad_1_gt0[pp]*x101 + x468) - x233*(x207*x94 + x309 + x470) - x240*(x250 + x418) - x240*(x379 + x417) + x251*(x276 + x445) + x308*(grad_1_gt0[pp]*x207 + x302) - x471*(x244 + x394) + x472 - x84*(0.5*grad_2_gt0[pp]*x87 + x357)) + x473)));
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = pow(gt1[pp], 2);
            double x2 = pow(gt2[pp], 2);
            double x3 = gt0[pp]*gt3[pp];
            double x4 = gt1[pp]*gt4[pp];
            double x5 = 2*x4;
            double x6 = gt0[pp]*x0 - gt2[pp]*x5 + gt3[pp]*x2 + gt5[pp]*x1 - gt5[pp]*x3;
            double x7 = pow(x6, -2);
            double x8 = gt0[pp]*gt4[pp];
            double x9 = gt1[pp]*gt2[pp];
            double x10 = x8 - x9;
            double x11 = -x1 + x3;
            double x12 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x13 = gt2[pp]*gt3[pp];
            double x14 = -x13 + x4;
            double x15 = gt1[pp]*gt5[pp];
            double x16 = gt2[pp]*gt4[pp];
            double x17 = x15 - x16;
            double x18 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x19 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x20 = 0.5*grad_0_gt5[pp];
            double x21 = 1.0*grad_2_gt2[pp];
            double x22 = x20 - x21;
            double x23 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x24 = gt0[pp]*gt5[pp];
            double x25 = -x2 + x24;
            double x26 = 0.5*x8 - 0.5*x9;
            double x27 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x28 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x29 = gt3[pp]*gt5[pp] - x0;
            double x30 = -0.5*x13 + 0.5*x4;
            double x31 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x32 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x33 = pow(x6, -3);
            double x34 = -0.5*grad_1_gt3[pp]*x25 + x10*x28 - x17*x27;
            double x35 = pow(x10, 2);
            double x36 = pow(x17, 2);
            double x37 = 2*x10;
            double x38 = 2*At1[pp];
            double x39 = At0[pp]*x36 + 2*At2[pp]*x10*x17 + At3[pp]*pow(x25, 2) - At4[pp]*x25*x37 + At5[pp]*x35 - x17*x25*x38;
            double x40 = grad_1_gt5[pp]*x10 - grad_2_gt3[pp]*x25 + x12*x17;
            double x41 = -grad_0_gt3[pp]*x25 + grad_1_gt0[pp]*x17 + x10*x18;
            double x42 = grad_0_gt5[pp]*x10 + grad_2_gt0[pp]*x17 - x19*x25;
            double x43 = grad_2_gt5[pp]*x26 + x17*(-x20 + x21) + x23*x25;
            double x44 = 0.5*x15 - 0.5*x16;
            double x45 = grad_0_gt0[pp]*x44 + x10*x32 - x25*x31;
            double x46 = x10*x40 - x11*x43 - 1.0*x14*x42 + x17*x41 - x25*x34 - x29*x45;
            double x47 = At1[pp]*x29;
            double x48 = x10*x14;
            double x49 = x14*x17;
            double x50 = At3[pp]*x25;
            double x51 = -At0[pp]*x17*x29 + At1[pp]*x36 - At2[pp]*x10*x29 - At2[pp]*x49 + At4[pp]*x10*x17 + At4[pp]*x14*x25 - At5[pp]*x48 - x17*x50 + x25*x47;
            double x52 = 2*x7;
            double x53 = x11*x17;
            double x54 = -At0[pp]*x49 + At1[pp]*x10*x17 + At1[pp]*x14*x25 - At2[pp]*x48 - At2[pp]*x53 + At4[pp]*x11*x25 + At4[pp]*x35 - At5[pp]*x10*x11 - x10*x50;
            double x55 = 1.0/chi[pp];
            double x56 = 1.0/x6;
            double x57 = 0.33333333333333331*x56;
            double x58 = alpha[pp]*x57;
            double x59 = 0.33333333333333331;
            double x60 = pow(x14, 2);
            double x61 = 1.0*x56;
            double x62 = x25*x57;
            double x63 = agrad_0_Gt1[pp]*beta0[pp] + agrad_1_Gt1[pp]*beta1[pp] + agrad_2_Gt1[pp]*beta2[pp];
            B_rhs1[pp] = (-B1[pp])*eta + 2*alpha[pp]*x33*x34*x39 + 2.0*alpha[pp]*x33*x40*x54 + 2.0*alpha[pp]*x33*x41*x51 + 2.0*alpha[pp]*x33*x42*(At0[pp]*x14*x29 - At1[pp]*x49 + At2[pp]*x11*x29 + At2[pp]*x60 + At3[pp]*x10*x17 - At4[pp]*x48 - At4[pp]*x53 + At5[pp]*x11*x14 - x10*x47) + 2*alpha[pp]*x33*x43*(At0[pp]*x60 + 2*At2[pp]*x11*x14 + At3[pp]*x35 - At4[pp]*x11*x37 + At5[pp]*pow(x11, 2) - x38*x48) + 2*alpha[pp]*x33*x45*(At0[pp]*pow(x29, 2) + 2*At2[pp]*x14*x29 + At3[pp]*x36 - 2*At4[pp]*x49 + At5[pp]*x60 - 2*x17*x47) + 1.0*grad2_0_0_beta0[pp]*x17*x56*x59 - grad2_0_0_beta1[pp]*x29*x61 - grad2_0_1_beta0[pp]*x62 + 7.0*grad2_0_1_beta1[pp]*x17*x56*x59 + 1.0*grad2_0_2_beta0[pp]*x10*x56*x59 - grad2_0_2_beta1[pp]*x61*(-2*x13 + x5) + 1.0*grad2_0_2_beta2[pp]*x17*x56*x59 - 1.3333333333333333*grad2_1_1_beta1[pp]*x25*x56 + 7.0*grad2_1_2_beta1[pp]*x10*x56*x59 - grad2_1_2_beta2[pp]*x62 - grad2_2_2_beta1[pp]*x11*x61 + 1.0*grad2_2_2_beta2[pp]*x10*x56*x59 - grad_0_alpha[pp]*x51*x52 - grad_0_beta1[pp]*x7*(x10*(-grad_1_gt5[pp]*x14 + grad_2_gt3[pp]*x17 - x12*x29) - x11*(-grad_2_gt5[pp]*x30 - x17*x23 + x22*x29) - 1.0*x14*(-grad_0_gt5[pp]*x14 - grad_2_gt0[pp]*x29 + x17*x19) + x17*(grad_0_gt3[pp]*x17 - grad_1_gt0[pp]*x29 - x14*x18) - x25*(grad_1_gt3[pp]*x44 - x14*x28 + x27*x29) - x29*(-0.5*grad_0_gt0[pp]*x29 - x14*x32 + x17*x31)) - grad_1_alpha[pp]*x39*x52 - grad_1_beta1[pp]*x46*x7 - grad_2_alpha[pp]*x52*x54 - grad_2_beta1[pp]*x7*(x10*(-grad_1_gt5[pp]*x11 + grad_2_gt3[pp]*x10 - x12*x14) - x11*(-0.5*grad_2_gt5[pp]*x11 - x10*x23 + x14*x22) - 1.0*x14*(-grad_0_gt5[pp]*x11 - grad_2_gt0[pp]*x14 + x10*x19) + x17*(grad_0_gt3[pp]*x10 - grad_1_gt0[pp]*x14 - x11*x18) - x25*(grad_1_gt3[pp]*x26 - x11*x28 + x14*x27) - x29*(-grad_0_gt0[pp]*x30 + x10*x31 - x11*x32)) + lambda[2]*(agrad_0_B1[pp]*beta0[pp] + agrad_1_B1[pp]*beta1[pp] + agrad_2_B1[pp]*beta2[pp]) - lambda[3]*x63 + x46*x7*(2.0*grad_0_beta0[pp]*x59 + 2.0*grad_1_beta1[pp]*x59 + 2.0*grad_2_beta2[pp]*x59) - x58*(grad_0_K[pp]*(4*x15 - 4*x16) + 9.0*grad_0_chi[pp]*x51*x55*x56) - x58*(-grad_1_K[pp]*(-4*x2 + 4*x24) + 9.0*grad_1_chi[pp]*x39*x55*x56) - x58*(grad_2_K[pp]*(4*x8 - 4*x9) + 9.0*grad_2_chi[pp]*x54*x55*x56) + x63;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            b_rhs2[pp] = B2[pp]*(0.75*alpha[pp]*lambda_f[1] + 0.75*lambda_f[0]) + lambda[1]*(agrad_0_beta2[pp]*beta0[pp] + agrad_1_beta2[pp]*beta1[pp] + agrad_2_beta2[pp]*beta2[pp]);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            gt_rhs01[pp] = 2*(-At1[pp])*alpha[pp] + agrad_0_gt1[pp]*beta0[pp] + agrad_1_gt1[pp]*beta1[pp] + agrad_2_gt1[pp]*beta2[pp] + 1.0*grad_0_beta0[pp]*gt1[pp]*x0 + grad_0_beta1[pp]*gt3[pp] + grad_0_beta2[pp]*gt4[pp] + grad_1_beta0[pp]*gt0[pp] + 1.0*grad_1_beta1[pp]*gt1[pp]*x0 + grad_1_beta2[pp]*gt2[pp] - 0.66666666666666663*grad_2_beta2[pp]*gt1[pp];
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.66666666666666663*gt5[pp];
            gt_rhs22[pp] = 2*(-At5[pp])*alpha[pp] + agrad_0_gt5[pp]*beta0[pp] + agrad_1_gt5[pp]*beta1[pp] + agrad_2_gt5[pp]*beta2[pp] - grad_0_beta0[pp]*x0 - grad_1_beta1[pp]*x0 + 2*grad_2_beta0[pp]*gt2[pp] + 2*grad_2_beta1[pp]*gt4[pp] + 1.3333333333333333*grad_2_beta2[pp]*gt5[pp];
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            gt_rhs12[pp] = 2*(-At4[pp])*alpha[pp] + agrad_0_gt4[pp]*beta0[pp] + agrad_1_gt4[pp]*beta1[pp] + agrad_2_gt4[pp]*beta2[pp] - 0.66666666666666663*grad_0_beta0[pp]*gt4[pp] + grad_1_beta0[pp]*gt2[pp] + 1.0*grad_1_beta1[pp]*gt4[pp]*x0 + grad_1_beta2[pp]*gt5[pp] + grad_2_beta0[pp]*gt1[pp] + grad_2_beta1[pp]*gt3[pp] + 1.0*grad_2_beta2[pp]*gt4[pp]*x0;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            b_rhs1[pp] = B1[pp]*(0.75*alpha[pp]*lambda_f[1] + 0.75*lambda_f[0]) + lambda[1]*(agrad_0_beta1[pp]*beta0[pp] + agrad_1_beta1[pp]*beta1[pp] + agrad_2_beta1[pp]*beta2[pp]);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            b_rhs0[pp] = B0[pp]*(0.75*alpha[pp]*lambda_f[1] + 0.75*lambda_f[0]) + lambda[1]*(agrad_0_beta0[pp]*beta0[pp] + agrad_1_beta0[pp]*beta1[pp] + agrad_2_beta0[pp]*beta2[pp]);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = pow(gt4[pp], 2);
            double x1 = gt3[pp]*gt5[pp] - x0;
            double x2 = pow(gt1[pp], 2);
            double x3 = pow(gt2[pp], 2);
            double x4 = gt0[pp]*gt3[pp];
            double x5 = gt1[pp]*gt4[pp];
            double x6 = 2*x5;
            double x7 = gt0[pp]*x0 - gt2[pp]*x6 + gt3[pp]*x3 + gt5[pp]*x2 - gt5[pp]*x4;
            double x8 = 1.0/x7;
            double x9 = 1.0*x8;
            double x10 = -x2 + x4;
            double x11 = 0.33333333333333331;
            double x12 = gt0[pp]*gt4[pp];
            double x13 = gt1[pp]*gt2[pp];
            double x14 = x12 - x13;
            double x15 = gt2[pp]*gt3[pp];
            double x16 = gt1[pp]*gt5[pp];
            double x17 = gt2[pp]*gt4[pp];
            double x18 = x16 - x17;
            double x19 = gt0[pp]*gt5[pp];
            double x20 = x19 - x3;
            double x21 = 0.33333333333333331*x8;
            double x22 = x20*x21;
            double x23 = pow(x14, 2);
            double x24 = pow(x18, 2);
            double x25 = x14*x18;
            double x26 = At4[pp]*x20;
            double x27 = 2*x14;
            double x28 = 2*At1[pp];
            double x29 = At0[pp]*x24 + 2*At2[pp]*x25 + At3[pp]*pow(x20, 2) + At5[pp]*x23 - x18*x20*x28 - x26*x27;
            double x30 = pow(x7, -2);
            double x31 = 2*x30;
            double x32 = pow(x7, -3);
            double x33 = 0.5*x12 - 0.5*x13;
            double x34 = 0.5*grad_0_gt5[pp];
            double x35 = 1.0*grad_2_gt2[pp];
            double x36 = 0.5*grad_1_gt5[pp] - 1.0*grad_2_gt4[pp];
            double x37 = grad_2_gt5[pp]*x33 + x18*(-x34 + x35) + x20*x36;
            double x38 = -x15 + x5;
            double x39 = pow(x38, 2);
            double x40 = x14*x38;
            double x41 = 0.5*grad_1_gt3[pp]*x20;
            double x42 = 0.5*grad_0_gt3[pp] - 1.0*grad_1_gt1[pp];
            double x43 = x18*x42;
            double x44 = 1.0*grad_1_gt4[pp] - 0.5*grad_2_gt3[pp];
            double x45 = x14*x44;
            double x46 = alpha[pp]*x32;
            double x47 = 0.5*x16 - 0.5*x17;
            double x48 = 1.0*grad_0_gt2[pp] - 0.5*grad_2_gt0[pp];
            double x49 = 1.0*grad_0_gt1[pp] - 0.5*grad_1_gt0[pp];
            double x50 = grad_0_gt0[pp]*x47 + x14*x48 - x20*x49;
            double x51 = At1[pp]*x1;
            double x52 = x18*x38;
            double x53 = 9.0*x8/chi[pp];
            double x54 = x20*x38;
            double x55 = At0[pp]*x18*x38 - At1[pp]*x25 - At1[pp]*x54 + At2[pp]*x10*x18 + At2[pp]*x14*x38 + At3[pp]*x14*x20 - At4[pp]*x23 + At5[pp]*x10*x14 - x10*x26;
            double x56 = At0[pp]*x1*x18 - At1[pp]*x24 + At2[pp]*x1*x14 + At2[pp]*x18*x38 + At3[pp]*x18*x20 - At4[pp]*x25 - At4[pp]*x54 + At5[pp]*x14*x38 - x20*x51;
            double x57 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x58 = grad_1_gt5[pp]*x14 - grad_2_gt3[pp]*x20 + x18*x57;
            double x59 = 2.0*x46;
            double x60 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x61 = grad_0_gt5[pp]*x14 + grad_2_gt0[pp]*x18 - x20*x60;
            double x62 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x63 = -grad_0_gt3[pp]*x20 + grad_1_gt0[pp]*x18 + x14*x62;
            double x64 = alpha[pp]*x21;
            double x65 = 1.0*x14;
            double x66 = 1.0*x18;
            double x67 = x30*(x1*x50 + x10*x37 + x20*(-x41 - x43 + x45) + x38*x61 - x58*x65 - x63*x66);
            double x68 = x34 - x35;
            double x69 = -0.5*x15 + 0.5*x5;
            Gt_rhs1[pp] = agrad_0_Gt1[pp]*beta0[pp] + agrad_1_Gt1[pp]*beta1[pp] + agrad_2_Gt1[pp]*beta2[pp] + 1.0*alpha[pp]*x11*x8*(grad_1_K[pp]*(4*x19 - 4*x3) - grad_1_chi[pp]*x29*x53) + 2*alpha[pp]*x32*x37*(At0[pp]*x39 + 2*At2[pp]*x10*x38 + At3[pp]*x23 - At4[pp]*x10*x27 + At5[pp]*pow(x10, 2) - x28*x40) + 2*alpha[pp]*x32*x50*(At0[pp]*pow(x1, 2) + 2*At2[pp]*x1*x38 + At3[pp]*x24 - 2*At4[pp]*x52 + At5[pp]*x39 - 2*x18*x51) + 2.0*alpha[pp]*x32*x61*(At0[pp]*x1*x38 - At1[pp]*x52 + At2[pp]*x1*x10 + At2[pp]*x39 + At3[pp]*x14*x18 - At4[pp]*x10*x18 - At4[pp]*x40 + At5[pp]*x10*x38 - x14*x51) + 1.0*grad2_0_0_beta0[pp]*x11*x18*x8 - grad2_0_0_beta1[pp]*x1*x9 - grad2_0_1_beta0[pp]*x22 + 7.0*grad2_0_1_beta1[pp]*x11*x18*x8 + 1.0*grad2_0_2_beta0[pp]*x11*x14*x8 - grad2_0_2_beta1[pp]*x9*(-2*x15 + x6) + 1.0*grad2_0_2_beta2[pp]*x11*x18*x8 - 1.3333333333333333*grad2_1_1_beta1[pp]*x20*x8 + 7.0*grad2_1_2_beta1[pp]*x11*x14*x8 - grad2_1_2_beta2[pp]*x22 - grad2_2_2_beta1[pp]*x10*x9 + 1.0*grad2_2_2_beta2[pp]*x11*x14*x8 + grad_0_alpha[pp]*x31*x56 + grad_0_beta1[pp]*x30*(x1*(-0.5*grad_0_gt0[pp]*x1 + x18*x49 - x38*x48) + x10*(-grad_2_gt5[pp]*x69 + x1*x68 - x18*x36) + x20*(grad_1_gt3[pp]*x47 + x1*x42 - x38*x44) + x38*(-grad_0_gt5[pp]*x38 - grad_2_gt0[pp]*x1 + x18*x60) - x65*(-grad_1_gt5[pp]*x38 + grad_2_gt3[pp]*x18 - x1*x57) - x66*(grad_0_gt3[pp]*x18 - grad_1_gt0[pp]*x1 - x38*x62)) - grad_1_alpha[pp]*x29*x31 + grad_1_beta1[pp]*x67 + 2*grad_2_alpha[pp]*x30*x55 + grad_2_beta1[pp]*x30*(x1*(-grad_0_gt0[pp]*x69 - x10*x48 + x14*x49) + x10*(-0.5*grad_2_gt5[pp]*x10 - x14*x36 + x38*x68) + x20*(grad_1_gt3[pp]*x33 - x10*x44 + x38*x42) + x38*(-grad_0_gt5[pp]*x10 - grad_2_gt0[pp]*x38 + x14*x60) - x65*(-grad_1_gt5[pp]*x10 + grad_2_gt3[pp]*x14 - x38*x57) - x66*(grad_0_gt3[pp]*x14 - grad_1_gt0[pp]*x38 - x10*x62)) - 2*x29*x46*(x41 + x43 - x45) - x55*x58*x59 - x56*x59*x63 - x64*(grad_0_K[pp]*(4*x16 - 4*x17) - grad_0_chi[pp]*x53*x56) - x64*(grad_2_K[pp]*(4*x12 - 4*x13) - grad_2_chi[pp]*x53*x55) - x67*(2.0*grad_0_beta0[pp]*x11 + 2.0*grad_1_beta1[pp]*x11 + 2.0*grad_2_beta2[pp]*x11);
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At3[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt5[pp];
            double x6 = gt3[pp]*x5;
            double x7 = gt2[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt1[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x14 - x7;
            double x16 = -x4 + x5;
            double x17 = gt1[pp]*gt4[pp];
            double x18 = gt2[pp]*gt3[pp];
            double x19 = x17 - x18;
            double x20 = gt0[pp]*gt3[pp];
            double x21 = x20 - x3;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = grad_0_chi[pp]*x19 + grad_2_chi[pp]*x21;
            double x25 = 1.0/chi[pp];
            double x26 = 0.5*gt3[pp]*x25;
            double x27 = 0.5*x12;
            double x28 = 0.5*x11 - x27;
            double x29 = 0.5*grad_0_gt3[pp];
            double x30 = 1.0*grad_1_gt1[pp];
            double x31 = -x30;
            double x32 = x29 + x31;
            double x33 = 1.0*grad_1_gt4[pp];
            double x34 = 0.5*grad_2_gt3[pp];
            double x35 = x33 - x34;
            double x36 = grad_1_gt3[pp]*x28 + x19*x32 - x21*x35;
            double x37 = grad_0_chi[pp]*x23 + grad_2_chi[pp]*x19;
            double x38 = 0.5*x7;
            double x39 = 0.5*x14 - x38;
            double x40 = x19*x35;
            double x41 = grad_1_gt3[pp]*x39 + x23*x32 - x40;
            double x42 = -1.0*grad_1_chi[pp];
            double x43 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x16 + grad_2_chi[pp]*x13;
            double x44 = 1.0*x25;
            double x45 = 0.5*grad_1_gt3[pp];
            double x46 = x16*x45;
            double x47 = -x46;
            double x48 = x15*x32;
            double x49 = 1.0*x10;
            double x50 = 1.0*x10*x13*x35 + 1.0*x10*x47 - x48*x49;
            double x51 = grad_0_gt3[pp]*x16;
            double x52 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x53 = grad_1_gt0[pp]*x15 + x13*x52 - x51;
            double x54 = grad_1_gt3[pp]*x53;
            double x55 = x13*x35;
            double x56 = x46 + x48 - x55;
            double x57 = grad_0_gt3[pp]*x56;
            double x58 = pow(x9, -2);
            double x59 = x15*x58;
            double x60 = 2.0*x59;
            double x61 = -grad_0_gt3[pp];
            double x62 = grad_0_gt3[pp]*x15;
            double x63 = -x62;
            double x64 = grad_1_gt0[pp]*x23 + x19*x52;
            double x65 = x63 + x64;
            double x66 = grad_1_gt0[pp]*x41;
            double x67 = grad_0_gt3[pp]*x13;
            double x68 = grad_1_gt0[pp]*x19;
            double x69 = x21*x52;
            double x70 = x67 - x68 - x69;
            double x71 = x36*x52;
            double x72 = grad_0_gt5[pp]*x19;
            double x73 = grad_2_gt0[pp]*x23;
            double x74 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x75 = x15*x74 - x72 - x73;
            double x76 = grad_2_gt3[pp]*x15;
            double x77 = grad_1_gt5[pp]*x19;
            double x78 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x79 = -x23*x78 + x76 - x77;
            double x80 = grad_1_gt0[pp]*x23;
            double x81 = x19*x52;
            double x82 = x62 - x80 - x81;
            double x83 = 0.5*x17 - 0.5*x18;
            double x84 = grad_2_gt5[pp]*x83;
            double x85 = 0.5*grad_0_gt5[pp];
            double x86 = 1.0*grad_2_gt2[pp];
            double x87 = x85 - x86;
            double x88 = 0.5*grad_1_gt5[pp];
            double x89 = 1.0*grad_2_gt4[pp];
            double x90 = -x89;
            double x91 = x88 + x90;
            double x92 = -x15*x91 + x23*x87 - x84;
            double x93 = 0.5*grad_0_gt0[pp]*x23;
            double x94 = 1.0*grad_0_gt1[pp];
            double x95 = 0.5*grad_1_gt0[pp];
            double x96 = x94 - x95;
            double x97 = 1.0*grad_0_gt2[pp];
            double x98 = 0.5*grad_2_gt0[pp];
            double x99 = x97 - x98;
            double x100 = x19*x99;
            double x101 = -x100 + x15*x96 - x93;
            double x102 = 2.0*x58;
            double x103 = grad_1_gt5[pp]*x13;
            double x104 = grad_2_gt3[pp]*x16;
            double x105 = x103 - x104 + x15*x78;
            double x106 = 0.25*grad_1_gt3[pp]*x105;
            double x107 = grad_2_gt3[pp]*x56;
            double x108 = 4*x11 - 4*x12;
            double x109 = x108*x58;
            double x110 = 0.25*grad_0_gt3[pp];
            double x111 = -0.5*grad_1_gt1[pp] + x110;
            double x112 = x41*x74;
            double x113 = -0.25*grad_2_gt3[pp];
            double x114 = 0.5*grad_1_gt4[pp] + x113;
            double x115 = x19*x78;
            double x116 = grad_2_gt3[pp]*x13;
            double x117 = grad_1_gt5[pp]*x21;
            double x118 = -x116 + x117;
            double x119 = x115 + x118;
            double x120 = 2*x36*x91;
            double x121 = 4*x17 - 4*x18;
            double x122 = x67 - x68 - x69;
            double x123 = x19*x78;
            double x124 = x116 - x117 - x123;
            double x125 = x124*x52;
            double x126 = 0.25*x125;
            double x127 = x23*x78 + x77;
            double x128 = x127 - x76;
            double x129 = 0.25*grad_1_gt0[pp];
            double x130 = 0.5*grad_0_gt4[pp];
            double x131 = 0.5*grad_2_gt1[pp];
            double x132 = (-0.5)*grad_1_gt2[pp] + x130 + x131;
            double x133 = grad_1_gt0[pp]*x19 + x21*x52;
            double x134 = x133 - x67;
            double x135 = 0.25*x78;
            double x136 = 0.25*grad_1_gt3[pp]*x53;
            double x137 = 4*x14 - 4*x7;
            double x138 = x137*x58;
            double x139 = 2*x41*x96;
            double x140 = x36*x74;
            double x141 = -x129;
            double x142 = x141 + x94;
            double x143 = -4*x2 + 4*x22;
            double x144 = 0.75*grad_0_gt4[pp];
            double x145 = 0.25*grad_2_gt1[pp];
            double x146 = 0.25*grad_1_gt2[pp];
            double x147 = -x146;
            double x148 = x145 + x147;
            double x149 = x144 + x148;
            double x150 = -grad2_1_1_chi[pp];
            double x151 = x47 - x48 + x55;
            double x152 = 2.0*x25;
            double x153 = grad_2_gt0[pp]*x19;
            double x154 = grad_0_gt5[pp]*x21;
            double x155 = x13*x74 - x153 - x154;
            double x156 = 0.5*grad_2_gt5[pp]*x21;
            double x157 = x13*x91;
            double x158 = -x156 - x157 + x19*x87;
            double x159 = grad_0_gt0[pp]*x83;
            double x160 = x21*x99;
            double x161 = x13*x96 - x159 - x160;
            double x162 = grad_0_gt5[pp]*x13;
            double x163 = x16*x74;
            double x164 = grad_2_gt0[pp]*x15 + x162 - x163;
            double x165 = -x85 + x86;
            double x166 = grad_2_gt5[pp]*x28 + x15*x165 + x16*x91;
            double x167 = x16*x96;
            double x168 = grad_0_gt0[pp]*x39 + x13*x99 - x167;
            double x169 = x168*x23;
            double x170 = pow(grad_1_chi[pp], 2);
            double x171 = 3.0*x25;
            double x172 = -x171;
            double x173 = x16*(2*grad2_1_1_chi[pp] + x170*x172);
            double x174 = pow(grad_0_chi[pp], 2);
            double x175 = x23*(2*grad2_0_0_chi[pp] - 3.0*x174*x25);
            double x176 = pow(grad_2_chi[pp], 2);
            double x177 = x21*(2*grad2_2_2_chi[pp] - x171*x176);
            double x178 = 2*x14 - x8;
            double x179 = grad_0_chi[pp]*x171;
            double x180 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x179;
            double x181 = 2*x17 - 2*x18;
            double x182 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x179;
            double x183 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x172)*(2*x11 - 2*x12);
            double x184 = x151*x16;
            double x185 = x105*x13 + x15*x53 - 1.0*x164*x19 - x166*x21 - x169 - x184;
            double x186 = x158*x21;
            double x187 = x122*x15 + x124*x13 - 1.0*x155*x19 - x16*x36 - x161*x23 - x186;
            double x188 = x101*x23;
            double x189 = x13*x79 + x15*x82 - x16*x41 - x188 - 1.0*x19*x75 - x21*x92;
            double x190 = grad_1_gt3[pp]*x105;
            double x191 = x41*x78;
            double x192 = grad_1_gt5[pp]*x36;
            double x193 = 0.25*grad_1_gt5[pp];
            double x194 = 4*x20 - 4*x3;
            double x195 = 0.25*grad_0_gt4[pp];
            double x196 = 0.75*grad_2_gt1[pp];
            double x197 = x147 + x195 + x196;
            double x198 = -x29;
            double x199 = -4*x4 + 4*x5;
            double x200 = pow(chi[pp], -2);
            double x201 = 4.0*x10;
            double x202 = x13*x201;
            double x203 = x15*x201;
            double x204 = x105*x110;
            double x205 = x121*x58;
            double x206 = 0.25*grad_2_gt3[pp]*x53;
            double x207 = grad_2_gt3[pp]*x105;
            double x208 = 3.0*x58;
            double x209 = x208*x21;
            double x210 = x199*x58;
            double x211 = grad_0_gt3[pp]*x53;
            double x212 = x208*x23;
            double x213 = 2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x203 + 1.0*grad2_0_2_gt3[pp]*x10*x121 + 2.0*grad2_1_1_gt3[pp]*x10*x16 - grad2_1_2_gt3[pp]*x202 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - x170*x200 - x205*(0.5*grad_2_gt3[pp]*x53 + x204) - x205*(x105*x29 + x206) - x207*x209 - x210*x36*(x33 + x34) - x211*x212;
            double x214 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x19;
            double x215 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x216 = -x11 + x12;
            double x217 = grad_1_chi[pp]*x216 + x24;
            double x218 = grad_0_gt5[pp]*x155;
            double x219 = grad_1_gt5[pp]*x124;
            double x220 = x16*x208;
            double x221 = 6.0*x58;
            double x222 = 0.25*grad_2_gt0[pp];
            double x223 = -x222;
            double x224 = x143*x58;
            double x225 = -x145;
            double x226 = 0.75*grad_1_gt2[pp];
            double x227 = x194*x58;
            double x228 = 0.25*grad_0_gt5[pp];
            double x229 = x124*x228;
            double x230 = 0.25*grad_1_gt5[pp]*x155;
            double x231 = grad_2_gt3[pp]*x166;
            double x232 = 0.25*grad_2_gt3[pp]*x164;
            double x233 = 0.5*x52;
            double x234 = grad_2_gt5[pp]*x124;
            double x235 = grad_1_gt5[pp]*x158;
            double x236 = grad_0_gt5[pp]*x158;
            double x237 = x102*x19;
            double x238 = 0.25*grad_2_gt5[pp]*x124;
            double x239 = 0.25*grad_2_gt5[pp]*x155;
            double x240 = x222*x79;
            double x241 = x105*x74;
            double x242 = 0.25*x241;
            double x243 = x78*x92;
            double x244 = x75*x78;
            double x245 = 0.25*x244;
            double x246 = (-0.5)*grad_2_gt4[pp] + x193;
            double x247 = -x164*x246;
            double x248 = -x103 + x104 - x15*x78;
            double x249 = x246*x248;
            double x250 = -0.5*grad_2_gt2[pp] + x228;
            double x251 = -x250*x79;
            double x252 = -x15*x74 + x72 + x73;
            double x253 = x250*x252;
            double x254 = (-0.5)*gt0[pp]*gt4[pp] + x27;
            double x255 = -x14 + x7;
            double x256 = -x88 + x89;
            double x257 = 2.0*x10;
            double x258 = -grad_0_chi[pp]*x189*x257 - grad_1_chi[pp]*x185*x257 - grad_2_chi[pp]*x187*x257 - x173 - x175 - x177 + x178*x180 - x181*x182 + x183;
            double x259 = -grad_0_chi[pp]*x19 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x21;
            double x260 = grad_0_chi[pp]*x255 + grad_1_chi[pp]*x16 + grad_2_chi[pp]*x216;
            double x261 = grad_0_gt3[pp]*x151;
            double x262 = grad_2_gt3[pp]*x151;
            double x263 = -x111*x79;
            double x264 = x114*x124;
            double x265 = 0.25*grad_1_gt5[pp]*x122;
            double x266 = x78*x82;
            double x267 = 0.25*x266;
            double x268 = x129*x79;
            double x269 = x63 + x80 + x81;
            double x270 = x111*x269;
            double x271 = x114*x122;
            double x272 = (-0.5)*gt1[pp]*gt5[pp] + x38;
            double x273 = x198 + x30;
            double x274 = grad_1_chi[pp]*x255 + x37;
            double x275 = -x195;
            double x276 = 0.25*grad_0_gt3[pp]*x164;
            double x277 = x129*x75;
            double x278 = x222*x82;
            double x279 = x122*x228;
            double x280 = grad_0_gt3[pp]*x168;
            double x281 = x53*x74;
            double x282 = 0.25*x281;
            double x283 = x155*x52;
            double x284 = 0.25*x283;
            double x285 = grad_0_gt5[pp]*x161;
            double x286 = 0.25*grad_0_gt0[pp]*x82;
            double x287 = 0.25*grad_0_gt0[pp]*x75;
            double x288 = x161*x52;
            double x289 = 0.5*grad_0_gt1[pp] + x141;
            double x290 = x164*x289;
            double x291 = x289*x53;
            double x292 = 0.5*grad_0_gt2[pp] + x223;
            double x293 = x122*x292;
            double x294 = x155*x292;
            double x295 = -x227;
            double x296 = 0.25*grad_1_gt5[pp]*x105;
            double x297 = x132*x92 + x228*x79;
            double x298 = -x158*x91;
            double x299 = x289*x75;
            double x300 = x292*x82;
            double x301 = x299 + x300;
            double x302 = x52*x53;
            double x303 = 0.25*x302;
            double x304 = x105*x114;
            double x305 = 0.5*grad_1_gt3[pp]*x166;
            double x306 = 0.25*grad_2_gt3[pp]*x105 + x305;
            double x307 = -0.25*x23*x78 + 0.25*x76 - 0.25*x77;
            double x308 = x307*x78;
            double x309 = x29*x92 + x307*x52;
            double x310 = x148 + x195;
            double x311 = x310*x79 + x41*x85;
            double x312 = 0.5*grad_2_gt5[pp]*x36;
            double x313 = x246*(x118 + x123) + x312;
            double x314 = 0.25*grad_1_gt5[pp]*x53;
            double x315 = x166*x29;
            double x316 = x232 + x315;
            double x317 = 0.25*x52;
            double x318 = x105*x317;
            double x319 = x132*x158 + x229;
            double x320 = x292*x79 + x92*x96;
            double x321 = x310*x75;
            double x322 = 0.5*grad_1_gt0[pp]*x92;
            double x323 = x228*x82 + x322;
            double x324 = 0.5*grad_1_gt2[pp];
            double x325 = (-0.5)*grad_2_gt1[pp] + x130 + x324;
            double x326 = x158*x325;
            double x327 = -x155*x246;
            double x328 = 0.25*grad_2_gt5[pp]*x122;
            double x329 = x327 + x328;
            double x330 = x114*x53;
            double x331 = 0.25*grad_2_gt0[pp]*x15 + 0.25*x162 - 0.25*x163;
            double x332 = grad_1_gt3[pp]*x331;
            double x333 = x204 + x332;
            double x334 = x111*x252;
            double x335 = x289*x79 + x41*x99;
            double x336 = x151*x325;
            double x337 = x114*x155;
            double x338 = x36*x85;
            double x339 = x124*x310 + x338;
            double x340 = x151*x35;
            double x341 = x110*x79 + x325*x41;
            double x342 = 0.25*grad_2_gt3[pp]*x124;
            double x343 = grad_1_gt5[pp]*x122;
            double x344 = grad_2_gt3[pp]*x155 + x343;
            double x345 = x52*x82;
            double x346 = grad_1_gt0[pp]*x79;
            double x347 = grad_0_gt3[pp]*x75 + x346;
            double x348 = grad_0_gt5[pp]*x122;
            double x349 = x155*x74;
            double x350 = x348 + x349;
            double x351 = 1.0*x58;
            double x352 = x23*x351;
            double x353 = -x202;
            double x354 = -x203;
            double x355 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x354 + 1.0*grad2_0_2_gt4[pp]*x10*x121 + 2.0*grad2_1_1_gt4[pp]*x10*x16 + grad2_1_2_gt4[pp]*x353 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x189*x58 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x200 + 2.0*grad_1_gt4[pp]*x185*x58 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x187*x58 + 1.0*gt4[pp]*x10*x25*x258 - x152*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x215*(grad_2_gt3[pp]*x255 + x127) + 0.5*grad_1_chi[pp]*x215*(grad_1_gt5[pp]*x216 + x104 + x255*x78) + 0.5*grad_2_chi[pp]*x215*(grad_2_gt3[pp]*x216 + x115 + x117));
            double x356 = -grad_1_chi[pp];
            double x357 = 2.0*grad_2_alpha[pp];
            double x358 = -grad_2_chi[pp];
            double x359 = 2.0*grad_1_alpha[pp];
            double x360 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x214*x25 - 2.0*x23*x78 + 2.0*x76 - 2.0*x77) + x357*(1.0*grad_2_gt3[pp]*x10*x13 - x117*x49 - x123*x49 + x44*(1.0*gt4[pp]*x215*x217 + x356)) + x359*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x15*x78 - x104*x49 + x44*(1.0*gt4[pp]*x215*x260 + x358));
            double x361 = x228*x75;
            double x362 = (-0.5)*grad_0_gt4[pp] + x131 + x324;
            double x363 = 0.25*grad_1_gt5[pp]*x164 + x166*x362;
            double x364 = -x158*x87;
            double x365 = 0.25*grad_1_gt0[pp]*x164 + x168*x325;
            double x366 = x101*x99;
            double x367 = 0.25*grad_2_gt0[pp]*x155;
            double x368 = 0.5*x164*x35 - x166*x32;
            double x369 = x158*x362 + x230;
            double x370 = x317*x75 + x322;
            double x371 = x105*x78;
            double x372 = 0.25*x371;
            double x373 = -x124*x250;
            double x374 = x328 + x373;
            double x375 = x292*x75;
            double x376 = 0.5*grad_0_gt0[pp]*x92;
            double x377 = x222*x75 + x376;
            double x378 = x331*x74;
            double x379 = 0.5*grad_1_gt0[pp]*x166 + x331*x52;
            double x380 = x168*x88 + x331*x78;
            double x381 = 0.5*grad_2_gt5[pp]*x161;
            double x382 = x250*(-x13*x74 + x153 + x154) + x381;
            double x383 = 0.25*grad_0_gt0[pp]*x79;
            double x384 = x277 + x383;
            double x385 = x101*x325;
            double x386 = x105*x289;
            double x387 = -0.5*x164*x32 + x168*x35;
            double x388 = x124*x292;
            double x389 = 0.5*grad_1_gt5[pp]*x161;
            double x390 = x135*x155 + x389;
            double x391 = x111*x248;
            double x392 = x330 + x391;
            double x393 = 0.25*x345;
            double x394 = grad_2_gt0[pp]*x124;
            double x395 = grad_0_gt3[pp]*x164;
            double x396 = grad_1_gt0[pp]*x105;
            double x397 = x124*x78;
            double x398 = x16*x351;
            double x399 = -grad_0_chi[pp]*x200;
            double x400 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x354 + 1.0*grad2_0_2_gt2[pp]*x10*x121 + 2.0*grad2_1_1_gt2[pp]*x10*x16 + grad2_1_2_gt2[pp]*x353 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_0_gt2[pp]*x189*x58 + 2.0*grad_1_gt2[pp]*x185*x58 + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x399 + 2.0*grad_2_gt2[pp]*x187*x58 + 1.0*gt2[pp]*x10*x25*x258 - x152*(-grad2_0_2_chi[pp] + 0.5*grad_0_chi[pp]*x215*(grad_2_gt0[pp]*x23 + x255*x74 + x72) + 0.5*grad_1_chi[pp]*x215*(grad_0_gt5[pp]*x216 + grad_2_gt0[pp]*x255 + x16*x74) + 0.5*grad_2_chi[pp]*x215*(grad_2_gt0[pp]*x19 + x154 + x216*x74));
            double x401 = -grad_0_chi[pp];
            double x402 = 2.0*grad_0_alpha[pp];
            double x403 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*(1.0*gt2[pp]*x25*x43 + x164) + x357*(1.0*x10*x13*x74 - x153*x49 - x154*x49 + x44*(1.0*gt2[pp]*x215*x217 + x401)) + x402*(1.0*x10*x15*x74 + x44*(1.0*gt2[pp]*x215*x274 + x358) - x49*x72 - x49*x73);
            double x404 = 0.25*x349;
            double x405 = 0.25*grad_1_gt5[pp]*x124;
            double x406 = x250*x269;
            double x407 = x132*x151;
            double x408 = 0.25*grad_2_gt3[pp]*x155 + x338;
            double x409 = x110*x75;
            double x410 = 0.5*grad_2_gt0[pp]*x41;
            double x411 = grad_0_gt5[pp]*x82;
            double x412 = grad_2_gt0[pp]*x79;
            double x413 = x412 + x74*x75;
            double x414 = x19*x351;
            double x415 = grad_1_gt5[pp]*x53;
            double x416 = grad_2_gt3[pp]*x164;
            double x417 = x241 + x416;
            double x418 = x281 + x395;
            double x419 = -x205;
            double x420 = -x246*x53;
            double x421 = x155*x228;
            double x422 = x277 + x278;
            double x423 = x101*x362 + x383;
            double x424 = x124*x222 + x389;
            double x425 = 0.25*x397;
            double x426 = x13*x58;
            double x427 = x168*x34;
            double x428 = x105*x129 + x427;
            double x429 = -x224;
            double x430 = x327 + x373;
            double x431 = x101*x96;
            double x432 = x122*x222 + x132*x161;
            double x433 = 0.25*grad_1_gt0[pp]*x53;
            double x434 = -0.5*x122*x91 - x36*x87;
            double x435 = x332 + x391;
            double x436 = x151*x362 + x206;
            double x437 = x268 + x410;
            double x438 = x310*x82;
            double x439 = x278 + x383;
            double x440 = x101*x132;
            double x441 = -0.5*x122*x87 - x161*x91;
            double x442 = x427 + 0.25*x53*x78;
            double x443 = 0.25*x67 - 0.25*x68 - 0.25*x69;
            double x444 = x443*x52;
            double x445 = 0.5*grad_2_gt0[pp]*x36 + x122*x310;
            double x446 = x289*x82;
            double x447 = 0.5*grad_0_gt0[pp]*x41;
            double x448 = x129*x82 + x447;
            double x449 = 0.5*grad_2_gt3[pp]*x161 + x443*x78;
            double x450 = x168*x45;
            double x451 = x111*(-grad_1_gt0[pp]*x15 - x13*x52 + x51) + x450;
            double x452 = x110*x82;
            double x453 = 0.25*grad_2_gt3[pp]*x122 + x36*x362;
            double x454 = -x151*x32;
            double x455 = x21*x351;
            double x456 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x354 + 1.0*grad2_0_2_gt1[pp]*x10*x121 + 2.0*grad2_1_1_gt1[pp]*x10*x16 + grad2_1_2_gt1[pp]*x353 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x189*x58 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x399 + 2.0*grad_1_gt1[pp]*x185*x58 + 2.0*grad_2_gt1[pp]*x187*x58 + 1.0*gt1[pp]*x10*x25*x258 - x152*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x215*(grad_0_gt3[pp]*x255 + x64) + 0.5*grad_1_chi[pp]*x215*(grad_1_gt0[pp]*x255 + x216*x52 + x51) + 0.5*grad_2_chi[pp]*x215*(grad_0_gt3[pp]*x216 + x133));
            double x457 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x25*x259 + 2.0*x67 - 2.0*x68 - 2.0*x69) + x359*(1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x13*x52 + x44*(1.0*gt1[pp]*x215*x260 + x401) - x49*x51) + x402*(1.0*grad_0_gt3[pp]*x10*x15 + x44*(1.0*gt1[pp]*x215*x274 + x356) - x49*x80 - x49*x81);
            double x458 = 0.25*grad_0_gt3[pp]*x53;
            At_rhs11[pp] = 2*At1[pp]*grad_1_beta0[pp] + 4.0*At3[pp]*grad_1_beta1[pp]*x0 - 0.66666666666666663*At3[pp]*grad_2_beta2[pp] + 2*At4[pp]*grad_1_beta2[pp] + agrad_0_At3[pp]*beta0[pp] + agrad_1_At3[pp]*beta1[pp] + agrad_2_At3[pp]*beta2[pp] - alpha[pp]*(2.0*At1[pp]*x10*(-At1[pp]*x23 + At3[pp]*x15 - At4[pp]*x19) + 2.0*At3[pp]*x10*(At1[pp]*x15 + At4[pp]*x13 + x1*x16) + 2.0*At4[pp]*x10*(-At1[pp]*x19 + At3[pp]*x13 - At4[pp]*x21) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_0_gt3[pp]*x102*(x101*x23 - 1.0*x13*x79 - 1.0*x15*x82 + x16*x41 + x19*x75 + x21*x92) - grad_1_gt3[pp]*x102*(-1.0*x105*x13 - 1.0*x15*x53 + x151*x16 + x164*x19 + x166*x21 + x169) + 6.0*grad_1_gt3[pp]*x16*x56*x58 - grad_2_gt3[pp]*x102*(-1.0*x122*x15 - 1.0*x124*x13 + x155*x19 + x158*x21 + x16*x36 + x161*x23) - gt3[pp]*x10*x44*(2.0*grad_0_chi[pp]*x10*x189 + 2.0*grad_1_chi[pp]*x10*x185 + 2.0*grad_2_chi[pp]*x10*x187 + x173 + x175 + x177 - x178*x180 + x181*x182 - x183) + x109*(x106 - 1.0*x107) - x109*(x111*x79 - 1.0*x112) - x109*(x114*x119 + x120) + x121*x58*(0.25*grad_1_gt5[pp]*x134 + x119*x132) + x121*x58*(x122*x91 - x126) + x121*x58*(x128*x129 + x132*x65) + x121*x58*(x135*x65 + x96*(1.0*x23*x78 - 1.0*x76 + 1.0*x77)) + x124*x194*x58*(x193 + x90) + x128*x194*x197*x58 + 2.0*x13*x58*(-x107 + x190) + 2.0*x13*x58*(-grad_2_gt3[pp]*x119 + x192) + 2.0*x13*x58*(x128*x61 + x191) + x134*x143*x149*x58 + x137*x58*(x111*x65 + x139) + x137*x58*(x114*x70 + x140) + x138*(x136 - 1.0*x57) + x142*x143*x58*x65 + 2.0*x15*x58*(grad_2_gt3[pp]*x70 + x71) - x152*(1.0*grad_0_chi[pp]*x10*x41 + 1.0*grad_1_chi[pp]*x10*x151 + 1.0*grad_2_chi[pp]*x10*x36 + x150) + x199*x41*x58*(x198 + x31) + x213 + x60*(x54 - x57) + x60*(x61*x65 + x66)) - 12*grad2_1_1_alpha[pp] + 12.0*grad_0_alpha[pp]*x10*(-x26*(-grad_1_chi[pp]*x15 + x37) + x41) + 12*grad_1_alpha[pp]*(x44*(0.5*gt3[pp]*x10*x43 + x42) + x50) + 12.0*grad_2_alpha[pp]*x10*(-x26*(-grad_1_chi[pp]*x13 + x24) + x36) + 1.0*gt3[pp]*x10*(-x13*(alpha[pp]*(x109*(x304 + x306) + x109*(x308 + x309) + x109*(x151*x88 + x306) + x109*(x158*x35 + x313) + x109*(x273*x92 + x311) + 2.0*x13*x58*(grad_2_gt3[pp]*x158 + x219) + x138*(x330 + x333) + x138*(x333 + x336) + x138*(x334 + x335) + x138*(x337 + x339) - x205*(x230 + x319) - x205*(x245 + x320) - x205*(x314 + x316) - x205*(x316 + x318) - x205*(x321 + x323) - x205*(x326 + x329) - x210*(x263 + x341) - x210*(0.5*grad_1_gt3[pp]*x105 + x340) - x210*(x264 + x342 + x36*x88) - x224*(x277 + x301) - x224*(0.5*grad_0_gt3[pp]*x164 + x303) - x227*(0.5*x243 + x297) - x227*(x158*x88 + x238 + x298) + x295*(1.0*x231 + x296) - x352*(x283 + x350) + x355 + x59*(x125 + x344) + x59*(x345 + x347)) + x360) - x13*(alpha[pp]*(x109*(x308 + x311) + x109*(x309 - x41*x87) + x109*(x313 + x405) + x109*(x151*x256 + x304 + x305) + x109*(x158*x34 + x312 + x405) + 2.0*x13*x58*(grad_1_gt5[pp]*x151 + x207) + x138*(x265 + x339) + x138*(x265 + x408) + x138*(x267 + x335) + x138*(x204 + x206 + x336) + x138*(x330 + x332 + x407) + x138*(x393 + x409 + x410) - x205*(x229 + x329) - x205*(x319 + x328) - x205*(x320 + x406) - x210*(0.5*x191 + x341) - x210*(1.0*x192 + x342) - x210*(x106 + x151*x34 + x340) - x224*(x278 + x301) - x224*(x122*x85 + x404) - x227*(0.5*x234 + x298) + x295*(x251 + x297) + x295*(0.5*grad_2_gt3[pp]*x166 + x249 + x296) - x352*(x302 + x418) + x355 - x414*(x411 + x413) - x414*(x415 + x417) + x419*(x315 + x318 + x420)) + x360) - x15*(alpha[pp]*(x109*(x206 + x435) + x109*(x332 + x436) + x109*(x337 + x434) + x109*(x334 + x410 + x438) + x138*(x444 + x449) + x138*(x451 + x458) + x138*(x161*x35 + x445) + x138*(0.5*grad_1_gt0[pp]*x151 + x450 + x458) + x138*(x101*x273 + x446 + x447) + 2.0*x15*x58*(grad_0_gt3[pp]*x101 + grad_1_gt0[pp]*x82) - x205*(x284 + x441) - x205*(x299 + x423) - x205*(x404 + x424) - x205*(x422 + x440) - x210*(x271 + x453) - x210*(0.5*grad_1_gt3[pp]*x53 + x454) - x210*(0.5*grad_1_gt0[pp]*x41 + x270 + x452) - x224*(0.5*x288 + x432) - x224*(0.5*grad_1_gt0[pp]*x101 + x286 + x431) + x295*(x230 + x430) + x295*(0.5*grad_2_gt3[pp]*x164 + x372) + x419*(x276 + x428) + x419*(x276 + x442) + x426*(x266 + x347) + x426*(x344 + x397) + x429*(1.0*x280 + x433) - x455*(x244 + x413) + x456) + x457) + x16*(alpha[pp]*(2.0*grad_0_gt3[pp]*x189*x58 - grad_1_gt3[pp]*x184*x221 + 2.0*grad_1_gt3[pp]*x185*x58 + 2.0*grad_2_gt3[pp]*x187*x58 + 1.0*gt3[pp]*x10*x25*x258 + x108*x58*(x112 + x263) + x108*x58*(-x120 + x264) + x109*(x106 + 1.0*x262) - x122*x149*x224 - x124*x227*(-x193 + x89) + 2.0*x13*x58*(x190 + x262) + 2.0*x13*x58*(grad_0_gt3[pp]*x79 + x191) + 2.0*x13*x58*(grad_2_gt3[pp]*x124 + x192) + x137*x58*(x139 + x270) + x137*x58*(x140 + x271) + x138*(x136 + 1.0*x261) - x142*x224*x82 + 2.0*x15*x58*(grad_0_gt3[pp]*x82 + x66) - x152*(1.0*grad_0_chi[pp]*x215*(grad_1_gt3[pp]*x272 + x23*x273 + x40) + 1.0*grad_1_chi[pp]*x215*(x216*x35 + x255*x273 + x46) + 1.0*grad_2_chi[pp]*x215*(grad_1_gt3[pp]*x254 + x19*x273 + x21*x35) + x150) - x197*x227*x79 - x205*(x267 + x79*x96) - x205*(-1.0*x122*x91 + x126) - x205*(x124*x132 + x265) - x205*(x132*x82 + x268) - x210*x41*(x29 + x30) + x213 + x60*(x261 + x54) + x60*(grad_2_gt3[pp]*x122 + x71)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x214*x25 + x41) + 4*grad_1_alpha[pp]*(x44*(0.5*gt3[pp]*x215*x260 + x42) + x50) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x25*x259 + x36)) + x19*(alpha[pp]*(x109*(x229 + x369) + x109*(x240 + x323) + x109*(x240 + x370) + x109*(x242 + x368) + x109*(x326 + x374) + x109*(x314 + x315 + x372) + x138*(x300 + x384) + x138*(x384 + x385) + x138*(x386 + x387) + x138*(x388 + x390) - x205*(x375 + x377) - x205*(x378 + x379) - x205*(x101*x85 + x377) - x205*(x158*x99 + x382) - x205*(x166*x96 + x380) - x210*(x204 + x392) - x210*(0.5*grad_1_gt0[pp]*x79 + x393) - x224*(x290 + x365) - x224*(0.5*grad_0_gt0[pp]*x75 + x366) - x224*(x161*x85 + x294 + x367) - x227*(x132*x166 + x363) - x227*(x158*x85 + x239 + x364) - x237*(grad_2_gt0[pp]*x158 + x218) + x295*(1.0*grad_2_gt0[pp]*x92 + x361) - x398*(x125 + x343 + x397) + x400 + x59*(x283 + x348 + x394) + x59*(x302 + x395 + x396)) + x403) + x19*(alpha[pp]*(x109*(x230 + x374) + x109*(x328 + x369) + x109*(x368 + x420) + x109*(x370 + x406) + x138*(x279 + x390) + x138*(x279 + x424) + x138*(x282 + x387) + x138*(x300 + x423) + x138*(x303 + x428) + x138*(x385 + x422) - x205*(x382 + x421) - x205*(0.5*grad_2_gt0[pp]*x158 + x381 + x421) - x205*(x101*x165 + x375 + x376) - x210*(x206 + x392) - x210*(0.5*grad_1_gt5[pp]*x122 + x425) - x224*(1.0*x285 + x367) - x224*(0.5*grad_2_gt0[pp]*x101 + x287 + x366) - x227*(0.5*grad_2_gt0[pp]*x92 + x253 + x361) - x237*(grad_0_gt5[pp]*x101 + grad_2_gt0[pp]*x75) + x295*(x247 + x363) + x295*(0.5*grad_2_gt5[pp]*x155 + x364) - x398*(x266 + x345 + x346) + x400 + x419*(x378 + x380) + x419*(x168*x256 + x379) + x426*(x244 + x411 + x412) + x426*(x371 + x415 + x416) + x429*(x132*x168 + x365)) + x403) + x21*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x203 + 1.0*grad2_0_2_gt5[pp]*x10*x121 + 2.0*grad2_1_1_gt5[pp]*x10*x16 - grad2_1_2_gt5[pp]*x202 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 2.0*grad_0_gt5[pp]*x189*x58 + 2.0*grad_1_gt5[pp]*x185*x58 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x186*x221 + 2.0*grad_2_gt5[pp]*x187*x58 + 1.0*gt5[pp]*x10*x25*x258 - x105*x210*(x113 + x33) + x108*x58*(x251 + x52*x92) + x108*x58*(2*x166*x35 + x249) + x109*(1.0*x235 + x238) + 2.0*x13*x58*(x234 + x235) + 2.0*x13*x58*(grad_0_gt5[pp]*x79 + x243) + 2.0*x13*x58*(grad_1_gt5[pp]*x105 + x231) + x137*x58*(x245 + x79*x99) + x137*x58*(x164*x35 + x242) + x138*(0.5*grad_1_gt5[pp]*x155 + x229) + x138*(x105*x233 + x232) + x138*(x124*x85 + x230) + x138*(x233*x75 + x240) - x152*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x215*(x165*x23 + x255*x256 + x84) + 1.0*grad_1_chi[pp]*x215*(grad_2_gt5[pp]*x254 + x16*x256 + x165*x255) + 1.0*grad_2_chi[pp]*x215*(x156 + x165*x19 + x216*x256)) - x164*x224*(x144 + x146 + x225) - x166*x227*(x88 + x89) - x176*x200 - x205*(1.0*x236 + x239) - x205*(x253 + x92*(2.0*grad_0_gt2[pp] - 1.0*grad_2_gt0[pp])) - x205*(x166*x52 + x247) - x210*x79*(x195 + x225 + x226) - x212*x218 - x219*x220 - x224*x75*(x223 + x97) - x227*x92*(x85 + x86) - x237*(grad_0_gt5[pp]*x75 + grad_2_gt0[pp]*x92) - x237*(grad_1_gt5[pp]*x164 + x166*x74) - x237*(grad_2_gt5[pp]*x155 + x236)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x214*x25 + x92) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x25*x43 + x166) + 4*grad_2_alpha[pp]*(-x10*x156 + 1.0*x10*x19*x87 - x157*x49 + x44*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x215*x217))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x203 + 1.0*grad2_0_2_gt0[pp]*x10*x121 + 2.0*grad2_1_1_gt0[pp]*x10*x16 - grad2_1_2_gt0[pp]*x202 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x188*x221 + 2.0*grad_0_gt0[pp]*x189*x58 + 2.0*grad_1_gt0[pp]*x185*x58 - grad_1_gt0[pp]*x220*x82 + 2.0*grad_2_gt0[pp]*x187*x58 - grad_2_gt0[pp]*x209*x75 + 1.0*gt0[pp]*x10*x25*x258 + x109*(x276 + 0.5*x53*x78) + x109*(0.5*grad_1_gt0[pp]*x75 + x278) + x109*(0.5*grad_2_gt0[pp]*x82 + x277) + x109*(-1.0*x122*x87 + x284) + x109*(0.5*x155*x78 + x279) + x109*(-1.0*x164*x32 + x282) - x122*x210*(x145 + x226 + x275) + x137*x58*(x161*x78 + x293) + x137*x58*(-2*x168*x32 + x291) + x138*(1.0*grad_1_gt0[pp]*x101 + x286) - x152*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x215*(0.5*grad_0_gt0[pp]*x23 + x19*x99 + x255*x96) + 1.0*grad_1_chi[pp]*x215*(grad_0_gt0[pp]*x272 + x167 + x216*x99) + 1.0*grad_2_chi[pp]*x215*(x159 + x160 + x216*x96)) - x155*x227*(-x228 + x86) - x161*x224*(x97 + x98) - x164*x227*(x146 + x196 + x275) - x168*x224*(x94 + x95) - x174*x200 - x205*(1.0*grad_2_gt0[pp]*x101 + x287) - x205*(x161*(-grad_0_gt5[pp] + 2.0*grad_2_gt2[pp]) + x294) - x205*(x168*x78 + x290) - x210*x53*(-x110 + x30) - x237*(grad_0_gt0[pp]*x75 + grad_2_gt0[pp]*x101) - x237*(grad_1_gt0[pp]*x164 + x168*x74) - x237*(grad_2_gt0[pp]*x155 + x285) + x60*(grad_0_gt0[pp]*x82 + grad_1_gt0[pp]*x101) + x60*(grad_1_gt0[pp]*x53 + x280) + x60*(grad_2_gt0[pp]*x122 + x288)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x15*x96 - x10*x93 - x100*x49 + x44*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x215*x274)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x25*x43 + x168) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x25*x259 + x161)) + x255*(alpha[pp]*(x109*(x126 + x434) + x109*(x204 + x436) + x109*(x407 + x435) + x109*(x408 + x425) + x109*(x409 + x437) + x109*(x437 + x438) + x138*(x444 + x445) + x138*(x446 + x448) + x138*(x101*x29 + x448) + x138*(x151*x96 + x451) + x138*(x36*x99 + x449) - x205*(x299 + x439) - x205*(x386 + x442) - x205*(x388 + x441) - x205*(x439 + x440) - x210*(x453 + 0.5*x71) - x210*(1.0*grad_1_gt0[pp]*x41 + x452) - x210*(x136 + x151*x29 + x454) - x224*(x293 + x432) - x224*(0.5*grad_0_gt0[pp]*x82 + x431) - x224*(x168*x29 + x291 + x433) - x227*(0.5*grad_2_gt0[pp]*x79 + x321) + x295*(x229 + x430) - x414*(x350 + x394) - x414*(x396 + x418) - x455*(x371 + x417) + x456 + x60*(grad_1_gt0[pp]*x151 + x211)) + x457))) + 2.0*grad_0_beta0[pp]*x0*x1;
        }
    }
}
bssn::timer::t_rhs.stop();

bssn::timer::t_rhs.start();
for (unsigned int k = 3; k < nz-3; k++) {
    for (unsigned int j = 3; j < ny-3; j++) {
        for (unsigned int i = 3; i < nx-3; i++) {
            double x = pmin[0] + i*hx;
            double y = pmin[1] + j*hy;
            double z = pmin[2] + k*hz;
            double r_coord = sqrt(x*x + y*y + z*z);
            double eta=ETA_CONST;
            if (r_coord >= ETA_R0) {
                eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
            }
            int pp = i + nx*(j + ny*k);
            double x0 = 0.33333333333333331;
            double x1 = -At2[pp];
            double x2 = pow(gt4[pp], 2);
            double x3 = pow(gt1[pp], 2);
            double x4 = pow(gt2[pp], 2);
            double x5 = gt0[pp]*gt5[pp];
            double x6 = gt3[pp]*x5;
            double x7 = gt2[pp]*gt4[pp];
            double x8 = 2*x7;
            double x9 = gt0[pp]*x2 - gt1[pp]*x8 + gt3[pp]*x4 + gt5[pp]*x3 - x6;
            double x10 = 1.0/x9;
            double x11 = gt0[pp]*gt4[pp];
            double x12 = gt1[pp]*gt2[pp];
            double x13 = x11 - x12;
            double x14 = gt1[pp]*gt5[pp];
            double x15 = x14 - x7;
            double x16 = -x4 + x5;
            double x17 = gt1[pp]*gt4[pp];
            double x18 = gt2[pp]*gt3[pp];
            double x19 = x17 - x18;
            double x20 = gt0[pp]*gt3[pp];
            double x21 = x20 - x3;
            double x22 = gt3[pp]*gt5[pp];
            double x23 = -x2 + x22;
            double x24 = 1.0/chi[pp];
            double x25 = grad_0_chi[pp]*x15 - grad_1_chi[pp]*x16 + grad_2_chi[pp]*x13;
            double x26 = grad_0_gt4[pp] - grad_1_gt2[pp] + grad_2_gt1[pp];
            double x27 = x16*x26;
            double x28 = grad_0_gt5[pp]*x13 + grad_2_gt0[pp]*x15 - x27;
            double x29 = 1.0*gt2[pp]*x24*x25 + x28;
            double x30 = x15*x26;
            double x31 = 1.0*x10;
            double x32 = -grad_2_chi[pp];
            double x33 = 1.0/(-gt0[pp]*x2 + 2*gt1[pp]*gt2[pp]*gt4[pp] - gt3[pp]*x4 - gt5[pp]*x3 + x6);
            double x34 = -x14 + x7;
            double x35 = grad_0_chi[pp]*x23 + grad_1_chi[pp]*x34 + grad_2_chi[pp]*x19;
            double x36 = 1.0*x24;
            double x37 = x36*(1.0*gt2[pp]*x33*x35 + x32);
            double x38 = x13*x26;
            double x39 = -grad_0_chi[pp];
            double x40 = -x11 + x12;
            double x41 = grad_0_chi[pp]*x19 + grad_1_chi[pp]*x40 + grad_2_chi[pp]*x21;
            double x42 = x36*(1.0*gt2[pp]*x33*x41 + x39);
            double x43 = grad_2_gt3[pp]*x15;
            double x44 = grad_1_gt5[pp]*x19;
            double x45 = -grad_0_gt4[pp] + grad_1_gt2[pp] + grad_2_gt1[pp];
            double x46 = x23*x45 + x44;
            double x47 = -x43 + x46;
            double x48 = grad_0_gt3[pp]*x15;
            double x49 = -x48;
            double x50 = grad_0_gt4[pp] + grad_1_gt2[pp] - grad_2_gt1[pp];
            double x51 = grad_1_gt0[pp]*x23 + x19*x50;
            double x52 = x49 + x51;
            double x53 = pow(x9, -2);
            double x54 = x16*x53;
            double x55 = 4*x20 - 4*x3;
            double x56 = grad_2_gt0[pp]*x19;
            double x57 = grad_0_gt5[pp]*x21;
            double x58 = x13*x26 - x56 - x57;
            double x59 = 0.5*grad_0_gt5[pp];
            double x60 = 1.0*grad_2_gt2[pp];
            double x61 = x59 - x60;
            double x62 = 0.5*grad_2_gt5[pp];
            double x63 = x21*x62;
            double x64 = x19*x61;
            double x65 = 0.5*grad_1_gt5[pp];
            double x66 = 1.0*grad_2_gt4[pp];
            double x67 = x65 - x66;
            double x68 = x13*x67;
            double x69 = -x63 + x64 - x68;
            double x70 = x61*x69;
            double x71 = grad_0_gt5[pp]*x19;
            double x72 = grad_2_gt0[pp]*x23;
            double x73 = x30 - x71 - x72;
            double x74 = 0.25*grad_0_gt5[pp];
            double x75 = -0.5*grad_2_gt2[pp] + x74;
            double x76 = grad_2_gt0[pp]*x23;
            double x77 = -x30 + x71;
            double x78 = x76 + x77;
            double x79 = 0.5*x17 - 0.5*x18;
            double x80 = grad_2_gt5[pp]*x79;
            double x81 = x15*x67;
            double x82 = -x23*x61 + x80 + x81;
            double x83 = 0.5*grad_2_gt0[pp];
            double x84 = x53*x55;
            double x85 = grad_1_gt5[pp]*x13;
            double x86 = grad_2_gt3[pp]*x16;
            double x87 = x15*x45 + x85 - x86;
            double x88 = grad_0_gt3[pp]*x16;
            double x89 = grad_1_gt0[pp]*x15 + x13*x50 - x88;
            double x90 = 0.5*x12;
            double x91 = 0.5*x11 - x90;
            double x92 = -x59 + x60;
            double x93 = grad_2_gt5[pp]*x91 + x15*x92 + x16*x67;
            double x94 = 0.5*grad_1_gt3[pp];
            double x95 = x16*x94;
            double x96 = -x95;
            double x97 = 1.0*grad_1_gt4[pp];
            double x98 = 0.5*grad_2_gt3[pp];
            double x99 = x97 - x98;
            double x100 = 0.5*grad_0_gt3[pp];
            double x101 = 1.0*grad_1_gt1[pp];
            double x102 = x100 - x101;
            double x103 = x102*x15;
            double x104 = -x103 + x13*x99 + x96;
            double x105 = 0.5*x7;
            double x106 = -x105 + 0.5*x14;
            double x107 = 1.0*grad_0_gt2[pp];
            double x108 = x107 - x83;
            double x109 = 1.0*grad_0_gt1[pp];
            double x110 = 0.5*grad_1_gt0[pp];
            double x111 = x109 - x110;
            double x112 = x111*x16;
            double x113 = grad_0_gt0[pp]*x106 + x108*x13 - x112;
            double x114 = x113*x23;
            double x115 = 2.0*x53;
            double x116 = grad_2_gt0[pp]*x19;
            double x117 = -x38 + x57;
            double x118 = x116 + x117;
            double x119 = 0.25*grad_2_gt0[pp];
            double x120 = grad_0_gt0[pp]*x79;
            double x121 = x108*x21;
            double x122 = x120 + x121;
            double x123 = -x111*x13 + x122;
            double x124 = x53*(-4*x2 + 4*x22);
            double x125 = 0.5*grad_0_gt0[pp]*x23 + x108*x19;
            double x126 = -x111*x15 + x125;
            double x127 = 0.25*grad_1_gt5[pp];
            double x128 = (-0.5)*grad_2_gt4[pp] + x127;
            double x129 = x102*x93;
            double x130 = 4*x11 - 4*x12;
            double x131 = x130*x53;
            double x132 = grad_0_gt3[pp]*x13;
            double x133 = grad_1_gt0[pp]*x19 + x21*x50;
            double x134 = -x132 + x133;
            double x135 = x19*x45;
            double x136 = grad_2_gt3[pp]*x13;
            double x137 = grad_1_gt5[pp]*x21;
            double x138 = -x136 + x137;
            double x139 = x135 + x138;
            double x140 = 0.5*grad_1_gt2[pp];
            double x141 = 0.5*grad_2_gt1[pp];
            double x142 = (-0.5)*grad_0_gt4[pp] + x140 + x141;
            double x143 = x63 - x64 + x68;
            double x144 = -x119;
            double x145 = 0.5*grad_0_gt2[pp] + x144;
            double x146 = 0.5*grad_0_gt0[pp];
            double x147 = 4*x17 - 4*x18;
            double x148 = x147*x53;
            double x149 = x118*x74;
            double x150 = x123*x62;
            double x151 = 0.25*x45;
            double x152 = x123*x65 + x134*x74;
            double x153 = 4*x14 - 4*x7;
            double x154 = x153*x53;
            double x155 = 0.25*grad_1_gt0[pp];
            double x156 = 0.5*grad_0_gt4[pp];
            double x157 = (-0.5)*grad_2_gt1[pp] + x140 + x156;
            double x158 = x19*x45;
            double x159 = x136 - x137 - x158;
            double x160 = grad_1_gt0[pp]*x19;
            double x161 = x21*x50;
            double x162 = x132 - x160 - x161;
            double x163 = grad_1_gt3[pp]*x91 + x102*x19 - x21*x99;
            double x164 = x111*x13 - x120 - x121;
            double x165 = 2.0*grad_2_gt2[pp];
            double x166 = -grad2_0_2_chi[pp];
            double x167 = x15*x26 - x71 - x72;
            double x168 = 2.0*x24;
            double x169 = -x23*x45 + x43 - x44;
            double x170 = grad_1_gt0[pp]*x23;
            double x171 = x19*x50;
            double x172 = -x170 - x171 + x48;
            double x173 = x23*x61 - x80 - x81;
            double x174 = x19*x99;
            double x175 = grad_1_gt3[pp]*x106 + x102*x23 - x174;
            double x176 = x146*x23;
            double x177 = x108*x19;
            double x178 = x111*x15 - x176 - x177;
            double x179 = 2.0*grad_0_gt2[pp];
            double x180 = pow(grad_1_chi[pp], 2);
            double x181 = 3.0*x24;
            double x182 = -x181;
            double x183 = x16*(2*grad2_1_1_chi[pp] + x180*x182);
            double x184 = pow(grad_0_chi[pp], 2);
            double x185 = x23*(2*grad2_0_0_chi[pp] - 3.0*x184*x24);
            double x186 = pow(grad_2_chi[pp], 2);
            double x187 = x21*(2*grad2_2_2_chi[pp] - x181*x186);
            double x188 = 2*x14 - x8;
            double x189 = grad_0_chi[pp]*x181;
            double x190 = 2*grad2_0_1_chi[pp] - grad_1_chi[pp]*x189;
            double x191 = 2*x17 - 2*x18;
            double x192 = 2*grad2_0_2_chi[pp] - grad_2_chi[pp]*x189;
            double x193 = (2*grad2_1_2_chi[pp] + grad_1_chi[pp]*grad_2_chi[pp]*x182)*(2*x11 - 2*x12);
            double x194 = x104*x16;
            double x195 = -x114 + x13*x87 + x15*x89 - 1.0*x19*x28 - x194 - x21*x93;
            double x196 = x21*x69;
            double x197 = x13*x159 + x15*x162 - x16*x163 - x164*x23 - 1.0*x19*x58 - x196;
            double x198 = x178*x23;
            double x199 = x13*x169 + x15*x172 - x16*x175 - 1.0*x167*x19 - x173*x21 - x198;
            double x200 = x53*(-4*x4 + 4*x5);
            double x201 = x13*x53;
            double x202 = grad_1_gt5[pp]*x89;
            double x203 = x45*x87;
            double x204 = grad_2_gt3[pp]*x28;
            double x205 = x203 + x204;
            double x206 = -0.25*grad_2_gt3[pp];
            double x207 = 0.5*grad_1_gt4[pp] + x206;
            double x208 = x207*x89;
            double x209 = 0.25*grad_2_gt3[pp]*x89;
            double x210 = 0.25*grad_0_gt3[pp];
            double x211 = -0.5*grad_1_gt1[pp] + x210;
            double x212 = -x15*x45 - x85 + x86;
            double x213 = x211*x212;
            double x214 = x209 + x213;
            double x215 = x50*x89;
            double x216 = 0.25*x215;
            double x217 = x113*x98;
            double x218 = x155*x87 + x217;
            double x219 = -x84;
            double x220 = -x128*x28;
            double x221 = 0.25*grad_1_gt5[pp]*x28 + x142*x93;
            double x222 = -x148;
            double x223 = 0.25*grad_2_gt0[pp]*x15 + x13*x74 - 0.25*x27;
            double x224 = x223*x26;
            double x225 = x113*x65 + x223*x45;
            double x226 = x26*x89;
            double x227 = 0.25*x226;
            double x228 = -0.5*x102*x28 + x113*x99;
            double x229 = -x65 + x66;
            double x230 = 0.5*grad_1_gt0[pp]*x93 + x223*x50;
            double x231 = -x124;
            double x232 = (-0.5)*grad_1_gt2[pp] + x141 + x156;
            double x233 = 0.25*grad_1_gt0[pp]*x28 + x113*x157;
            double x234 = pow(chi[pp], -2);
            double x235 = -grad_0_chi[pp]*x234;
            double x236 = 4.0*x10;
            double x237 = x13*x236;
            double x238 = -x237;
            double x239 = x15*x236;
            double x240 = -x239;
            double x241 = 2.0*grad2_0_0_gt2[pp]*x10*x23 + grad2_0_1_gt2[pp]*x240 + 1.0*grad2_0_2_gt2[pp]*x10*x147 + 2.0*grad2_1_1_gt2[pp]*x10*x16 + grad2_1_2_gt2[pp]*x238 + 2.0*grad2_2_2_gt2[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt2[pp] + 2.0*grad_0_Gt1[pp]*gt4[pp] + 2.0*grad_0_Gt2[pp]*gt5[pp] + 2.0*grad_2_Gt0[pp]*gt0[pp] + 2.0*grad_2_Gt1[pp]*gt1[pp] + 2.0*grad_2_Gt2[pp]*gt2[pp] + grad_2_chi[pp]*x235;
            double x242 = x154*(x216 + x218) + x154*(x227 + x228) - x200*(x208 + x214) + x201*(x202 + x205) + x219*(x220 + x221) + x222*(x224 + x225) + x222*(x113*x229 + x230) + x231*(x113*x232 + x233) + x241;
            double x243 = -grad_0_chi[pp]*x23 + grad_1_chi[pp]*x15 - grad_2_chi[pp]*x19;
            double x244 = grad_0_gt5[pp]*x58;
            double x245 = 3.0*x53;
            double x246 = x23*x245;
            double x247 = grad_1_gt5[pp]*x159;
            double x248 = 3.0*x54;
            double x249 = 6.0*x53;
            double x250 = 0.75*grad_0_gt4[pp];
            double x251 = 0.25*grad_1_gt2[pp];
            double x252 = 0.25*grad_2_gt1[pp];
            double x253 = -x252;
            double x254 = 0.25*grad_0_gt4[pp];
            double x255 = 0.75*grad_1_gt2[pp];
            double x256 = x159*x74;
            double x257 = 0.25*grad_1_gt5[pp]*x58;
            double x258 = grad_2_gt3[pp]*x93;
            double x259 = 0.25*grad_2_gt3[pp]*x28;
            double x260 = 0.5*x50;
            double x261 = grad_2_gt5[pp]*x159;
            double x262 = grad_1_gt5[pp]*x69;
            double x263 = grad_0_gt5[pp]*x69;
            double x264 = x115*x19;
            double x265 = 0.25*grad_2_gt5[pp]*x159;
            double x266 = 0.25*grad_2_gt5[pp]*x58;
            double x267 = x119*x169;
            double x268 = x26*x87;
            double x269 = 0.25*x268;
            double x270 = x173*x45;
            double x271 = x167*x45;
            double x272 = 0.25*x271;
            double x273 = x128*x212;
            double x274 = -x169*x75;
            double x275 = x72 + x77;
            double x276 = x275*x75;
            double x277 = (-0.5)*gt0[pp]*gt4[pp] + x90;
            double x278 = 2.0*x10;
            double x279 = -grad_0_chi[pp]*x199*x278 - grad_1_chi[pp]*x195*x278 - grad_2_chi[pp]*x197*x278 - x183 - x185 - x187 + x188*x190 - x191*x192 + x193;
            double x280 = -grad_0_chi[pp]*x19 + grad_1_chi[pp]*x13 - grad_2_chi[pp]*x21;
            double x281 = grad_0_chi[pp]*x34 + grad_1_chi[pp]*x16 + grad_2_chi[pp]*x40;
            double x282 = grad_0_gt3[pp]*x89;
            double x283 = grad_2_gt3[pp]*x87;
            double x284 = x21*x245;
            double x285 = -x155;
            double x286 = -x251;
            double x287 = x252 + x286;
            double x288 = 0.75*grad_2_gt1[pp];
            double x289 = x210*x87;
            double x290 = grad_2_gt3[pp]*x104;
            double x291 = grad_0_gt3[pp]*x104;
            double x292 = x15*x53;
            double x293 = 2.0*x292;
            double x294 = 0.25*grad_1_gt3[pp]*x89;
            double x295 = 0.25*grad_1_gt3[pp]*x87;
            double x296 = grad_1_gt5[pp]*x163;
            double x297 = 0.25*grad_1_gt5[pp]*x162;
            double x298 = x175*x45;
            double x299 = x155*x169;
            double x300 = x163*x50;
            double x301 = x159*x50;
            double x302 = 0.25*x301;
            double x303 = x172*x45;
            double x304 = 0.25*x303;
            double x305 = x162*x207;
            double x306 = -x169*x211;
            double x307 = x159*x207;
            double x308 = x170 + x171 + x49;
            double x309 = x211*x308;
            double x310 = (-0.5)*gt1[pp]*gt5[pp] + x105;
            double x311 = -x100 + x101;
            double x312 = -x254;
            double x313 = 0.25*grad_0_gt3[pp]*x28;
            double x314 = x155*x167;
            double x315 = x119*x172;
            double x316 = x162*x74;
            double x317 = grad_0_gt3[pp]*x113;
            double x318 = x50*x58;
            double x319 = 0.25*x318;
            double x320 = grad_0_gt5[pp]*x164;
            double x321 = 0.25*grad_0_gt0[pp]*x172;
            double x322 = 0.25*grad_0_gt0[pp]*x167;
            double x323 = x164*x50;
            double x324 = 0.5*grad_0_gt1[pp] + x285;
            double x325 = x28*x324;
            double x326 = x324*x89;
            double x327 = x145*x162;
            double x328 = x145*x58;
            double x329 = 0.25*grad_1_gt5[pp]*x87;
            double x330 = x169*x74 + x173*x232;
            double x331 = -x67*x69;
            double x332 = x167*x324;
            double x333 = x145*x172;
            double x334 = x332 + x333;
            double x335 = x207*x87;
            double x336 = 0.5*grad_1_gt3[pp]*x93;
            double x337 = 0.25*grad_2_gt3[pp]*x87 + x336;
            double x338 = -0.25*x23*x45 + 0.25*x43 - 0.25*x44;
            double x339 = x338*x45;
            double x340 = x100*x173 + x338*x50;
            double x341 = x254 + x287;
            double x342 = x169*x341 + x175*x59;
            double x343 = 0.5*grad_2_gt5[pp]*x163;
            double x344 = x128*(x138 + x158) + x343;
            double x345 = 0.25*grad_1_gt5[pp]*x89;
            double x346 = x100*x93;
            double x347 = x259 + x346;
            double x348 = 0.25*x50;
            double x349 = x348*x87;
            double x350 = x232*x69 + x256;
            double x351 = x111*x173 + x145*x169;
            double x352 = x167*x341;
            double x353 = 0.5*grad_1_gt0[pp]*x173;
            double x354 = x172*x74 + x353;
            double x355 = x157*x69;
            double x356 = -x128*x58;
            double x357 = 0.25*grad_2_gt5[pp]*x162;
            double x358 = x356 + x357;
            double x359 = grad_1_gt3[pp]*x223;
            double x360 = x289 + x359;
            double x361 = x211*x275;
            double x362 = x108*x175 + x169*x324;
            double x363 = x104*x157;
            double x364 = x207*x58;
            double x365 = x163*x59;
            double x366 = x159*x341 + x365;
            double x367 = x104*x99;
            double x368 = x157*x175 + x169*x210;
            double x369 = 0.25*grad_2_gt3[pp]*x159;
            double x370 = grad_1_gt5[pp]*x162;
            double x371 = grad_2_gt3[pp]*x58 + x370;
            double x372 = x172*x50;
            double x373 = grad_1_gt0[pp]*x169;
            double x374 = grad_0_gt3[pp]*x167 + x373;
            double x375 = grad_0_gt5[pp]*x162;
            double x376 = x26*x58;
            double x377 = x375 + x376;
            double x378 = 1.0*x53;
            double x379 = x23*x378;
            double x380 = 2.0*grad2_0_0_gt4[pp]*x10*x23 + grad2_0_1_gt4[pp]*x240 + 1.0*grad2_0_2_gt4[pp]*x10*x147 + 2.0*grad2_1_1_gt4[pp]*x10*x16 + grad2_1_2_gt4[pp]*x238 + 2.0*grad2_2_2_gt4[pp]*x10*x21 + 2.0*grad_0_gt4[pp]*x199*x53 + 2.0*grad_1_Gt0[pp]*gt2[pp] + 2.0*grad_1_Gt1[pp]*gt4[pp] + 2.0*grad_1_Gt2[pp]*gt5[pp] - grad_1_chi[pp]*grad_2_chi[pp]*x234 + 2.0*grad_1_gt4[pp]*x195*x53 + 2.0*grad_2_Gt0[pp]*gt1[pp] + 2.0*grad_2_Gt1[pp]*gt3[pp] + 2.0*grad_2_Gt2[pp]*gt4[pp] + 2.0*grad_2_gt4[pp]*x197*x53 + 1.0*gt4[pp]*x10*x24*x279 - x168*(-grad2_1_2_chi[pp] + 0.5*grad_0_chi[pp]*x33*(grad_2_gt3[pp]*x34 + x46) + 0.5*grad_1_chi[pp]*x33*(grad_1_gt5[pp]*x40 + x34*x45 + x86) + 0.5*grad_2_chi[pp]*x33*(grad_2_gt3[pp]*x40 + x135 + x137));
            double x381 = -grad_1_chi[pp];
            double x382 = 2.0*grad_2_alpha[pp];
            double x383 = 2.0*grad_1_alpha[pp];
            double x384 = -4*grad2_1_2_alpha[pp] + 1.0*grad_0_alpha[pp]*x10*(2.0*gt4[pp]*x24*x243 - 2.0*x23*x45 + 2.0*x43 - 2.0*x44) + x382*(1.0*grad_2_gt3[pp]*x10*x13 - x137*x31 - x158*x31 + x36*(1.0*gt4[pp]*x33*x41 + x381)) + x383*(1.0*grad_1_gt5[pp]*x10*x13 + 1.0*x10*x15*x45 - x31*x86 + x36*(1.0*gt4[pp]*x281*x33 + x32));
            double x385 = x167*x74;
            double x386 = -x70;
            double x387 = x108*x178;
            double x388 = 0.25*grad_2_gt0[pp]*x58;
            double x389 = -x129 + 0.5*x28*x99;
            double x390 = x142*x69 + x257;
            double x391 = x167*x348 + x353;
            double x392 = 0.25*x203;
            double x393 = -x159*x75;
            double x394 = x357 + x393;
            double x395 = x145*x167;
            double x396 = 0.5*grad_0_gt0[pp]*x173;
            double x397 = x119*x167 + x396;
            double x398 = 0.5*grad_2_gt5[pp]*x164;
            double x399 = x398 + x75*(x117 + x56);
            double x400 = 0.25*grad_0_gt0[pp]*x169;
            double x401 = x314 + x400;
            double x402 = x157*x178;
            double x403 = x324*x87;
            double x404 = x145*x159;
            double x405 = 0.5*grad_1_gt5[pp]*x164;
            double x406 = x151*x58 + x405;
            double x407 = 0.25*x372;
            double x408 = grad_2_gt0[pp]*x159;
            double x409 = grad_0_gt3[pp]*x28;
            double x410 = grad_1_gt0[pp]*x87;
            double x411 = x159*x45;
            double x412 = 1.0*x54;
            double x413 = 2.0*grad_0_gt2[pp]*x199*x53 + 2.0*grad_1_gt2[pp]*x195*x53 + 2.0*grad_2_gt2[pp]*x197*x53 + 1.0*gt2[pp]*x10*x24*x279 - x168*(0.5*grad_0_chi[pp]*x33*(x26*x34 + x71 + x76) + 0.5*grad_1_chi[pp]*x33*(grad_0_gt5[pp]*x40 + grad_2_gt0[pp]*x34 + x16*x26) + 0.5*grad_2_chi[pp]*x33*(x116 + x26*x40 + x57) + x166);
            double x414 = 2.0*grad_0_alpha[pp];
            double x415 = (-4)*grad2_0_2_alpha[pp] + 2.0*grad_1_alpha[pp]*x10*x29 + x382*(1.0*x10*x13*x26 - x31*x56 - x31*x57 + x42) + x414*(1.0*x10*x15*x26 - x31*x71 - x31*x72 + x37);
            double x416 = 0.25*x376;
            double x417 = 0.25*grad_1_gt5[pp]*x159;
            double x418 = x308*x75;
            double x419 = x104*x232 + x359;
            double x420 = 0.25*grad_2_gt3[pp]*x58 + x365;
            double x421 = x167*x210;
            double x422 = 0.5*grad_2_gt0[pp]*x175;
            double x423 = grad_0_gt5[pp]*x172;
            double x424 = grad_2_gt0[pp]*x169;
            double x425 = x167*x26 + x424;
            double x426 = x19*x378;
            double x427 = x226 + x409;
            double x428 = -x128*x89;
            double x429 = x58*x74;
            double x430 = x314 + x315;
            double x431 = x142*x178 + x400;
            double x432 = x119*x159 + x405;
            double x433 = 0.25*x411;
            double x434 = x356 + x393;
            double x435 = x111*x178;
            double x436 = x119*x162 + x164*x232;
            double x437 = 0.25*grad_1_gt0[pp]*x89;
            double x438 = 0.5*x162;
            double x439 = -x163*x61 - x438*x67;
            double x440 = x104*x142 + x209;
            double x441 = x299 + x422;
            double x442 = x172*x341;
            double x443 = x315 + x400;
            double x444 = x178*x232;
            double x445 = -x164*x67 - x438*x61;
            double x446 = x217 + 0.25*x45*x89;
            double x447 = 0.25*x132 - 0.25*x160 - 0.25*x161;
            double x448 = x447*x50;
            double x449 = 0.5*grad_2_gt0[pp]*x163 + x162*x341;
            double x450 = x172*x324;
            double x451 = 0.5*grad_0_gt0[pp]*x175;
            double x452 = x155*x172 + x451;
            double x453 = 0.5*grad_2_gt3[pp]*x164 + x447*x45;
            double x454 = x113*x94;
            double x455 = x211*(-grad_1_gt0[pp]*x15 - x13*x50 + x88) + x454;
            double x456 = x172*x210;
            double x457 = 0.25*grad_2_gt3[pp]*x162 + x142*x163;
            double x458 = -x102*x104;
            double x459 = x21*x378;
            double x460 = 2.0*grad2_0_0_gt1[pp]*x10*x23 + grad2_0_1_gt1[pp]*x240 + 1.0*grad2_0_2_gt1[pp]*x10*x147 + 2.0*grad2_1_1_gt1[pp]*x10*x16 + grad2_1_2_gt1[pp]*x238 + 2.0*grad2_2_2_gt1[pp]*x10*x21 + 2.0*grad_0_Gt0[pp]*gt1[pp] + 2.0*grad_0_Gt1[pp]*gt3[pp] + 2.0*grad_0_Gt2[pp]*gt4[pp] + 2.0*grad_0_gt1[pp]*x199*x53 + 2.0*grad_1_Gt0[pp]*gt0[pp] + 2.0*grad_1_Gt1[pp]*gt1[pp] + 2.0*grad_1_Gt2[pp]*gt2[pp] + grad_1_chi[pp]*x235 + 2.0*grad_1_gt1[pp]*x195*x53 + 2.0*grad_2_gt1[pp]*x197*x53 + 1.0*gt1[pp]*x10*x24*x279 - x168*(-grad2_0_1_chi[pp] + 0.5*grad_0_chi[pp]*x33*(grad_0_gt3[pp]*x34 + x51) + 0.5*grad_1_chi[pp]*x33*(grad_1_gt0[pp]*x34 + x40*x50 + x88) + 0.5*grad_2_chi[pp]*x33*(grad_0_gt3[pp]*x40 + x133));
            double x461 = -4*grad2_0_1_alpha[pp] + 1.0*grad_2_alpha[pp]*x10*(2.0*gt1[pp]*x24*x280 + 2.0*x132 - 2.0*x160 - 2.0*x161) + x383*(1.0*grad_1_gt0[pp]*x10*x15 + 1.0*x10*x13*x50 - x31*x88 + x36*(1.0*gt1[pp]*x281*x33 + x39)) + x414*(1.0*grad_0_gt3[pp]*x10*x15 - x170*x31 - x171*x31 + x36*(1.0*gt1[pp]*x33*x35 + x381));
            double x462 = 0.25*grad_0_gt3[pp]*x89;
            At_rhs02[pp] = At0[pp]*grad_2_beta0[pp] + At1[pp]*grad_2_beta1[pp] + 1.0*At2[pp]*grad_0_beta0[pp]*x0 - 0.66666666666666663*At2[pp]*grad_1_beta1[pp] + 1.0*At2[pp]*grad_2_beta2[pp]*x0 + At4[pp]*grad_0_beta1[pp] + At5[pp]*grad_0_beta2[pp] + agrad_0_At2[pp]*beta0[pp] + agrad_1_At2[pp]*beta1[pp] + agrad_2_At2[pp]*beta2[pp] - alpha[pp]*(2.0*At0[pp]*x10*(At4[pp]*x15 - At5[pp]*x19 + x1*x23) + 2.0*At1[pp]*x10*(At2[pp]*x15 - At4[pp]*x16 + At5[pp]*x13) + 2.0*At2[pp]*x10*(-At2[pp]*x19 + At4[pp]*x13 - At5[pp]*x21) + K[pp]*x1) + 0.083333333333333329*chi[pp]*(3*alpha[pp]*(-grad_1_gt2[pp]*x115*(x104*x16 + x114 - 1.0*x13*x87 - 1.0*x15*x89 + x19*x28 + x21*x93) - gt2[pp]*x10*x36*(2.0*grad_0_chi[pp]*x10*x199 + 2.0*grad_1_chi[pp]*x10*x195 + 2.0*grad_2_chi[pp]*x10*x197 + x183 + x185 + x187 - x188*x190 + x191*x192 - x193) + x124*(1.0*grad_0_gt5[pp]*x123 + x118*x119) + x124*(0.25*grad_0_gt0[pp]*x78 + 0.5*grad_2_gt0[pp]*x126 + x108*x126) - x131*(0.25*grad_1_gt5[pp]*x118 + 0.25*grad_2_gt5[pp]*x134 + x142*x143) + x131*(-0.25*grad_2_gt5[pp]*x134 - x118*x127 + x139*x75) + x131*(-x110*x82 - 0.25*x50*x78 + x52*x75) - x131*(x128*x89 + x129 - 0.5*x28*x99) + x147*x53*(x143*x83 + x149 + x150) - x148*(x118*x75 - x149 - x150) - x148*(x126*x61 + x145*x73 - x146*x82) - x154*(x118*x151 + x152) - x154*(x119*x139 + x152) - x154*(0.25*grad_0_gt0[pp]*x47 + x126*x142 + x145*x52) - x154*(0.25*grad_2_gt0[pp]*x52 + x126*x157 + x155*x78) - x165*x53*(-1.0*x13*x159 - 1.0*x15*x162 + x16*x163 + x164*x23 + x19*x58 + x21*x69) - x168*(0.5*grad_0_chi[pp]*x10*x167 + 0.5*grad_1_chi[pp]*x10*x28 + 0.5*grad_2_chi[pp]*x10*x58 + x166) - x179*x53*(-1.0*x13*x169 - 1.0*x15*x172 + x16*x175 + x167*x19 + x173*x21 + x178*x23) + 2.0*x19*x53*(grad_0_gt5[pp]*x126 + grad_2_gt0[pp]*x78) + x200*(0.5*grad_1_gt5[pp]*x134 + x139*x151) - 1.0*x201*(grad_0_gt5[pp]*x52 + grad_2_gt0[pp]*x47 + x45*x78) + x242 + x53*x55*(-0.5*grad_2_gt5[pp]*x58 + x70) + x54*(grad_1_gt0[pp]*x47 + x45*x52 + x50*x52) - x84*(0.25*grad_0_gt5[pp]*x73 + x75*x78 - x82*x83)) - 12*grad2_0_2_alpha[pp] - 6.0*grad_0_alpha[pp]*(1.0*grad_0_gt5[pp]*x10*x19 + 1.0*grad_2_gt0[pp]*x10*x23 - x30*x31 - x37) + 6.0*grad_1_alpha[pp]*x10*x29 - 6.0*grad_2_alpha[pp]*(1.0*grad_0_gt5[pp]*x10*x21 + 1.0*grad_2_gt0[pp]*x10*x19 - x31*x38 - x42) + 1.0*gt2[pp]*x10*(-x13*(alpha[pp]*(-x124*(x314 + x334) - x124*(0.5*grad_0_gt3[pp]*x28 + x216) + 2.0*x13*x53*(grad_2_gt3[pp]*x69 + x247) + x131*(x335 + x337) + x131*(x339 + x340) + x131*(x344 + x69*x99) + x131*(x104*x65 + x337) + x131*(x173*x311 + x342) - x148*(x257 + x350) - x148*(x272 + x351) - x148*(x345 + x347) - x148*(x347 + x349) - x148*(x352 + x354) - x148*(x355 + x358) + x154*(x208 + x360) + x154*(x360 + x363) + x154*(x361 + x362) + x154*(x364 + x366) - x200*(x306 + x368) - x200*(0.5*grad_1_gt3[pp]*x87 + x367) - x200*(x163*x65 + x307 + x369) + x219*(1.0*x258 + x329) + x292*(x301 + x371) + x292*(x372 + x374) - x379*(x318 + x377) + x380 - x84*(0.5*x270 + x330) - x84*(x265 + x331 + x65*x69)) + x384) - x13*(alpha[pp]*(-x124*(x315 + x334) - x124*(x162*x59 + x416) + 2.0*x13*x53*(grad_1_gt5[pp]*x104 + x283) + x131*(x339 + x342) + x131*(x344 + x417) + x131*(-x175*x61 + x340) + x131*(x343 + x417 + x69*x98) + x131*(x104*x229 + x335 + x336) - x148*(x256 + x358) - x148*(x350 + x357) - x148*(x351 + x418) + x154*(x208 + x419) + x154*(x297 + x366) + x154*(x297 + x420) + x154*(x304 + x362) + x154*(x209 + x289 + x363) + x154*(x407 + x421 + x422) - x200*(1.0*x296 + x369) - x200*(0.5*x298 + x368) - x200*(x104*x98 + x295 + x367) + x219*(x274 + x330) + x219*(0.5*grad_2_gt3[pp]*x93 + x273 + x329) + x222*(x346 + x349 + x428) - x379*(x215 + x427) + x380 - x426*(x423 + x425) - x426*(x202 + x204 + x268) - x84*(0.5*x261 + x331)) + x384) - x15*(alpha[pp]*(-x124*(0.5*x323 + x436) - x124*(0.5*grad_1_gt0[pp]*x178 + x321 + x435) + x131*(x214 + x359) + x131*(x359 + x440) + x131*(x364 + x439) + x131*(x361 + x422 + x442) - x148*(x319 + x445) - x148*(x332 + x431) - x148*(x416 + x432) - x148*(x430 + x444) + 2.0*x15*x53*(grad_0_gt3[pp]*x178 + grad_1_gt0[pp]*x172) + x154*(x448 + x453) + x154*(x455 + x462) + x154*(x164*x99 + x449) + x154*(0.5*grad_1_gt0[pp]*x104 + x454 + x462) + x154*(x178*x311 + x450 + x451) - x200*(x305 + x457) - x200*(0.5*grad_1_gt3[pp]*x89 + x458) - x200*(0.5*grad_1_gt0[pp]*x175 + x309 + x456) + x201*(x303 + x374) + x201*(x371 + x411) + x219*(x257 + x434) + x219*(0.5*grad_2_gt3[pp]*x28 + x392) + x222*(x218 + x313) + x222*(x313 + x446) + x231*(1.0*x317 + x437) - x459*(x271 + x425) + x460) + x461) + x16*(alpha[pp]*(2.0*grad2_0_0_gt3[pp]*x10*x23 - grad2_0_1_gt3[pp]*x239 + 1.0*grad2_0_2_gt3[pp]*x10*x147 + 2.0*grad2_1_1_gt3[pp]*x10*x16 - grad2_1_2_gt3[pp]*x237 + 2.0*grad2_2_2_gt3[pp]*x10*x21 + 2.0*grad_0_gt3[pp]*x199*x53 + 4*grad_1_Gt0[pp]*gt1[pp] + 4*grad_1_Gt1[pp]*gt3[pp] + 4*grad_1_Gt2[pp]*gt4[pp] - grad_1_gt3[pp]*x194*x249 + 2.0*grad_1_gt3[pp]*x195*x53 + 2.0*grad_2_gt3[pp]*x197*x53 + 1.0*gt3[pp]*x10*x24*x279 - x124*x162*(x250 + x287) - x124*x172*(x109 + x285) + 2.0*x13*x53*(grad_0_gt3[pp]*x169 + x298) + 2.0*x13*x53*(grad_1_gt3[pp]*x87 + x290) + 2.0*x13*x53*(grad_2_gt3[pp]*x159 + x296) + x130*x53*(-2*x163*x67 + x307) + x130*x53*(x175*x26 + x306) + x131*(1.0*x290 + x295) - x148*(0.5*grad_2_gt3[pp]*x89 + x289) - x148*(x100*x87 + x209) - x148*(x111*x169 + x304) - x148*(x159*x232 + x297) - x148*(-1.0*x162*x67 + x302) - x148*(x172*x232 + x299) + 2.0*x15*x53*(grad_0_gt3[pp]*x172 + grad_1_gt0[pp]*x175) + x153*x53*(2*x111*x175 + x309) + x153*x53*(x163*x26 + x305) + x154*(1.0*x291 + x294) - x159*x84*(-x127 + x66) - x163*x200*(x97 + x98) - x168*(-grad2_1_1_chi[pp] + 1.0*grad_0_chi[pp]*x33*(grad_1_gt3[pp]*x310 + x174 + x23*x311) + 1.0*grad_1_chi[pp]*x33*(x311*x34 + x40*x99 + x95) + 1.0*grad_2_chi[pp]*x33*(grad_1_gt3[pp]*x277 + x19*x311 + x21*x99)) - x169*x84*(x254 + x286 + x288) - x175*x200*(x100 + x101) - x180*x234 - x246*x282 - x283*x284 + x293*(grad_1_gt3[pp]*x89 + x291) + x293*(grad_2_gt3[pp]*x162 + x300)) - 4*grad2_1_1_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt3[pp]*x24*x243 + x175) + 4*grad_1_alpha[pp]*(1.0*x10*x13*x99 + 1.0*x10*x96 - x103*x31 + x36*(-1.0*grad_1_chi[pp] + 0.5*gt3[pp]*x281*x33)) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt3[pp]*x24*x280 + x163)) + x19*(alpha[pp]*(-x124*(1.0*x320 + x388) - x124*(0.5*grad_2_gt0[pp]*x178 + x322 + x387) + x131*(x257 + x394) + x131*(x357 + x390) + x131*(x389 + x428) + x131*(x391 + x418) - x148*(x399 + x429) - x148*(0.5*grad_2_gt0[pp]*x69 + x398 + x429) - x148*(x178*x92 + x395 + x396) + x154*(x316 + x406) + x154*(x316 + x432) + x154*(x333 + x431) + x154*(x402 + x430) - x200*(0.5*grad_1_gt5[pp]*x162 + x433) + x201*(x271 + x423 + x424) + x219*(0.5*grad_2_gt5[pp]*x58 + x386) + x242 - x264*(grad_0_gt5[pp]*x178 + grad_2_gt0[pp]*x167) - x412*(x303 + x372 + x373) + x413 - x84*(0.5*grad_2_gt0[pp]*x173 + x276 + x385)) + x415) + x19*(alpha[pp]*(-x124*(x233 + x325) - x124*(0.5*grad_0_gt0[pp]*x167 + x387) - x124*(x164*x59 + x328 + x388) + x131*(x256 + x390) + x131*(x267 + x354) + x131*(x267 + x391) + x131*(x269 + x389) + x131*(x355 + x394) + x131*(x345 + x346 + x392) - x148*(x224 + x230) - x148*(x395 + x397) - x148*(x108*x69 + x399) - x148*(x111*x93 + x225) - x148*(x178*x59 + x397) + x154*(x228 + x403) + x154*(x333 + x401) + x154*(x401 + x402) + x154*(x404 + x406) - x200*(0.5*grad_1_gt0[pp]*x169 + x407) - x200*(x208 + x213 + x289) + x219*(1.0*grad_2_gt0[pp]*x173 + x385) + x241 - x264*(grad_2_gt0[pp]*x69 + x244) + x292*(x215 + x409 + x410) + x292*(x318 + x375 + x408) - x412*(x301 + x370 + x411) + x413 - x84*(x221 + x232*x93) - x84*(x266 + x386 + x59*x69)) + x415) + x21*(alpha[pp]*(2.0*grad2_0_0_gt5[pp]*x10*x23 - grad2_0_1_gt5[pp]*x239 + 1.0*grad2_0_2_gt5[pp]*x10*x147 + 2.0*grad2_1_1_gt5[pp]*x10*x16 - grad2_1_2_gt5[pp]*x237 + 2.0*grad2_2_2_gt5[pp]*x10*x21 + 2.0*grad_0_gt5[pp]*x199*x53 + 2.0*grad_1_gt5[pp]*x195*x53 + 4*grad_2_Gt0[pp]*gt2[pp] + 4*grad_2_Gt1[pp]*gt4[pp] + 4*grad_2_Gt2[pp]*gt5[pp] - grad_2_gt5[pp]*x196*x249 + 2.0*grad_2_gt5[pp]*x197*x53 + 1.0*gt5[pp]*x10*x24*x279 - x124*x167*(x107 + x144) - x124*x28*(x250 + x251 + x253) + 2.0*x13*x53*(x261 + x262) + 2.0*x13*x53*(grad_0_gt5[pp]*x169 + x270) + 2.0*x13*x53*(grad_1_gt5[pp]*x87 + x258) + x130*x53*(x273 + 2*x93*x99) + x130*x53*(x173*x50 + x274) + x131*(1.0*x262 + x265) - x148*(x220 + x50*x93) - x148*(1.0*x263 + x266) - x148*(x173*(-1.0*grad_2_gt0[pp] + x179) + x276) + x153*x53*(x269 + x28*x99) + x153*x53*(x108*x169 + x272) + x154*(x259 + x260*x87) + x154*(0.5*grad_1_gt5[pp]*x58 + x256) + x154*(x159*x59 + x257) + x154*(x167*x260 + x267) - x168*(-grad2_2_2_chi[pp] + 1.0*grad_0_chi[pp]*x33*(x229*x34 + x23*x92 + x80) + 1.0*grad_1_chi[pp]*x33*(grad_2_gt5[pp]*x277 + x16*x229 + x34*x92) + 1.0*grad_2_chi[pp]*x33*(x19*x92 + x229*x40 + x63)) - x169*x200*(x253 + x254 + x255) - x173*x84*(x59 + x60) - x186*x234 - x200*x87*(x206 + x97) - x244*x246 - x247*x248 - x264*(grad_0_gt5[pp]*x167 + grad_2_gt0[pp]*x173) - x264*(grad_1_gt5[pp]*x28 + x26*x93) - x264*(grad_2_gt5[pp]*x58 + x263) - x84*x93*(x65 + x66)) + (-4)*grad2_2_2_alpha[pp] + 4.0*grad_0_alpha[pp]*x10*(0.5*gt5[pp]*x24*x243 + x173) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt5[pp]*x24*x25 + x93) + 4*grad_2_alpha[pp]*(1.0*x10*x19*x61 - x10*x63 - x31*x68 + x36*(-1.0*grad_2_chi[pp] + 0.5*gt5[pp]*x33*x41))) + x23*(alpha[pp]*(2.0*grad2_0_0_gt0[pp]*x10*x23 - grad2_0_1_gt0[pp]*x239 + 1.0*grad2_0_2_gt0[pp]*x10*x147 + 2.0*grad2_1_1_gt0[pp]*x10*x16 - grad2_1_2_gt0[pp]*x237 + 2.0*grad2_2_2_gt0[pp]*x10*x21 + 4*grad_0_Gt0[pp]*gt0[pp] + 4*grad_0_Gt1[pp]*gt1[pp] + 4*grad_0_Gt2[pp]*gt2[pp] - grad_0_gt0[pp]*x198*x249 + 2.0*grad_0_gt0[pp]*x199*x53 - grad_1_gt0[pp]*x172*x248 + 2.0*grad_1_gt0[pp]*x195*x53 - grad_2_gt0[pp]*x167*x284 + 2.0*grad_2_gt0[pp]*x197*x53 + 1.0*gt0[pp]*x10*x24*x279 - x113*x124*(x109 + x110) - x124*x164*(x107 + x83) + x131*(x313 + 0.5*x45*x89) + x131*(x316 + 0.5*x45*x58) + x131*(0.5*grad_1_gt0[pp]*x167 + x315) + x131*(0.5*grad_2_gt0[pp]*x172 + x314) + x131*(-1.0*x102*x28 + x227) + x131*(-1.0*x162*x61 + x319) - x148*(1.0*grad_2_gt0[pp]*x178 + x322) - x148*(x113*x45 + x325) - x148*(x164*(-grad_0_gt5[pp] + x165) + x328) + x153*x53*(-2*x102*x113 + x326) + x153*x53*(x164*x45 + x327) + x154*(1.0*grad_1_gt0[pp]*x178 + x321) - x162*x200*(x252 + x255 + x312) - x168*(-grad2_0_0_chi[pp] + 1.0*grad_0_chi[pp]*x33*(x111*x34 + x125) + 1.0*grad_1_chi[pp]*x33*(grad_0_gt0[pp]*x310 + x108*x40 + x112) + 1.0*grad_2_chi[pp]*x33*(x111*x40 + x122)) - x184*x234 - x200*x89*(x101 - x210) - x264*(grad_0_gt0[pp]*x167 + grad_2_gt0[pp]*x178) - x264*(grad_1_gt0[pp]*x28 + x113*x26) - x264*(grad_2_gt0[pp]*x58 + x320) - x28*x84*(x251 + x288 + x312) + x293*(grad_0_gt0[pp]*x172 + grad_1_gt0[pp]*x178) + x293*(grad_1_gt0[pp]*x89 + x317) + x293*(grad_2_gt0[pp]*x162 + x323) - x58*x84*(x60 - x74)) - 4*grad2_0_0_alpha[pp] + 4*grad_0_alpha[pp]*(1.0*x10*x111*x15 - x10*x176 - x177*x31 + x36*(-1.0*grad_0_chi[pp] + 0.5*gt0[pp]*x33*x35)) + 4.0*grad_1_alpha[pp]*x10*(0.5*gt0[pp]*x24*x25 + x113) + 4.0*grad_2_alpha[pp]*x10*(0.5*gt0[pp]*x24*x280 + x164)) + x34*(alpha[pp]*(-x124*(x327 + x436) - x124*(0.5*grad_0_gt0[pp]*x172 + x435) - x124*(x100*x113 + x326 + x437) + x131*(x213 + x419) + x131*(x289 + x440) + x131*(x302 + x439) + x131*(x420 + x433) + x131*(x421 + x441) + x131*(x441 + x442) - x148*(x332 + x443) - x148*(x403 + x446) - x148*(x404 + x445) - x148*(x443 + x444) + x154*(x448 + x449) + x154*(x450 + x452) + x154*(x100*x178 + x452) + x154*(x104*x111 + x455) + x154*(x108*x163 + x453) - x200*(0.5*x300 + x457) - x200*(1.0*grad_1_gt0[pp]*x175 + x456) - x200*(x100*x104 + x294 + x458) + x219*(x256 + x434) + x293*(grad_1_gt0[pp]*x104 + x282) - x426*(x377 + x408) - x426*(x410 + x427) - x459*(x205 + x268) + x460 - x84*(0.5*grad_2_gt0[pp]*x169 + x352)) + x461)));
        }
    }
}
bssn::timer::t_rhs.stop();

free(_2712);
free(_3350);
free(_4380);
free(_2526);
free(_3970);
free(_3552);
free(DENDRO_972);
free(DENDRO_991);
free(_2203);
free(_2093);
free(_1755);
free(_1971);
free(_1872);
free(_1636);
free(_1534);
free(_1412);
free(_1309);
free(_3380);
free(_4000);
free(_3579);
free(_4477);
free(_4135);
free(_4165);
free(_3108);
free(_3144);
free(_4478);
free(_3720);
free(_3748);
free(DENDRO_979);
