#include "bssneqn_solve.h"
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
// #include <math.h>
#include <iostream>
// #include <stdio.h>
using namespace std;

__constant__ double ETA_CONST=0.1;
__constant__ double ETA_R0=0.1;
__constant__ double ETA_DAMPING_EXP=0.1;
__constant__ unsigned int lambda[4]={1,2,3,4};
__constant__ double lambda_f[2]={0.8,0.9};

__global__ void cuda_bssn_eqns_points(int * dev_sz, double * dev_pmin, double * dev_dy_hz, double * dev_dy_hy, double * dev_dy_hx, 
    double * dev_var_in, double * dev_var_out,

    double *grad_0_alpha,
    double *grad_1_alpha,
    double *grad_2_alpha,
    double *grad_0_beta0,
    double *grad_1_beta0,
    double *grad_2_beta0,
    double *grad_0_beta1,
    double *grad_1_beta1,
    double *grad_2_beta1,
    double *grad_0_beta2,
    double *grad_1_beta2,
    double *grad_2_beta2,
    double *grad_0_B0,
    double *grad_1_B0,
    double *grad_2_B0,
    double *grad_0_B1,
    double *grad_1_B1,
    double *grad_2_B1,
    double *grad_0_B2,
    double *grad_1_B2,
    double *grad_2_B2,
    double *grad_0_chi,
    double *grad_1_chi,
    double *grad_2_chi,
    double *grad_0_Gt0,
    double *grad_1_Gt0,
    double *grad_2_Gt0,
    double *grad_0_Gt1,
    double *grad_1_Gt1,
    double *grad_2_Gt1,
    double *grad_0_Gt2,
    double *grad_1_Gt2,
    double *grad_2_Gt2,
    double *grad_0_K,
    double *grad_1_K,
    double *grad_2_K,
    double *grad_0_gt0,
    double *grad_1_gt0,
    double *grad_2_gt0,
    double *grad_0_gt1,
    double *grad_1_gt1,
    double *grad_2_gt1,
    double *grad_0_gt2,
    double *grad_1_gt2,
    double *grad_2_gt2,
    double *grad_0_gt3,
    double *grad_1_gt3,
    double *grad_2_gt3,
    double *grad_0_gt4,
    double *grad_1_gt4,
    double *grad_2_gt4,
    double *grad_0_gt5,
    double *grad_1_gt5,
    double *grad_2_gt5,
    double *grad_0_At0,
    double *grad_1_At0,
    double *grad_2_At0,
    double *grad_0_At1,
    double *grad_1_At1,
    double *grad_2_At1,
    double *grad_0_At2,
    double *grad_1_At2,
    double *grad_2_At2,
    double *grad_0_At3,
    double *grad_1_At3,
    double *grad_2_At3,
    double *grad_0_At4,
    double *grad_1_At4,
    double *grad_2_At4,
    double *grad_0_At5,
    double *grad_1_At5,
    double *grad_2_At5,
    double *grad2_0_0_gt0,
    double *grad2_0_1_gt0,
    double *grad2_0_2_gt0,
    double *grad2_1_1_gt0,
    double *grad2_1_2_gt0,
    double *grad2_2_2_gt0,
    double *grad2_0_0_gt1,
    double *grad2_0_1_gt1,
    double *grad2_0_2_gt1,
    double *grad2_1_1_gt1,
    double *grad2_1_2_gt1,
    double *grad2_2_2_gt1,
    double *grad2_0_0_gt2,
    double *grad2_0_1_gt2,
    double *grad2_0_2_gt2,
    double *grad2_1_1_gt2,
    double *grad2_1_2_gt2,
    double *grad2_2_2_gt2,
    double *grad2_0_0_gt3,
    double *grad2_0_1_gt3,
    double *grad2_0_2_gt3,
    double *grad2_1_1_gt3,
    double *grad2_1_2_gt3,
    double *grad2_2_2_gt3,
    double *grad2_0_0_gt4,
    double *grad2_0_1_gt4,
    double *grad2_0_2_gt4,
    double *grad2_1_1_gt4,
    double *grad2_1_2_gt4,
    double *grad2_2_2_gt4,
    double *grad2_0_0_gt5,
    double *grad2_0_1_gt5,
    double *grad2_0_2_gt5,
    double *grad2_1_1_gt5,
    double *grad2_1_2_gt5,
    double *grad2_2_2_gt5,
    double *grad2_0_0_chi,
    double *grad2_0_1_chi,
    double *grad2_0_2_chi,
    double *grad2_1_1_chi,
    double *grad2_1_2_chi,
    double *grad2_2_2_chi,
    double *grad2_0_0_alpha,
    double *grad2_0_1_alpha,
    double *grad2_0_2_alpha,
    double *grad2_1_1_alpha,
    double *grad2_1_2_alpha,
    double *grad2_2_2_alpha,
    double *grad2_0_0_beta0,
    double *grad2_0_1_beta0,
    double *grad2_0_2_beta0,
    double *grad2_1_1_beta0,
    double *grad2_1_2_beta0,
    double *grad2_2_2_beta0,
    double *grad2_0_0_beta1,
    double *grad2_0_1_beta1,
    double *grad2_0_2_beta1,
    double *grad2_1_1_beta1,
    double *grad2_1_2_beta1,
    double *grad2_2_2_beta1,
    double *grad2_0_0_beta2,
    double *grad2_0_1_beta2,
    double *grad2_0_2_beta2,
    double *grad2_1_1_beta2,
    double *grad2_1_2_beta2,
    double *grad2_2_2_beta2,
    
    double *agrad_0_gt0,
    double *agrad_1_gt0,
    double *agrad_2_gt0,
    double *agrad_0_gt1,
    double *agrad_1_gt1,
    double *agrad_2_gt1,
    double *agrad_0_gt2,
    double *agrad_1_gt2,
    double *agrad_2_gt2,
    double *agrad_0_gt3,
    double *agrad_1_gt3,
    double *agrad_2_gt3,
    double *agrad_0_gt4,
    double *agrad_1_gt4,
    double *agrad_2_gt4,
    double *agrad_0_gt5,
    double *agrad_1_gt5,
    double *agrad_2_gt5,
    double *agrad_0_At0,
    double *agrad_1_At0,
    double *agrad_2_At0,
    double *agrad_0_At1,
    double *agrad_1_At1,
    double *agrad_2_At1,
    double *agrad_0_At2,
    double *agrad_1_At2,
    double *agrad_2_At2,
    double *agrad_0_At3,
    double *agrad_1_At3,
    double *agrad_2_At3,
    double *agrad_0_At4,
    double *agrad_1_At4,
    double *agrad_2_At4,
    double *agrad_0_At5,
    double *agrad_1_At5,
    double *agrad_2_At5,
    double *agrad_0_alpha,
    double *agrad_1_alpha,
    double *agrad_2_alpha,
    double *agrad_0_beta0,
    double *agrad_1_beta0,
    double *agrad_2_beta0,
    double *agrad_0_beta1,
    double *agrad_1_beta1,
    double *agrad_2_beta1,
    double *agrad_0_beta2,
    double *agrad_1_beta2,
    double *agrad_2_beta2,
    double *agrad_0_chi,
    double *agrad_1_chi,
    double *agrad_2_chi,
    double *agrad_0_Gt0,
    double *agrad_1_Gt0,
    double *agrad_2_Gt0,
    double *agrad_0_Gt1,
    double *agrad_1_Gt1,
    double *agrad_2_Gt1,
    double *agrad_0_Gt2,
    double *agrad_1_Gt2,
    double *agrad_2_Gt2,
    double *agrad_0_K,
    double *agrad_1_K,
    double *agrad_2_K,
    double *agrad_0_B0,
    double *agrad_1_B0,
    double *agrad_2_B0,
    double *agrad_0_B1,
    double *agrad_1_B1,
    double *agrad_2_B1,
    double *agrad_0_B2,
    double *agrad_1_B2,
    double *agrad_2_B2,
    
    int *dev_alphaInt,
    int *dev_chiInt,
    int *dev_KInt,
    int *dev_gt0Int,
    int *dev_gt1Int,
    int *dev_gt2Int,
    int *dev_gt3Int,
    int *dev_gt4Int,
    int *dev_gt5Int,
    int *dev_beta0Int,
    int *dev_beta1Int,
    int *dev_beta2Int,
    int *dev_At0Int,
    int *dev_At1Int,
    int *dev_At2Int,
    int *dev_At3Int,
    int *dev_At4Int,
    int *dev_At5Int,
    int *dev_Gt0Int,
    int *dev_Gt1Int,
    int *dev_Gt2Int,
    int *dev_B0Int,
    int *dev_B1Int,
    int *dev_B2Int
    
)
{
    int id = blockIdx.x*100 + threadIdx.x;

    int i = id%(dev_sz[0]-6) + 3;
    int j = ((id/(dev_sz[0]-6))%(dev_sz[1]-6)) + 3;
    int k = (id/(dev_sz[2]-6)/(dev_sz[1]-6)) + 3;

    if (k>=dev_sz[2]-3) return;

    double z = dev_pmin[2] + *dev_dy_hz*k;
    double y = dev_pmin[1] + *dev_dy_hy*j;
    double x = dev_pmin[0] + *dev_dy_hx*i;

    // if (i==5 && j==5 && k==6){
    //     printf("%f | %f | %f\n", z, y ,x);
    // }

    int pp = i + (dev_sz[0]-3)*(j + (dev_sz[1]-3)*k);
    double r_coord = sqrt(x*x + y*y + z*z);
    double eta = ETA_CONST;
    if (r_coord >= ETA_R0) {
        eta *= pow( (ETA_R0/r_coord), ETA_DAMPING_EXP);
        // printf("%f\n", eta);
    }
    #include "cuda_bssneqs.h"

}

void calc_bssn_eqns(const unsigned int * sz, int * dev_sz, double * dev_pmin, double * dev_dy_hz, double * dev_dy_hy, double * dev_dy_hx, 
double * dev_var_in, double * dev_var_out,

double *grad_0_alpha,
double *grad_1_alpha,
double *grad_2_alpha,
double *grad_0_beta0,
double *grad_1_beta0,
double *grad_2_beta0,
double *grad_0_beta1,
double *grad_1_beta1,
double *grad_2_beta1,
double *grad_0_beta2,
double *grad_1_beta2,
double *grad_2_beta2,
double *grad_0_B0,
double *grad_1_B0,
double *grad_2_B0,
double *grad_0_B1,
double *grad_1_B1,
double *grad_2_B1,
double *grad_0_B2,
double *grad_1_B2,
double *grad_2_B2,
double *grad_0_chi,
double *grad_1_chi,
double *grad_2_chi,
double *grad_0_Gt0,
double *grad_1_Gt0,
double *grad_2_Gt0,
double *grad_0_Gt1,
double *grad_1_Gt1,
double *grad_2_Gt1,
double *grad_0_Gt2,
double *grad_1_Gt2,
double *grad_2_Gt2,
double *grad_0_K,
double *grad_1_K,
double *grad_2_K,
double *grad_0_gt0,
double *grad_1_gt0,
double *grad_2_gt0,
double *grad_0_gt1,
double *grad_1_gt1,
double *grad_2_gt1,
double *grad_0_gt2,
double *grad_1_gt2,
double *grad_2_gt2,
double *grad_0_gt3,
double *grad_1_gt3,
double *grad_2_gt3,
double *grad_0_gt4,
double *grad_1_gt4,
double *grad_2_gt4,
double *grad_0_gt5,
double *grad_1_gt5,
double *grad_2_gt5,
double *grad_0_At0,
double *grad_1_At0,
double *grad_2_At0,
double *grad_0_At1,
double *grad_1_At1,
double *grad_2_At1,
double *grad_0_At2,
double *grad_1_At2,
double *grad_2_At2,
double *grad_0_At3,
double *grad_1_At3,
double *grad_2_At3,
double *grad_0_At4,
double *grad_1_At4,
double *grad_2_At4,
double *grad_0_At5,
double *grad_1_At5,
double *grad_2_At5,
double *grad2_0_0_gt0,
double *grad2_0_1_gt0,
double *grad2_0_2_gt0,
double *grad2_1_1_gt0,
double *grad2_1_2_gt0,
double *grad2_2_2_gt0,
double *grad2_0_0_gt1,
double *grad2_0_1_gt1,
double *grad2_0_2_gt1,
double *grad2_1_1_gt1,
double *grad2_1_2_gt1,
double *grad2_2_2_gt1,
double *grad2_0_0_gt2,
double *grad2_0_1_gt2,
double *grad2_0_2_gt2,
double *grad2_1_1_gt2,
double *grad2_1_2_gt2,
double *grad2_2_2_gt2,
double *grad2_0_0_gt3,
double *grad2_0_1_gt3,
double *grad2_0_2_gt3,
double *grad2_1_1_gt3,
double *grad2_1_2_gt3,
double *grad2_2_2_gt3,
double *grad2_0_0_gt4,
double *grad2_0_1_gt4,
double *grad2_0_2_gt4,
double *grad2_1_1_gt4,
double *grad2_1_2_gt4,
double *grad2_2_2_gt4,
double *grad2_0_0_gt5,
double *grad2_0_1_gt5,
double *grad2_0_2_gt5,
double *grad2_1_1_gt5,
double *grad2_1_2_gt5,
double *grad2_2_2_gt5,
double *grad2_0_0_chi,
double *grad2_0_1_chi,
double *grad2_0_2_chi,
double *grad2_1_1_chi,
double *grad2_1_2_chi,
double *grad2_2_2_chi,
double *grad2_0_0_alpha,
double *grad2_0_1_alpha,
double *grad2_0_2_alpha,
double *grad2_1_1_alpha,
double *grad2_1_2_alpha,
double *grad2_2_2_alpha,
double *grad2_0_0_beta0,
double *grad2_0_1_beta0,
double *grad2_0_2_beta0,
double *grad2_1_1_beta0,
double *grad2_1_2_beta0,
double *grad2_2_2_beta0,
double *grad2_0_0_beta1,
double *grad2_0_1_beta1,
double *grad2_0_2_beta1,
double *grad2_1_1_beta1,
double *grad2_1_2_beta1,
double *grad2_2_2_beta1,
double *grad2_0_0_beta2,
double *grad2_0_1_beta2,
double *grad2_0_2_beta2,
double *grad2_1_1_beta2,
double *grad2_1_2_beta2,
double *grad2_2_2_beta2,

double *agrad_0_gt0,
double *agrad_1_gt0,
double *agrad_2_gt0,
double *agrad_0_gt1,
double *agrad_1_gt1,
double *agrad_2_gt1,
double *agrad_0_gt2,
double *agrad_1_gt2,
double *agrad_2_gt2,
double *agrad_0_gt3,
double *agrad_1_gt3,
double *agrad_2_gt3,
double *agrad_0_gt4,
double *agrad_1_gt4,
double *agrad_2_gt4,
double *agrad_0_gt5,
double *agrad_1_gt5,
double *agrad_2_gt5,
double *agrad_0_At0,
double *agrad_1_At0,
double *agrad_2_At0,
double *agrad_0_At1,
double *agrad_1_At1,
double *agrad_2_At1,
double *agrad_0_At2,
double *agrad_1_At2,
double *agrad_2_At2,
double *agrad_0_At3,
double *agrad_1_At3,
double *agrad_2_At3,
double *agrad_0_At4,
double *agrad_1_At4,
double *agrad_2_At4,
double *agrad_0_At5,
double *agrad_1_At5,
double *agrad_2_At5,
double *agrad_0_alpha,
double *agrad_1_alpha,
double *agrad_2_alpha,
double *agrad_0_beta0,
double *agrad_1_beta0,
double *agrad_2_beta0,
double *agrad_0_beta1,
double *agrad_1_beta1,
double *agrad_2_beta1,
double *agrad_0_beta2,
double *agrad_1_beta2,
double *agrad_2_beta2,
double *agrad_0_chi,
double *agrad_1_chi,
double *agrad_2_chi,
double *agrad_0_Gt0,
double *agrad_1_Gt0,
double *agrad_2_Gt0,
double *agrad_0_Gt1,
double *agrad_1_Gt1,
double *agrad_2_Gt1,
double *agrad_0_Gt2,
double *agrad_1_Gt2,
double *agrad_2_Gt2,
double *agrad_0_K,
double *agrad_1_K,
double *agrad_2_K,
double *agrad_0_B0,
double *agrad_1_B0,
double *agrad_2_B0,
double *agrad_0_B1,
double *agrad_1_B1,
double *agrad_2_B1,
double *agrad_0_B2,
double *agrad_1_B2,
double *agrad_2_B2,

int *dev_alphaInt,
int *dev_chiInt,
int *dev_KInt,
int *dev_gt0Int,
int *dev_gt1Int,
int *dev_gt2Int,
int *dev_gt3Int,
int *dev_gt4Int,
int *dev_gt5Int,
int *dev_beta0Int,
int *dev_beta1Int,
int *dev_beta2Int,
int *dev_At0Int,
int *dev_At1Int,
int *dev_At2Int,
int *dev_At3Int,
int *dev_At4Int,
int *dev_At5Int,
int *dev_Gt0Int,
int *dev_Gt1Int,
int *dev_Gt2Int,
int *dev_B0Int,
int *dev_B1Int,
int *dev_B2Int

){
    int total_points = (sz[2]-6)*(sz[1]-6)*(sz[0]-6);
    int blocks = 32;
    int threads_per_block = 100;
    int points_at_once = threads_per_block*blocks;
    int loops = total_points/points_at_once;

    cudaError_t cudaStatus;
    // full
    for(int i=0; i<loops; i++){
        int offset = i*points_at_once;

        int * dev_offset;
        cudaStatus = cudaMalloc((void **) &dev_offset, sizeof(int));
        if (cudaStatus != cudaSuccess) {fprintf(stderr, "dev_offset cudaMalloc failed!\n"); return;}
        cudaStatus = cudaMemcpy(dev_offset, &offset, sizeof(int), cudaMemcpyHostToDevice);
        if (cudaStatus != cudaSuccess) {fprintf(stderr, "dev_offset cudaMemcpy failed!\n"); return;}

        cuda_bssn_eqns_points<<< blocks, threads_per_block >>>(dev_sz, dev_pmin, dev_dy_hz, dev_dy_hy, dev_dy_hx, dev_var_in, dev_var_out,
            grad_0_alpha,
            grad_1_alpha,
            grad_2_alpha,
            grad_0_beta0,
            grad_1_beta0,
            grad_2_beta0,
            grad_0_beta1,
            grad_1_beta1,
            grad_2_beta1,
            grad_0_beta2,
            grad_1_beta2,
            grad_2_beta2,
            grad_0_B0,
            grad_1_B0,
            grad_2_B0,
            grad_0_B1,
            grad_1_B1,
            grad_2_B1,
            grad_0_B2,
            grad_1_B2,
            grad_2_B2,
            grad_0_chi,
            grad_1_chi,
            grad_2_chi,
            grad_0_Gt0,
            grad_1_Gt0,
            grad_2_Gt0,
            grad_0_Gt1,
            grad_1_Gt1,
            grad_2_Gt1,
            grad_0_Gt2,
            grad_1_Gt2,
            grad_2_Gt2,
            grad_0_K,
            grad_1_K,
            grad_2_K,
            grad_0_gt0,
            grad_1_gt0,
            grad_2_gt0,
            grad_0_gt1,
            grad_1_gt1,
            grad_2_gt1,
            grad_0_gt2,
            grad_1_gt2,
            grad_2_gt2,
            grad_0_gt3,
            grad_1_gt3,
            grad_2_gt3,
            grad_0_gt4,
            grad_1_gt4,
            grad_2_gt4,
            grad_0_gt5,
            grad_1_gt5,
            grad_2_gt5,
            grad_0_At0,
            grad_1_At0,
            grad_2_At0,
            grad_0_At1,
            grad_1_At1,
            grad_2_At1,
            grad_0_At2,
            grad_1_At2,
            grad_2_At2,
            grad_0_At3,
            grad_1_At3,
            grad_2_At3,
            grad_0_At4,
            grad_1_At4,
            grad_2_At4,
            grad_0_At5,
            grad_1_At5,
            grad_2_At5,
            grad2_0_0_gt0,
            grad2_0_1_gt0,
            grad2_0_2_gt0,
            grad2_1_1_gt0,
            grad2_1_2_gt0,
            grad2_2_2_gt0,
            grad2_0_0_gt1,
            grad2_0_1_gt1,
            grad2_0_2_gt1,
            grad2_1_1_gt1,
            grad2_1_2_gt1,
            grad2_2_2_gt1,
            grad2_0_0_gt2,
            grad2_0_1_gt2,
            grad2_0_2_gt2,
            grad2_1_1_gt2,
            grad2_1_2_gt2,
            grad2_2_2_gt2,
            grad2_0_0_gt3,
            grad2_0_1_gt3,
            grad2_0_2_gt3,
            grad2_1_1_gt3,
            grad2_1_2_gt3,
            grad2_2_2_gt3,
            grad2_0_0_gt4,
            grad2_0_1_gt4,
            grad2_0_2_gt4,
            grad2_1_1_gt4,
            grad2_1_2_gt4,
            grad2_2_2_gt4,
            grad2_0_0_gt5,
            grad2_0_1_gt5,
            grad2_0_2_gt5,
            grad2_1_1_gt5,
            grad2_1_2_gt5,
            grad2_2_2_gt5,
            grad2_0_0_chi,
            grad2_0_1_chi,
            grad2_0_2_chi,
            grad2_1_1_chi,
            grad2_1_2_chi,
            grad2_2_2_chi,
            grad2_0_0_alpha,
            grad2_0_1_alpha,
            grad2_0_2_alpha,
            grad2_1_1_alpha,
            grad2_1_2_alpha,
            grad2_2_2_alpha,
            grad2_0_0_beta0,
            grad2_0_1_beta0,
            grad2_0_2_beta0,
            grad2_1_1_beta0,
            grad2_1_2_beta0,
            grad2_2_2_beta0,
            grad2_0_0_beta1,
            grad2_0_1_beta1,
            grad2_0_2_beta1,
            grad2_1_1_beta1,
            grad2_1_2_beta1,
            grad2_2_2_beta1,
            grad2_0_0_beta2,
            grad2_0_1_beta2,
            grad2_0_2_beta2,
            grad2_1_1_beta2,
            grad2_1_2_beta2,
            grad2_2_2_beta2,
            agrad_0_gt0,
            agrad_1_gt0,
            agrad_2_gt0,
            agrad_0_gt1,
            agrad_1_gt1,
            agrad_2_gt1,
            agrad_0_gt2,
            agrad_1_gt2,
            agrad_2_gt2,
            agrad_0_gt3,
            agrad_1_gt3,
            agrad_2_gt3,
            agrad_0_gt4,
            agrad_1_gt4,
            agrad_2_gt4,
            agrad_0_gt5,
            agrad_1_gt5,
            agrad_2_gt5,
            agrad_0_At0,
            agrad_1_At0,
            agrad_2_At0,
            agrad_0_At1,
            agrad_1_At1,
            agrad_2_At1,
            agrad_0_At2,
            agrad_1_At2,
            agrad_2_At2,
            agrad_0_At3,
            agrad_1_At3,
            agrad_2_At3,
            agrad_0_At4,
            agrad_1_At4,
            agrad_2_At4,
            agrad_0_At5,
            agrad_1_At5,
            agrad_2_At5,
            agrad_0_alpha,
            agrad_1_alpha,
            agrad_2_alpha,
            agrad_0_beta0,
            agrad_1_beta0,
            agrad_2_beta0,
            agrad_0_beta1,
            agrad_1_beta1,
            agrad_2_beta1,
            agrad_0_beta2,
            agrad_1_beta2,
            agrad_2_beta2,
            agrad_0_chi,
            agrad_1_chi,
            agrad_2_chi,
            agrad_0_Gt0,
            agrad_1_Gt0,
            agrad_2_Gt0,
            agrad_0_Gt1,
            agrad_1_Gt1,
            agrad_2_Gt1,
            agrad_0_Gt2,
            agrad_1_Gt2,
            agrad_2_Gt2,
            agrad_0_K,
            agrad_1_K,
            agrad_2_K,
            agrad_0_B0,
            agrad_1_B0,
            agrad_2_B0,
            agrad_0_B1,
            agrad_1_B1,
            agrad_2_B1,
            agrad_0_B2,
            agrad_1_B2,
            agrad_2_B2,
            dev_alphaInt,
            dev_chiInt,
            dev_KInt,
            dev_gt0Int,
            dev_gt1Int,
            dev_gt2Int,
            dev_gt3Int,
            dev_gt4Int,
            dev_gt5Int,
            dev_beta0Int,
            dev_beta1Int,
            dev_beta2Int,
            dev_At0Int,
            dev_At1Int,
            dev_At2Int,
            dev_At3Int,
            dev_At4Int,
            dev_At5Int,
            dev_Gt0Int,
            dev_Gt1Int,
            dev_Gt2Int,
            dev_B0Int,
            dev_B1Int,
            dev_B2Int
        );

        // std::cout << offset << std::endl;
        // printf("%d\n"%(offset));
        cudaFree(dev_offset);
    }
    // rest
    int offset = loops*points_at_once;
    int threads = total_points%points_at_once;

    int * dev_offset;
    cudaStatus = cudaMalloc((void **) &dev_offset, sizeof(int));
    if (cudaStatus != cudaSuccess) {fprintf(stderr, "dev_offset cudaMalloc failed!\n"); return;}
    cudaStatus = cudaMemcpy(dev_offset, &offset, sizeof(int), cudaMemcpyHostToDevice);
    if (cudaStatus != cudaSuccess) {fprintf(stderr, "dev_offset cudaMemcpy failed!\n"); return;}
    cuda_bssn_eqns_points<<< blocks, threads_per_block >>>(dev_sz, dev_pmin, dev_dy_hz, dev_dy_hy, dev_dy_hx, dev_var_in, dev_var_out,
        grad_0_alpha,
        grad_1_alpha,
        grad_2_alpha,
        grad_0_beta0,
        grad_1_beta0,
        grad_2_beta0,
        grad_0_beta1,
        grad_1_beta1,
        grad_2_beta1,
        grad_0_beta2,
        grad_1_beta2,
        grad_2_beta2,
        grad_0_B0,
        grad_1_B0,
        grad_2_B0,
        grad_0_B1,
        grad_1_B1,
        grad_2_B1,
        grad_0_B2,
        grad_1_B2,
        grad_2_B2,
        grad_0_chi,
        grad_1_chi,
        grad_2_chi,
        grad_0_Gt0,
        grad_1_Gt0,
        grad_2_Gt0,
        grad_0_Gt1,
        grad_1_Gt1,
        grad_2_Gt1,
        grad_0_Gt2,
        grad_1_Gt2,
        grad_2_Gt2,
        grad_0_K,
        grad_1_K,
        grad_2_K,
        grad_0_gt0,
        grad_1_gt0,
        grad_2_gt0,
        grad_0_gt1,
        grad_1_gt1,
        grad_2_gt1,
        grad_0_gt2,
        grad_1_gt2,
        grad_2_gt2,
        grad_0_gt3,
        grad_1_gt3,
        grad_2_gt3,
        grad_0_gt4,
        grad_1_gt4,
        grad_2_gt4,
        grad_0_gt5,
        grad_1_gt5,
        grad_2_gt5,
        grad_0_At0,
        grad_1_At0,
        grad_2_At0,
        grad_0_At1,
        grad_1_At1,
        grad_2_At1,
        grad_0_At2,
        grad_1_At2,
        grad_2_At2,
        grad_0_At3,
        grad_1_At3,
        grad_2_At3,
        grad_0_At4,
        grad_1_At4,
        grad_2_At4,
        grad_0_At5,
        grad_1_At5,
        grad_2_At5,
        grad2_0_0_gt0,
        grad2_0_1_gt0,
        grad2_0_2_gt0,
        grad2_1_1_gt0,
        grad2_1_2_gt0,
        grad2_2_2_gt0,
        grad2_0_0_gt1,
        grad2_0_1_gt1,
        grad2_0_2_gt1,
        grad2_1_1_gt1,
        grad2_1_2_gt1,
        grad2_2_2_gt1,
        grad2_0_0_gt2,
        grad2_0_1_gt2,
        grad2_0_2_gt2,
        grad2_1_1_gt2,
        grad2_1_2_gt2,
        grad2_2_2_gt2,
        grad2_0_0_gt3,
        grad2_0_1_gt3,
        grad2_0_2_gt3,
        grad2_1_1_gt3,
        grad2_1_2_gt3,
        grad2_2_2_gt3,
        grad2_0_0_gt4,
        grad2_0_1_gt4,
        grad2_0_2_gt4,
        grad2_1_1_gt4,
        grad2_1_2_gt4,
        grad2_2_2_gt4,
        grad2_0_0_gt5,
        grad2_0_1_gt5,
        grad2_0_2_gt5,
        grad2_1_1_gt5,
        grad2_1_2_gt5,
        grad2_2_2_gt5,
        grad2_0_0_chi,
        grad2_0_1_chi,
        grad2_0_2_chi,
        grad2_1_1_chi,
        grad2_1_2_chi,
        grad2_2_2_chi,
        grad2_0_0_alpha,
        grad2_0_1_alpha,
        grad2_0_2_alpha,
        grad2_1_1_alpha,
        grad2_1_2_alpha,
        grad2_2_2_alpha,
        grad2_0_0_beta0,
        grad2_0_1_beta0,
        grad2_0_2_beta0,
        grad2_1_1_beta0,
        grad2_1_2_beta0,
        grad2_2_2_beta0,
        grad2_0_0_beta1,
        grad2_0_1_beta1,
        grad2_0_2_beta1,
        grad2_1_1_beta1,
        grad2_1_2_beta1,
        grad2_2_2_beta1,
        grad2_0_0_beta2,
        grad2_0_1_beta2,
        grad2_0_2_beta2,
        grad2_1_1_beta2,
        grad2_1_2_beta2,
        grad2_2_2_beta2,
        agrad_0_gt0,
        agrad_1_gt0,
        agrad_2_gt0,
        agrad_0_gt1,
        agrad_1_gt1,
        agrad_2_gt1,
        agrad_0_gt2,
        agrad_1_gt2,
        agrad_2_gt2,
        agrad_0_gt3,
        agrad_1_gt3,
        agrad_2_gt3,
        agrad_0_gt4,
        agrad_1_gt4,
        agrad_2_gt4,
        agrad_0_gt5,
        agrad_1_gt5,
        agrad_2_gt5,
        agrad_0_At0,
        agrad_1_At0,
        agrad_2_At0,
        agrad_0_At1,
        agrad_1_At1,
        agrad_2_At1,
        agrad_0_At2,
        agrad_1_At2,
        agrad_2_At2,
        agrad_0_At3,
        agrad_1_At3,
        agrad_2_At3,
        agrad_0_At4,
        agrad_1_At4,
        agrad_2_At4,
        agrad_0_At5,
        agrad_1_At5,
        agrad_2_At5,
        agrad_0_alpha,
        agrad_1_alpha,
        agrad_2_alpha,
        agrad_0_beta0,
        agrad_1_beta0,
        agrad_2_beta0,
        agrad_0_beta1,
        agrad_1_beta1,
        agrad_2_beta1,
        agrad_0_beta2,
        agrad_1_beta2,
        agrad_2_beta2,
        agrad_0_chi,
        agrad_1_chi,
        agrad_2_chi,
        agrad_0_Gt0,
        agrad_1_Gt0,
        agrad_2_Gt0,
        agrad_0_Gt1,
        agrad_1_Gt1,
        agrad_2_Gt1,
        agrad_0_Gt2,
        agrad_1_Gt2,
        agrad_2_Gt2,
        agrad_0_K,
        agrad_1_K,
        agrad_2_K,
        agrad_0_B0,
        agrad_1_B0,
        agrad_2_B0,
        agrad_0_B1,
        agrad_1_B1,
        agrad_2_B1,
        agrad_0_B2,
        agrad_1_B2,
        agrad_2_B2,
        dev_alphaInt,
        dev_chiInt,
        dev_KInt,
        dev_gt0Int,
        dev_gt1Int,
        dev_gt2Int,
        dev_gt3Int,
        dev_gt4Int,
        dev_gt5Int,
        dev_beta0Int,
        dev_beta1Int,
        dev_beta2Int,
        dev_At0Int,
        dev_At1Int,
        dev_At2Int,
        dev_At3Int,
        dev_At4Int,
        dev_At5Int,
        dev_Gt0Int,
        dev_Gt1Int,
        dev_Gt2Int,
        dev_B0Int,
        dev_B1Int,
        dev_B2Int
    );
    // Check for any errors launching the kernel
    cudaStatus = cudaGetLastError();
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cuda_bssn_eqns_points Kernel launch failed: %s\n", cudaGetErrorString(cudaStatus));
        return;
    }
    // cudaDeviceSynchronize waits for the kernel to finish, and returns
    // any errors encountered during the launch.
    cudaStatus = cudaDeviceSynchronize();
    if (cudaStatus != cudaSuccess) {
        fprintf(stderr, "cudaDeviceSynchronize returned error code %d after launching cuda_bssn_eqns_points kernal!\n", cudaStatus);
        return;
    }
    // std::cout << offset << std::endl;
    // printf("%d\n"%(offset));
    cudaFree(dev_offset);

}

// const unsigned int nx = sz[0];
// const unsigned int ny = sz[1];
// const unsigned int nz = sz[2];

// for (unsigned int k = 3; k < nz-3; k++) {
//     z = pmin[2] + k*hz;

//   for (unsigned int j = 3; j < ny-3; j++) {
//      y = pmin[1] + j*hy;

//     for (unsigned int i = 3; i < nx-3; i++) {
//         x = pmin[0] + i*hx;





















// __global__ void cuda_callculateBSSN(
// double *grad_0_alpha,
// double *grad_1_alpha,
// double *grad_2_alpha,
// double *grad_0_beta0,
// double *grad_1_beta0,
// double *grad_2_beta0,
// double *grad_0_beta1,
// double *grad_1_beta1,
// double *grad_2_beta1,
// double *grad_0_beta2,
// double *grad_1_beta2,
// double *grad_2_beta2,
// double *grad_0_B0,
// double *grad_1_B0,
// double *grad_2_B0,
// double *grad_0_B1,
// double *grad_1_B1,
// double *grad_2_B1,
// double *grad_0_B2,
// double *grad_1_B2,
// double *grad_2_B2,
// double *grad_0_chi,
// double *grad_1_chi,
// double *grad_2_chi,
// double *grad_0_Gt0,
// double *grad_1_Gt0,
// double *grad_2_Gt0,
// double *grad_0_Gt1,
// double *grad_1_Gt1,
// double *grad_2_Gt1,
// double *grad_0_Gt2,
// double *grad_1_Gt2,
// double *grad_2_Gt2,
// double *grad_0_K,
// double *grad_1_K,
// double *grad_2_K,
// double *grad_0_gt0,
// double *grad_1_gt0,
// double *grad_2_gt0,
// double *grad_0_gt1,
// double *grad_1_gt1,
// double *grad_2_gt1,
// double *grad_0_gt2,
// double *grad_1_gt2,
// double *grad_2_gt2,
// double *grad_0_gt3,
// double *grad_1_gt3,
// double *grad_2_gt3,
// double *grad_0_gt4,
// double *grad_1_gt4,
// double *grad_2_gt4,
// double *grad_0_gt5,
// double *grad_1_gt5,
// double *grad_2_gt5,
// double *grad_0_At0,
// double *grad_1_At0,
// double *grad_2_At0,
// double *grad_0_At1,
// double *grad_1_At1,
// double *grad_2_At1,
// double *grad_0_At2,
// double *grad_1_At2,
// double *grad_2_At2,
// double *grad_0_At3,
// double *grad_1_At3,
// double *grad_2_At3,
// double *grad_0_At4,
// double *grad_1_At4,
// double *grad_2_At4,
// double *grad_0_At5,
// double *grad_1_At5,
// double *grad_2_At5,
// double *grad2_0_0_gt0,
// double *grad2_0_1_gt0,
// double *grad2_0_2_gt0,
// double *grad2_1_1_gt0,
// double *grad2_1_2_gt0,
// double *grad2_2_2_gt0,
// double *grad2_0_0_gt1,
// double *grad2_0_1_gt1,
// double *grad2_0_2_gt1,
// double *grad2_1_1_gt1,
// double *grad2_1_2_gt1,
// double *grad2_2_2_gt1,
// double *grad2_0_0_gt2,
// double *grad2_0_1_gt2,
// double *grad2_0_2_gt2,
// double *grad2_1_1_gt2,
// double *grad2_1_2_gt2,
// double *grad2_2_2_gt2,
// double *grad2_0_0_gt3,
// double *grad2_0_1_gt3,
// double *grad2_0_2_gt3,
// double *grad2_1_1_gt3,
// double *grad2_1_2_gt3,
// double *grad2_2_2_gt3,
// double *grad2_0_0_gt4,
// double *grad2_0_1_gt4,
// double *grad2_0_2_gt4,
// double *grad2_1_1_gt4,
// double *grad2_1_2_gt4,
// double *grad2_2_2_gt4,
// double *grad2_0_0_gt5,
// double *grad2_0_1_gt5,
// double *grad2_0_2_gt5,
// double *grad2_1_1_gt5,
// double *grad2_1_2_gt5,
// double *grad2_2_2_gt5,
// double *grad2_0_0_chi,
// double *grad2_0_1_chi,
// double *grad2_0_2_chi,
// double *grad2_1_1_chi,
// double *grad2_1_2_chi,
// double *grad2_2_2_chi,
// double *grad2_0_0_alpha,
// double *grad2_0_1_alpha,
// double *grad2_0_2_alpha,
// double *grad2_1_1_alpha,
// double *grad2_1_2_alpha,
// double *grad2_2_2_alpha,
// double *grad2_0_0_beta0,
// double *grad2_0_1_beta0,
// double *grad2_0_2_beta0,
// double *grad2_1_1_beta0,
// double *grad2_1_2_beta0,
// double *grad2_2_2_beta0,
// double *grad2_0_0_beta1,
// double *grad2_0_1_beta1,
// double *grad2_0_2_beta1,
// double *grad2_1_1_beta1,
// double *grad2_1_2_beta1,
// double *grad2_2_2_beta1,
// double *grad2_0_0_beta2,
// double *grad2_0_1_beta2,
// double *grad2_0_2_beta2,
// double *grad2_1_1_beta2,
// double *grad2_1_2_beta2,
// double *grad2_2_2_beta2,
// double *agrad_0_gt0,
// double *agrad_1_gt0,
// double *agrad_2_gt0,
// double *agrad_0_gt1,
// double *agrad_1_gt1,
// double *agrad_2_gt1,
// double *agrad_0_gt2,
// double *agrad_1_gt2,
// double *agrad_2_gt2,
// double *agrad_0_gt3,
// double *agrad_1_gt3,
// double *agrad_2_gt3,
// double *agrad_0_gt4,
// double *agrad_1_gt4,
// double *agrad_2_gt4,
// double *agrad_0_gt5,
// double *agrad_1_gt5,
// double *agrad_2_gt5,
// double *agrad_0_At0,
// double *agrad_1_At0,
// double *agrad_2_At0,
// double *agrad_0_At1,
// double *agrad_1_At1,
// double *agrad_2_At1,
// double *agrad_0_At2,
// double *agrad_1_At2,
// double *agrad_2_At2,
// double *agrad_0_At3,
// double *agrad_1_At3,
// double *agrad_2_At3,
// double *agrad_0_At4,
// double *agrad_1_At4,
// double *agrad_2_At4,
// double *agrad_0_At5,
// double *agrad_1_At5,
// double *agrad_2_At5,
// double *agrad_0_alpha,
// double *agrad_1_alpha,
// double *agrad_2_alpha,
// double *agrad_0_beta0,
// double *agrad_1_beta0,
// double *agrad_2_beta0,
// double *agrad_0_beta1,
// double *agrad_1_beta1,
// double *agrad_2_beta1,
// double *agrad_0_beta2,
// double *agrad_1_beta2,
// double *agrad_2_beta2,
// double *agrad_0_chi,
// double *agrad_1_chi,
// double *agrad_2_chi,
// double *agrad_0_Gt0,
// double *agrad_1_Gt0,
// double *agrad_2_Gt0,
// double *agrad_0_Gt1,
// double *agrad_1_Gt1,
// double *agrad_2_Gt1,
// double *agrad_0_Gt2,
// double *agrad_1_Gt2,
// double *agrad_2_Gt2,
// double *agrad_0_K,
// double *agrad_1_K,
// double *agrad_2_K,
// double *agrad_0_B0,
// double *agrad_1_B0,
// double *agrad_2_B0,
// double *agrad_0_B1,
// double *agrad_1_B1,
// double *agrad_2_B1,
// double *agrad_0_B2,
// double *agrad_1_B2,
// double *agrad_2_B2,
// int *dev_alphaInt,
// int *dev_chiInt,
// int *dev_KInt,
// int *dev_gt0Int,
// int *dev_gt1Int,
// int *dev_gt2Int,
// int *dev_gt3Int,
// int *dev_gt4Int,
// int *dev_gt5Int,
// int *dev_beta0Int,
// int *dev_beta1Int,
// int *dev_beta2Int,
// int *dev_At0Int,
// int *dev_At1Int,
// int *dev_At2Int,
// int *dev_At3Int,
// int *dev_At4Int,
// int *dev_At5Int,
// int *dev_Gt0Int,
// int *dev_Gt1Int,
// int *dev_Gt2Int,
// int *dev_B0Int,
// int *dev_B1Int,
// int *dev_B2Int,
// unsigned int *lambda,
// double *lambda_f,
// const double *pmin,
// const int *dev_sz,
// double *hx,
// double *hy,
// double *hz,
// double *dev_var_in,
// double *dev_var_out,
// int *dev_sizeArray
// ){
//     int index=threadIdx.x;
//     int bx=blockIdx.x;
//     int dim=blockDim.x;
//     index=index+bx*dim;
//     if(index<*dev_sizeArray){
//         int firstBlock=(dev_sz[1]-3)*(dev_sz[0]-3);
//         int k=index/firstBlock+3;
//         int firstLeft=index%firstBlock;

//         int secondBlock=dev_sz[0]-3;
//         int j=firstLeft/secondBlock+3;
//         int i=firstLeft%secondBlock+3;

//         double z = pmin[2] + k*(*hz);
//         double y = pmin[1] + j*(*hy);
//         double x = pmin[0] + i*(*hx);

//         int pp = i + dev_sz[0]*(j + dev_sz[1]*k);
//         double r_coord = sqrt(x*x + y*y + z*z);
//         double eta=0.1;
//         //const set directly. refactor later
        
//         if (r_coord >= 0.1) {
//             eta *= pow( (0.1/r_coord), 0.1);
//         }
//         #include "cuda_bssneqs.h"
//     }
//  }

//  void callculateBSSN_EQ(
//     double *grad_0_alpha,
//     double *grad_1_alpha,
//     double *grad_2_alpha,
//     double *grad_0_beta0,
//     double *grad_1_beta0,
//     double *grad_2_beta0,
//     double *grad_0_beta1,
//     double *grad_1_beta1,
//     double *grad_2_beta1,
//     double *grad_0_beta2,
//     double *grad_1_beta2,
//     double *grad_2_beta2,
//     double *grad_0_B0,
//     double *grad_1_B0,
//     double *grad_2_B0,
//     double *grad_0_B1,
//     double *grad_1_B1,
//     double *grad_2_B1,
//     double *grad_0_B2,
//     double *grad_1_B2,
//     double *grad_2_B2,
//     double *grad_0_chi,
//     double *grad_1_chi,
//     double *grad_2_chi,
//     double *grad_0_Gt0,
//     double *grad_1_Gt0,
//     double *grad_2_Gt0,
//     double *grad_0_Gt1,
//     double *grad_1_Gt1,
//     double *grad_2_Gt1,
//     double *grad_0_Gt2,
//     double *grad_1_Gt2,
//     double *grad_2_Gt2,
//     double *grad_0_K,
//     double *grad_1_K,
//     double *grad_2_K,
//     double *grad_0_gt0,
//     double *grad_1_gt0,
//     double *grad_2_gt0,
//     double *grad_0_gt1,
//     double *grad_1_gt1,
//     double *grad_2_gt1,
//     double *grad_0_gt2,
//     double *grad_1_gt2,
//     double *grad_2_gt2,
//     double *grad_0_gt3,
//     double *grad_1_gt3,
//     double *grad_2_gt3,
//     double *grad_0_gt4,
//     double *grad_1_gt4,
//     double *grad_2_gt4,
//     double *grad_0_gt5,
//     double *grad_1_gt5,
//     double *grad_2_gt5,
//     double *grad_0_At0,
//     double *grad_1_At0,
//     double *grad_2_At0,
//     double *grad_0_At1,
//     double *grad_1_At1,
//     double *grad_2_At1,
//     double *grad_0_At2,
//     double *grad_1_At2,
//     double *grad_2_At2,
//     double *grad_0_At3,
//     double *grad_1_At3,
//     double *grad_2_At3,
//     double *grad_0_At4,
//     double *grad_1_At4,
//     double *grad_2_At4,
//     double *grad_0_At5,
//     double *grad_1_At5,
//     double *grad_2_At5,
//     double *grad2_0_0_gt0,
//     double *grad2_0_1_gt0,
//     double *grad2_0_2_gt0,
//     double *grad2_1_1_gt0,
//     double *grad2_1_2_gt0,
//     double *grad2_2_2_gt0,
//     double *grad2_0_0_gt1,
//     double *grad2_0_1_gt1,
//     double *grad2_0_2_gt1,
//     double *grad2_1_1_gt1,
//     double *grad2_1_2_gt1,
//     double *grad2_2_2_gt1,
//     double *grad2_0_0_gt2,
//     double *grad2_0_1_gt2,
//     double *grad2_0_2_gt2,
//     double *grad2_1_1_gt2,
//     double *grad2_1_2_gt2,
//     double *grad2_2_2_gt2,
//     double *grad2_0_0_gt3,
//     double *grad2_0_1_gt3,
//     double *grad2_0_2_gt3,
//     double *grad2_1_1_gt3,
//     double *grad2_1_2_gt3,
//     double *grad2_2_2_gt3,
//     double *grad2_0_0_gt4,
//     double *grad2_0_1_gt4,
//     double *grad2_0_2_gt4,
//     double *grad2_1_1_gt4,
//     double *grad2_1_2_gt4,
//     double *grad2_2_2_gt4,
//     double *grad2_0_0_gt5,
//     double *grad2_0_1_gt5,
//     double *grad2_0_2_gt5,
//     double *grad2_1_1_gt5,
//     double *grad2_1_2_gt5,
//     double *grad2_2_2_gt5,
//     double *grad2_0_0_chi,
//     double *grad2_0_1_chi,
//     double *grad2_0_2_chi,
//     double *grad2_1_1_chi,
//     double *grad2_1_2_chi,
//     double *grad2_2_2_chi,
//     double *grad2_0_0_alpha,
//     double *grad2_0_1_alpha,
//     double *grad2_0_2_alpha,
//     double *grad2_1_1_alpha,
//     double *grad2_1_2_alpha,
//     double *grad2_2_2_alpha,
//     double *grad2_0_0_beta0,
//     double *grad2_0_1_beta0,
//     double *grad2_0_2_beta0,
//     double *grad2_1_1_beta0,
//     double *grad2_1_2_beta0,
//     double *grad2_2_2_beta0,
//     double *grad2_0_0_beta1,
//     double *grad2_0_1_beta1,
//     double *grad2_0_2_beta1,
//     double *grad2_1_1_beta1,
//     double *grad2_1_2_beta1,
//     double *grad2_2_2_beta1,
//     double *grad2_0_0_beta2,
//     double *grad2_0_1_beta2,
//     double *grad2_0_2_beta2,
//     double *grad2_1_1_beta2,
//     double *grad2_1_2_beta2,
//     double *grad2_2_2_beta2,
//     double *agrad_0_gt0,
//     double *agrad_1_gt0,
//     double *agrad_2_gt0,
//     double *agrad_0_gt1,
//     double *agrad_1_gt1,
//     double *agrad_2_gt1,
//     double *agrad_0_gt2,
//     double *agrad_1_gt2,
//     double *agrad_2_gt2,
//     double *agrad_0_gt3,
//     double *agrad_1_gt3,
//     double *agrad_2_gt3,
//     double *agrad_0_gt4,
//     double *agrad_1_gt4,
//     double *agrad_2_gt4,
//     double *agrad_0_gt5,
//     double *agrad_1_gt5,
//     double *agrad_2_gt5,
//     double *agrad_0_At0,
//     double *agrad_1_At0,
//     double *agrad_2_At0,
//     double *agrad_0_At1,
//     double *agrad_1_At1,
//     double *agrad_2_At1,
//     double *agrad_0_At2,
//     double *agrad_1_At2,
//     double *agrad_2_At2,
//     double *agrad_0_At3,
//     double *agrad_1_At3,
//     double *agrad_2_At3,
//     double *agrad_0_At4,
//     double *agrad_1_At4,
//     double *agrad_2_At4,
//     double *agrad_0_At5,
//     double *agrad_1_At5,
//     double *agrad_2_At5,
//     double *agrad_0_alpha,
//     double *agrad_1_alpha,
//     double *agrad_2_alpha,
//     double *agrad_0_beta0,
//     double *agrad_1_beta0,
//     double *agrad_2_beta0,
//     double *agrad_0_beta1,
//     double *agrad_1_beta1,
//     double *agrad_2_beta1,
//     double *agrad_0_beta2,
//     double *agrad_1_beta2,
//     double *agrad_2_beta2,
//     double *agrad_0_chi,
//     double *agrad_1_chi,
//     double *agrad_2_chi,
//     double *agrad_0_Gt0,
//     double *agrad_1_Gt0,
//     double *agrad_2_Gt0,
//     double *agrad_0_Gt1,
//     double *agrad_1_Gt1,
//     double *agrad_2_Gt1,
//     double *agrad_0_Gt2,
//     double *agrad_1_Gt2,
//     double *agrad_2_Gt2,
//     double *agrad_0_K,
//     double *agrad_1_K,
//     double *agrad_2_K,
//     double *agrad_0_B0,
//     double *agrad_1_B0,
//     double *agrad_2_B0,
//     double *agrad_0_B1,
//     double *agrad_1_B1,
//     double *agrad_2_B1,
//     double *agrad_0_B2,
//     double *agrad_1_B2,
//     double *agrad_2_B2,
//     int *dev_alphaInt,
//     int *dev_chiInt,
//     int *dev_KInt,
//     int *dev_gt0Int,
//     int *dev_gt1Int,
//     int *dev_gt2Int,
//     int *dev_gt3Int,
//     int *dev_gt4Int,
//     int *dev_gt5Int,
//     int *dev_beta0Int,
//     int *dev_beta1Int,
//     int *dev_beta2Int,
//     int *dev_At0Int,
//     int *dev_At1Int,
//     int *dev_At2Int,
//     int *dev_At3Int,
//     int *dev_At4Int,
//     int *dev_At5Int,
//     int *dev_Gt0Int,
//     int *dev_Gt1Int,
//     int *dev_Gt2Int,
//     int *dev_B0Int,
//     int *dev_B1Int,
//     int *dev_B2Int,
//     unsigned int *dev_lambda,
//     double *dev_lambda_f,
//     const double *dev_pmin,
//     const  int *dev_sz,
//     double *dev_dy_hx,
//     double *dev_dy_hy,
//     double *dev_dy_hz,
//     double *dev_var_in,
//     double *dev_var_out,
//     int *sizeArray
//     ){
//         int block=ceil(*sizeArray/128.0);
//         int *dev_sizeArray;

//         cudaError_t cudaStatus;

//         cudaStatus= cudaMalloc((void**)&dev_sizeArray, sizeof(int));
//         if (cudaStatus != cudaSuccess) {fprintf(stderr, "sizeArray cudaMalloc failed!\n"); return;}

//         cudaStatus= cudaMemcpy(dev_sizeArray, sizeArray,sizeof(int), cudaMemcpyHostToDevice);
//         if (cudaStatus != cudaSuccess) {fprintf(stderr, "sizeArray cudaMemcpy failed!\n"); return;}

//         cuda_callculateBSSN<<<block,128>>>(
//             grad_0_alpha,
//             grad_1_alpha,
//             grad_2_alpha,
//             grad_0_beta0,
//             grad_1_beta0,
//             grad_2_beta0,
//             grad_0_beta1,
//             grad_1_beta1,
//             grad_2_beta1,
//             grad_0_beta2,
//             grad_1_beta2,
//             grad_2_beta2,
//             grad_0_B0,
//             grad_1_B0,
//             grad_2_B0,
//             grad_0_B1,
//             grad_1_B1,
//             grad_2_B1,
//             grad_0_B2,
//             grad_1_B2,
//             grad_2_B2,
//             grad_0_chi,
//             grad_1_chi,
//             grad_2_chi,
//             grad_0_Gt0,
//             grad_1_Gt0,
//             grad_2_Gt0,
//             grad_0_Gt1,
//             grad_1_Gt1,
//             grad_2_Gt1,
//             grad_0_Gt2,
//             grad_1_Gt2,
//             grad_2_Gt2,
//             grad_0_K,
//             grad_1_K,
//             grad_2_K,
//             grad_0_gt0,
//             grad_1_gt0,
//             grad_2_gt0,
//             grad_0_gt1,
//             grad_1_gt1,
//             grad_2_gt1,
//             grad_0_gt2,
//             grad_1_gt2,
//             grad_2_gt2,
//             grad_0_gt3,
//             grad_1_gt3,
//             grad_2_gt3,
//             grad_0_gt4,
//             grad_1_gt4,
//             grad_2_gt4,
//             grad_0_gt5,
//             grad_1_gt5,
//             grad_2_gt5,
//             grad_0_At0,
//             grad_1_At0,
//             grad_2_At0,
//             grad_0_At1,
//             grad_1_At1,
//             grad_2_At1,
//             grad_0_At2,
//             grad_1_At2,
//             grad_2_At2,
//             grad_0_At3,
//             grad_1_At3,
//             grad_2_At3,
//             grad_0_At4,
//             grad_1_At4,
//             grad_2_At4,
//             grad_0_At5,
//             grad_1_At5,
//             grad_2_At5,
//             grad2_0_0_gt0,
//             grad2_0_1_gt0,
//             grad2_0_2_gt0,
//             grad2_1_1_gt0,
//             grad2_1_2_gt0,
//             grad2_2_2_gt0,
//             grad2_0_0_gt1,
//             grad2_0_1_gt1,
//             grad2_0_2_gt1,
//             grad2_1_1_gt1,
//             grad2_1_2_gt1,
//             grad2_2_2_gt1,
//             grad2_0_0_gt2,
//             grad2_0_1_gt2,
//             grad2_0_2_gt2,
//             grad2_1_1_gt2,
//             grad2_1_2_gt2,
//             grad2_2_2_gt2,
//             grad2_0_0_gt3,
//             grad2_0_1_gt3,
//             grad2_0_2_gt3,
//             grad2_1_1_gt3,
//             grad2_1_2_gt3,
//             grad2_2_2_gt3,
//             grad2_0_0_gt4,
//             grad2_0_1_gt4,
//             grad2_0_2_gt4,
//             grad2_1_1_gt4,
//             grad2_1_2_gt4,
//             grad2_2_2_gt4,
//             grad2_0_0_gt5,
//             grad2_0_1_gt5,
//             grad2_0_2_gt5,
//             grad2_1_1_gt5,
//             grad2_1_2_gt5,
//             grad2_2_2_gt5,
//             grad2_0_0_chi,
//             grad2_0_1_chi,
//             grad2_0_2_chi,
//             grad2_1_1_chi,
//             grad2_1_2_chi,
//             grad2_2_2_chi,
//             grad2_0_0_alpha,
//             grad2_0_1_alpha,
//             grad2_0_2_alpha,
//             grad2_1_1_alpha,
//             grad2_1_2_alpha,
//             grad2_2_2_alpha,
//             grad2_0_0_beta0,
//             grad2_0_1_beta0,
//             grad2_0_2_beta0,
//             grad2_1_1_beta0,
//             grad2_1_2_beta0,
//             grad2_2_2_beta0,
//             grad2_0_0_beta1,
//             grad2_0_1_beta1,
//             grad2_0_2_beta1,
//             grad2_1_1_beta1,
//             grad2_1_2_beta1,
//             grad2_2_2_beta1,
//             grad2_0_0_beta2,
//             grad2_0_1_beta2,
//             grad2_0_2_beta2,
//             grad2_1_1_beta2,
//             grad2_1_2_beta2,
//             grad2_2_2_beta2,
//             agrad_0_gt0,
//             agrad_1_gt0,
//             agrad_2_gt0,
//             agrad_0_gt1,
//             agrad_1_gt1,
//             agrad_2_gt1,
//             agrad_0_gt2,
//             agrad_1_gt2,
//             agrad_2_gt2,
//             agrad_0_gt3,
//             agrad_1_gt3,
//             agrad_2_gt3,
//             agrad_0_gt4,
//             agrad_1_gt4,
//             agrad_2_gt4,
//             agrad_0_gt5,
//             agrad_1_gt5,
//             agrad_2_gt5,
//             agrad_0_At0,
//             agrad_1_At0,
//             agrad_2_At0,
//             agrad_0_At1,
//             agrad_1_At1,
//             agrad_2_At1,
//             agrad_0_At2,
//             agrad_1_At2,
//             agrad_2_At2,
//             agrad_0_At3,
//             agrad_1_At3,
//             agrad_2_At3,
//             agrad_0_At4,
//             agrad_1_At4,
//             agrad_2_At4,
//             agrad_0_At5,
//             agrad_1_At5,
//             agrad_2_At5,
//             agrad_0_alpha,
//             agrad_1_alpha,
//             agrad_2_alpha,
//             agrad_0_beta0,
//             agrad_1_beta0,
//             agrad_2_beta0,
//             agrad_0_beta1,
//             agrad_1_beta1,
//             agrad_2_beta1,
//             agrad_0_beta2,
//             agrad_1_beta2,
//             agrad_2_beta2,
//             agrad_0_chi,
//             agrad_1_chi,
//             agrad_2_chi,
//             agrad_0_Gt0,
//             agrad_1_Gt0,
//             agrad_2_Gt0,
//             agrad_0_Gt1,
//             agrad_1_Gt1,
//             agrad_2_Gt1,
//             agrad_0_Gt2,
//             agrad_1_Gt2,
//             agrad_2_Gt2,
//             agrad_0_K,
//             agrad_1_K,
//             agrad_2_K,
//             agrad_0_B0,
//             agrad_1_B0,
//             agrad_2_B0,
//             agrad_0_B1,
//             agrad_1_B1,
//             agrad_2_B1,
//             agrad_0_B2,
//             agrad_1_B2,
//             agrad_2_B2,
//             dev_alphaInt,
//             dev_chiInt,
//             dev_KInt,
//             dev_gt0Int,
//             dev_gt1Int,
//             dev_gt2Int,
//             dev_gt3Int,
//             dev_gt4Int,
//             dev_gt5Int,
//             dev_beta0Int,
//             dev_beta1Int,
//             dev_beta2Int,
//             dev_At0Int,
//             dev_At1Int,
//             dev_At2Int,
//             dev_At3Int,
//             dev_At4Int,
//             dev_At5Int,
//             dev_Gt0Int,
//             dev_Gt1Int,
//             dev_Gt2Int,
//             dev_B0Int,
//             dev_B1Int,
//             dev_B2Int,
//             dev_lambda,
//             dev_lambda_f,
//             dev_pmin,
//             dev_sz,
//             dev_dy_hx,
//             dev_dy_hy,
//             dev_dy_hz,
//             dev_var_in,
//             dev_var_out,
//             dev_sizeArray);

        
//         cudaFree(dev_sizeArray);
//     }

 