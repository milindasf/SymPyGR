//
// Created by milinda on 7/25/17.
/**
*@author Milinda Fernando
*School of Computing, University of Utah
*@brief Contains utility functions for NLSM simulation.
*/


#ifndef SFCSORTBENCH_GRUTILS_H
#define SFCSORTBENCH_GRUTILS_H

#include "point.h"
#include "parameters.h"
#include "mesh.h"
#include "block.h"
#include "parUtils.h"
#include "json.hpp"
#include "dendroProfileParams.h"
#include "profile_params.h"

/*[[[cog
import cog
from paramDef import namespace

cog.outl("#define Rx ({0}::COMPD_MAX[0]-{0}::COMPD_MIN[0])".format(namespace))
cog.outl("#define Ry ({0}::COMPD_MAX[1]-{0}::COMPD_MIN[1])".format(namespace))
cog.outl("#define Rz ({0}::COMPD_MAX[2]-{0}::COMPD_MIN[2])\n".format(namespace))

cog.outl("#define RgX ({0}::OCTREE_MAX[0]-{0}::OCTREE_MIN[0])".format(namespace))
cog.outl("#define RgY ({0}::OCTREE_MAX[1]-{0}::OCTREE_MIN[1])".format(namespace))
cog.outl("#define RgZ ({0}::OCTREE_MAX[2]-{0}::OCTREE_MIN[2])\n".format(namespace))

cog.outl("#define GRIDX_TO_X(xg) (((Rx/RgX)*(xg-{0}::OCTREE_MIN[0]))+{0}::COMPD_MIN[0])".format(namespace))
cog.outl("#define GRIDY_TO_Y(yg) (((Ry/RgY)*(yg-{0}::OCTREE_MIN[1]))+{0}::COMPD_MIN[1])".format(namespace))
cog.outl("#define GRIDZ_TO_Z(zg) (((Rz/RgZ)*(zg-{0}::OCTREE_MIN[2]))+{0}::COMPD_MIN[2])\n".format(namespace))

cog.outl("#define X_TO_GRIDX(xc) (((RgX/Rx)*(xc-{0}::COMPD_MIN[0]))+{0}::OCTREE_MIN[0])".format(namespace))
cog.outl("#define Y_TO_GRIDY(yc) (((RgY/Ry)*(yc-{0}::COMPD_MIN[1]))+{0}::OCTREE_MIN[1])".format(namespace))
cog.outl("#define Z_TO_GRIDZ(zc) (((RgZ/Rz)*(zc-{0}::COMPD_MIN[2]))+{0}::OCTREE_MIN[2])\n".format(namespace))

cog.outl("using json = nlohmann::json;")

cog.outl("namespace {0}".format(namespace))
cog.outl("{")

]]]*/
//[[[end]]]

/**
 * @brief internal variables needed for rk update.
 * */


 /**
  * @brief: Read the parameter file and initialize the variables in parameters.h file.
  * @param[in] fName: file name
  * @param[in] comm: MPI communicator.
  * */
  void readParamFile(const char * fName,MPI_Comm comm);


/**
 * @brief Initialize all the variables for a given point in space.
 * @param [in] coord: coordinates of the point.
 * @param [out] var: pointer to the list of variables, computed. var size should be (VAR::U_SYMAT5+1)
 * @note This function is taken from the old single core nlsm version.
 **/

 // Initial data
 void initData(const double xx1,const double yy1,const double zz1, double *var);

 /**
  * @brief: Generates block adaptive octree for the given binary blockhole problem.
  *
  * */

  void blockAdaptiveOctree(std::vector<ot::TreeNode>& tmpNodes,const Point& pt_min,const Point & pt_max,const unsigned int regLev,const unsigned int maxDepth,MPI_Comm comm);

  /**
   * @brief tolerance as a function of space.
   * */
  double computeTol(double x,double y,double z,double minTol);

}// end of namespace nlsm



/*[[[cog
import cog
from paramDef import namespace

cog.outl("namespace {0}".format(namespace))

]]]*/
//[[[end]]]
{

    namespace timer
    {

        /**@brief initialize all the flop counters. */
        void initFlops();

        /**@brief clears the snapshot counter for time profiler variables*/
        void resetSnapshot();


       /**@brief reduce min mean max.
        * @param [in] stat: local time
        * @param [out] stat_g 0-min, 1-mean 2-max
       * */
       template<typename T>
       void computeOverallStats(T *stat, T *stat_g, MPI_Comm comm)
       {
           int rank,npes;
           MPI_Comm_size(comm,&npes);
           MPI_Comm_rank(comm,&rank);

           par::Mpi_Reduce(stat,stat_g,1,MPI_MIN,0,comm);
           par::Mpi_Reduce(stat,stat_g+1,1,MPI_SUM,0,comm);
           par::Mpi_Reduce(stat,stat_g+2,1,MPI_MAX,0,comm);
           stat_g[1]/=(npes);

       }


        /** @breif : printout the profile parameters. */
        void profileInfo(const char* filePrefix,const ot::Mesh* pMesh);

        /** @breif : printout the profile parameters (intermediate profile information). */
        void profileInfoIntermediate(const char* filePrefix,const ot::Mesh* pMesh,const unsigned int currentStep);


    }


}

#endif //SFCSORTBENCH_GRUTILS_H
