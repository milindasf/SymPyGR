#include "rhs.h"

using namespace std;
/*[[[cog
import cog
from nlsmParams import namespace

cog.outl("using namespace {0};".format(namespace))

]]]*/
//[[[end]]]

/*----------------------------------------------------------------------;
 *
 * RHS for non-linear sigma model
 *
 *----------------------------------------------------------------------*/
void nlsmRhs(double **unzipVarsRHS, const double **uZipVars,
             const unsigned int& offset,
             const double *pmin, const double *pmax, const unsigned int *sz,
             const unsigned int& bflag)
{
  const unsigned int nx = sz[0];
  const unsigned int ny = sz[1];
  const unsigned int nz = sz[2];

  double hx = (pmax[0] - pmin[0]) / (nx - 1);
  double hy = (pmax[1] - pmin[1]) / (ny - 1);
  double hz = (pmax[2] - pmin[2]) / (nz - 1);

  int idx[3];

  unsigned int n = sz[0]*sz[1]*sz[2];

/*[[[cog
import cog
import nlsmParams as p

cog.outl("{0}::timer::t_deriv.start();".format(p.namespace))

for var in p.parameters.varsValues():
	cog.outl("const double *{0} = &uZipVars[VAR::{0}][offset];".format(var.id))
	cog.outl("double *{0}_rhs = &unzipVarsRHS[VAR::{0}][offset];".format(var.id))
	cog.outl()

	for func in list(var.precomputeDict.keys()):
		cog.outl("double *{0} = new double [n];".format(func.getArrayName(var)))
		cog.outl(func.getFunctionCallString(var))

	cog.outl()

cog.outl()
cog.outl("{0}::timer::t_deriv.stop();".format(p.namespace))
]]]*/
//[[[end]]]

  register double x;
  register double y;
  register double z;
  register unsigned int pp;

  double r;
  double eta;

  //cout << "begin loop" << endl;
  for (unsigned int k = 3; k < nz-3; k++) {
      z = pmin[2] + k*hz;

    for (unsigned int j = 3; j < ny-3; j++) {
       y = pmin[1] + j*hy;

      for (unsigned int i = 3; i < nx-3; i++) {
         x = pmin[0] + i*hx;
         pp = i + nx*(j + ny*k);
         r= sqrt(x*x + y*y + z*z);

		/*[[[cog
		import cog
		import nlsmParams as p
		from sympy import *

		for var in p.parameters.varsValues():
			rhs = var.rhsExpression
			#if the expr contains other vars, need to index them to get valid c++
			for rhsVar in p.parameters.varsValues():
				rhs = rhs.subs(rhsVar.symbol, Symbol(rhsVar.id + "[pp]"))
			cog.outl("{0}_rhs[pp] = {1};".format(var.id, var.getCppExpression(rhs)))
		]]]*/
		//[[[end]]]
      }
    }
  }

/*[[[cog
import cog
import nlsmParams as p

cog.outl("{0}::timer::t_deriv.start();".format(p.namespace))

for var in p.parameters.varsValues():
	for func in list(var.precomputeDict.keys()):
		cog.outl("delete [] {0};".format(func.getArrayName(var)))

]]]*/
//[[[end]]]

}
