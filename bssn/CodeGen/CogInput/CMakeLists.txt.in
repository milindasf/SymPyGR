cmake_minimum_required(VERSION 2.8)
project(NLSM)

##[[[cog
##import sys
####TODO: reorganize things so this isn't necessary
##sys.path.append("/mnt/c/Users/ljmoy/OneDrive/Documents/GitHub/SymPyGR/bssn/CodeGen/")
##from projectPaths import dendroRootPath, dendroLibPath
##from nlsmParams import namespace
##cog.outl("set(DENDRO_ROOT_PATH ${{CMAKE_SOURCE_DIR}}/{0})".format(dendroRootPath))
##cog.outl("set(DENDRO_LIB_PATH ${{CMAKE_SOURCE_DIR}}/{0})".format(dendroLibPath))
##cog.outl("set(APP_NAME {0})".format(namespace))
##]]]
##[[[end]]]

find_package(OpenMP REQUIRED)
find_package(MPI REQUIRED)

# For now we just make it compulsory to have LAPACK installed.
#Later we will make it possible if LAPACK is not present to automaticall install before compiling dendro5
if(OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

if(MPI_COMPILE_FLAGS)
    set(COMPILE_FLAGS "${COMPILE_FLAGS} ${MPI_COMPILE_FLAGS}")
endif()

if(MPI_LINK_FLAGS)
    set(LINK_FLAGS "${LINK_FLAGS} ${MPI_LINK_FLAGS}")
endif()

find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)
set(LAPACK_LINKER_FLAGS -llapacke -llapack -lblas -lgfortran -lquadmath)
set(LAPACKE_DIR $ENV{LAPACK}/LAPACKE)
set(LINK_FLAGS "${LINK_FLAGS} ${LAPACK_LINKER_FLAGS}")
find_library(LAPACKE_LIB
		NAMES lapacke lapackelib liblapacke
		HINTS "/usr/lib/"
		)
set(LAPACK_LIBRARIES ${LAPACK_LIBRARIES} ${LAPACKE_LIB})
message(STATUS ${LAPACK_LIBRARIES})

find_library(DENDRO_LIB NAMES dendro5 PATHS ${DENDRO_LIB_PATH})

set(INC include/parameters.h
        include/rk4nlsm.h
        include/nlsmUtils.h
        include/rhs.h
        include/derivs.h
        include/profile_params.h
        )

set(SRC src/rk4nlsm.cpp
        src/parameters.cpp
        src/nlsmUtils.cpp
        src/rhs.cpp
        src/derivs.cpp
        src/profile_params.cpp
        )

set(SOURCE_FILES src/nlsm.cpp  include/nlsm.h ${INC} ${SRC})
add_executable(${APP_NAME}Solver ${SOURCE_FILES})
target_include_directories(${APP_NAME}Solver PRIVATE ${CMAKE_SOURCE_DIR}/include)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/include)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/include/test)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/examples/include)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/FEM/include)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/ODE/include)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/LinAlg/include)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/IO/vtk/include)
target_include_directories(${APP_NAME}Solver PRIVATE ${DENDRO_ROOT_PATH}/IO/zlib/inc)
target_include_directories(${APP_NAME}Solver PRIVATE ${MPI_INCLUDE_PATH})
target_include_directories(${APP_NAME}Solver PRIVATE ${GSL_INCLUDE_DIRS})

target_link_libraries(${APP_NAME}Solver ${DENDRO_LIB} ${LAPACK_LIBRARIES} ${MPI_LIBRARIES} m)
